
perceptron1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009044  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080091d0  080091d0  000191d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009268  08009268  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08009268  08009268  00019268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009270  08009270  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009270  08009270  00019270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009274  08009274  00019274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08009278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001d58  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001e54  20001e54  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000145f6  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003107  00000000  00000000  00034722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b0  00000000  00000000  00037830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001048  00000000  00000000  000389e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025160  00000000  00000000  00039a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015d31  00000000  00000000  0005eb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9177  00000000  00000000  000748b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014da30  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bcc  00000000  00000000  0014da80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080091b4 	.word	0x080091b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	080091b4 	.word	0x080091b4

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_uldivmod>:
 80008a4:	b953      	cbnz	r3, 80008bc <__aeabi_uldivmod+0x18>
 80008a6:	b94a      	cbnz	r2, 80008bc <__aeabi_uldivmod+0x18>
 80008a8:	2900      	cmp	r1, #0
 80008aa:	bf08      	it	eq
 80008ac:	2800      	cmpeq	r0, #0
 80008ae:	bf1c      	itt	ne
 80008b0:	f04f 31ff 	movne.w	r1, #4294967295
 80008b4:	f04f 30ff 	movne.w	r0, #4294967295
 80008b8:	f000 b974 	b.w	8000ba4 <__aeabi_idiv0>
 80008bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008c4:	f000 f806 	bl	80008d4 <__udivmoddi4>
 80008c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d0:	b004      	add	sp, #16
 80008d2:	4770      	bx	lr

080008d4 <__udivmoddi4>:
 80008d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d8:	9d08      	ldr	r5, [sp, #32]
 80008da:	4604      	mov	r4, r0
 80008dc:	468e      	mov	lr, r1
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d14d      	bne.n	800097e <__udivmoddi4+0xaa>
 80008e2:	428a      	cmp	r2, r1
 80008e4:	4694      	mov	ip, r2
 80008e6:	d969      	bls.n	80009bc <__udivmoddi4+0xe8>
 80008e8:	fab2 f282 	clz	r2, r2
 80008ec:	b152      	cbz	r2, 8000904 <__udivmoddi4+0x30>
 80008ee:	fa01 f302 	lsl.w	r3, r1, r2
 80008f2:	f1c2 0120 	rsb	r1, r2, #32
 80008f6:	fa20 f101 	lsr.w	r1, r0, r1
 80008fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80008fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000902:	4094      	lsls	r4, r2
 8000904:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000908:	0c21      	lsrs	r1, r4, #16
 800090a:	fbbe f6f8 	udiv	r6, lr, r8
 800090e:	fa1f f78c 	uxth.w	r7, ip
 8000912:	fb08 e316 	mls	r3, r8, r6, lr
 8000916:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800091a:	fb06 f107 	mul.w	r1, r6, r7
 800091e:	4299      	cmp	r1, r3
 8000920:	d90a      	bls.n	8000938 <__udivmoddi4+0x64>
 8000922:	eb1c 0303 	adds.w	r3, ip, r3
 8000926:	f106 30ff 	add.w	r0, r6, #4294967295
 800092a:	f080 811f 	bcs.w	8000b6c <__udivmoddi4+0x298>
 800092e:	4299      	cmp	r1, r3
 8000930:	f240 811c 	bls.w	8000b6c <__udivmoddi4+0x298>
 8000934:	3e02      	subs	r6, #2
 8000936:	4463      	add	r3, ip
 8000938:	1a5b      	subs	r3, r3, r1
 800093a:	b2a4      	uxth	r4, r4
 800093c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000940:	fb08 3310 	mls	r3, r8, r0, r3
 8000944:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000948:	fb00 f707 	mul.w	r7, r0, r7
 800094c:	42a7      	cmp	r7, r4
 800094e:	d90a      	bls.n	8000966 <__udivmoddi4+0x92>
 8000950:	eb1c 0404 	adds.w	r4, ip, r4
 8000954:	f100 33ff 	add.w	r3, r0, #4294967295
 8000958:	f080 810a 	bcs.w	8000b70 <__udivmoddi4+0x29c>
 800095c:	42a7      	cmp	r7, r4
 800095e:	f240 8107 	bls.w	8000b70 <__udivmoddi4+0x29c>
 8000962:	4464      	add	r4, ip
 8000964:	3802      	subs	r0, #2
 8000966:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800096a:	1be4      	subs	r4, r4, r7
 800096c:	2600      	movs	r6, #0
 800096e:	b11d      	cbz	r5, 8000978 <__udivmoddi4+0xa4>
 8000970:	40d4      	lsrs	r4, r2
 8000972:	2300      	movs	r3, #0
 8000974:	e9c5 4300 	strd	r4, r3, [r5]
 8000978:	4631      	mov	r1, r6
 800097a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097e:	428b      	cmp	r3, r1
 8000980:	d909      	bls.n	8000996 <__udivmoddi4+0xc2>
 8000982:	2d00      	cmp	r5, #0
 8000984:	f000 80ef 	beq.w	8000b66 <__udivmoddi4+0x292>
 8000988:	2600      	movs	r6, #0
 800098a:	e9c5 0100 	strd	r0, r1, [r5]
 800098e:	4630      	mov	r0, r6
 8000990:	4631      	mov	r1, r6
 8000992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000996:	fab3 f683 	clz	r6, r3
 800099a:	2e00      	cmp	r6, #0
 800099c:	d14a      	bne.n	8000a34 <__udivmoddi4+0x160>
 800099e:	428b      	cmp	r3, r1
 80009a0:	d302      	bcc.n	80009a8 <__udivmoddi4+0xd4>
 80009a2:	4282      	cmp	r2, r0
 80009a4:	f200 80f9 	bhi.w	8000b9a <__udivmoddi4+0x2c6>
 80009a8:	1a84      	subs	r4, r0, r2
 80009aa:	eb61 0303 	sbc.w	r3, r1, r3
 80009ae:	2001      	movs	r0, #1
 80009b0:	469e      	mov	lr, r3
 80009b2:	2d00      	cmp	r5, #0
 80009b4:	d0e0      	beq.n	8000978 <__udivmoddi4+0xa4>
 80009b6:	e9c5 4e00 	strd	r4, lr, [r5]
 80009ba:	e7dd      	b.n	8000978 <__udivmoddi4+0xa4>
 80009bc:	b902      	cbnz	r2, 80009c0 <__udivmoddi4+0xec>
 80009be:	deff      	udf	#255	; 0xff
 80009c0:	fab2 f282 	clz	r2, r2
 80009c4:	2a00      	cmp	r2, #0
 80009c6:	f040 8092 	bne.w	8000aee <__udivmoddi4+0x21a>
 80009ca:	eba1 010c 	sub.w	r1, r1, ip
 80009ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d2:	fa1f fe8c 	uxth.w	lr, ip
 80009d6:	2601      	movs	r6, #1
 80009d8:	0c20      	lsrs	r0, r4, #16
 80009da:	fbb1 f3f7 	udiv	r3, r1, r7
 80009de:	fb07 1113 	mls	r1, r7, r3, r1
 80009e2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009e6:	fb0e f003 	mul.w	r0, lr, r3
 80009ea:	4288      	cmp	r0, r1
 80009ec:	d908      	bls.n	8000a00 <__udivmoddi4+0x12c>
 80009ee:	eb1c 0101 	adds.w	r1, ip, r1
 80009f2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009f6:	d202      	bcs.n	80009fe <__udivmoddi4+0x12a>
 80009f8:	4288      	cmp	r0, r1
 80009fa:	f200 80cb 	bhi.w	8000b94 <__udivmoddi4+0x2c0>
 80009fe:	4643      	mov	r3, r8
 8000a00:	1a09      	subs	r1, r1, r0
 8000a02:	b2a4      	uxth	r4, r4
 8000a04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a08:	fb07 1110 	mls	r1, r7, r0, r1
 8000a0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a10:	fb0e fe00 	mul.w	lr, lr, r0
 8000a14:	45a6      	cmp	lr, r4
 8000a16:	d908      	bls.n	8000a2a <__udivmoddi4+0x156>
 8000a18:	eb1c 0404 	adds.w	r4, ip, r4
 8000a1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a20:	d202      	bcs.n	8000a28 <__udivmoddi4+0x154>
 8000a22:	45a6      	cmp	lr, r4
 8000a24:	f200 80bb 	bhi.w	8000b9e <__udivmoddi4+0x2ca>
 8000a28:	4608      	mov	r0, r1
 8000a2a:	eba4 040e 	sub.w	r4, r4, lr
 8000a2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a32:	e79c      	b.n	800096e <__udivmoddi4+0x9a>
 8000a34:	f1c6 0720 	rsb	r7, r6, #32
 8000a38:	40b3      	lsls	r3, r6
 8000a3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a42:	fa20 f407 	lsr.w	r4, r0, r7
 8000a46:	fa01 f306 	lsl.w	r3, r1, r6
 8000a4a:	431c      	orrs	r4, r3
 8000a4c:	40f9      	lsrs	r1, r7
 8000a4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a52:	fa00 f306 	lsl.w	r3, r0, r6
 8000a56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a5a:	0c20      	lsrs	r0, r4, #16
 8000a5c:	fa1f fe8c 	uxth.w	lr, ip
 8000a60:	fb09 1118 	mls	r1, r9, r8, r1
 8000a64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a68:	fb08 f00e 	mul.w	r0, r8, lr
 8000a6c:	4288      	cmp	r0, r1
 8000a6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a72:	d90b      	bls.n	8000a8c <__udivmoddi4+0x1b8>
 8000a74:	eb1c 0101 	adds.w	r1, ip, r1
 8000a78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a7c:	f080 8088 	bcs.w	8000b90 <__udivmoddi4+0x2bc>
 8000a80:	4288      	cmp	r0, r1
 8000a82:	f240 8085 	bls.w	8000b90 <__udivmoddi4+0x2bc>
 8000a86:	f1a8 0802 	sub.w	r8, r8, #2
 8000a8a:	4461      	add	r1, ip
 8000a8c:	1a09      	subs	r1, r1, r0
 8000a8e:	b2a4      	uxth	r4, r4
 8000a90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a94:	fb09 1110 	mls	r1, r9, r0, r1
 8000a98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa0:	458e      	cmp	lr, r1
 8000aa2:	d908      	bls.n	8000ab6 <__udivmoddi4+0x1e2>
 8000aa4:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aac:	d26c      	bcs.n	8000b88 <__udivmoddi4+0x2b4>
 8000aae:	458e      	cmp	lr, r1
 8000ab0:	d96a      	bls.n	8000b88 <__udivmoddi4+0x2b4>
 8000ab2:	3802      	subs	r0, #2
 8000ab4:	4461      	add	r1, ip
 8000ab6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aba:	fba0 9402 	umull	r9, r4, r0, r2
 8000abe:	eba1 010e 	sub.w	r1, r1, lr
 8000ac2:	42a1      	cmp	r1, r4
 8000ac4:	46c8      	mov	r8, r9
 8000ac6:	46a6      	mov	lr, r4
 8000ac8:	d356      	bcc.n	8000b78 <__udivmoddi4+0x2a4>
 8000aca:	d053      	beq.n	8000b74 <__udivmoddi4+0x2a0>
 8000acc:	b15d      	cbz	r5, 8000ae6 <__udivmoddi4+0x212>
 8000ace:	ebb3 0208 	subs.w	r2, r3, r8
 8000ad2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ad6:	fa01 f707 	lsl.w	r7, r1, r7
 8000ada:	fa22 f306 	lsr.w	r3, r2, r6
 8000ade:	40f1      	lsrs	r1, r6
 8000ae0:	431f      	orrs	r7, r3
 8000ae2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ae6:	2600      	movs	r6, #0
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	f1c2 0320 	rsb	r3, r2, #32
 8000af2:	40d8      	lsrs	r0, r3
 8000af4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af8:	fa21 f303 	lsr.w	r3, r1, r3
 8000afc:	4091      	lsls	r1, r2
 8000afe:	4301      	orrs	r1, r0
 8000b00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b04:	fa1f fe8c 	uxth.w	lr, ip
 8000b08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000b10:	0c0b      	lsrs	r3, r1, #16
 8000b12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b16:	fb00 f60e 	mul.w	r6, r0, lr
 8000b1a:	429e      	cmp	r6, r3
 8000b1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000b20:	d908      	bls.n	8000b34 <__udivmoddi4+0x260>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b2a:	d22f      	bcs.n	8000b8c <__udivmoddi4+0x2b8>
 8000b2c:	429e      	cmp	r6, r3
 8000b2e:	d92d      	bls.n	8000b8c <__udivmoddi4+0x2b8>
 8000b30:	3802      	subs	r0, #2
 8000b32:	4463      	add	r3, ip
 8000b34:	1b9b      	subs	r3, r3, r6
 8000b36:	b289      	uxth	r1, r1
 8000b38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b44:	fb06 f30e 	mul.w	r3, r6, lr
 8000b48:	428b      	cmp	r3, r1
 8000b4a:	d908      	bls.n	8000b5e <__udivmoddi4+0x28a>
 8000b4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b54:	d216      	bcs.n	8000b84 <__udivmoddi4+0x2b0>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d914      	bls.n	8000b84 <__udivmoddi4+0x2b0>
 8000b5a:	3e02      	subs	r6, #2
 8000b5c:	4461      	add	r1, ip
 8000b5e:	1ac9      	subs	r1, r1, r3
 8000b60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b64:	e738      	b.n	80009d8 <__udivmoddi4+0x104>
 8000b66:	462e      	mov	r6, r5
 8000b68:	4628      	mov	r0, r5
 8000b6a:	e705      	b.n	8000978 <__udivmoddi4+0xa4>
 8000b6c:	4606      	mov	r6, r0
 8000b6e:	e6e3      	b.n	8000938 <__udivmoddi4+0x64>
 8000b70:	4618      	mov	r0, r3
 8000b72:	e6f8      	b.n	8000966 <__udivmoddi4+0x92>
 8000b74:	454b      	cmp	r3, r9
 8000b76:	d2a9      	bcs.n	8000acc <__udivmoddi4+0x1f8>
 8000b78:	ebb9 0802 	subs.w	r8, r9, r2
 8000b7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b80:	3801      	subs	r0, #1
 8000b82:	e7a3      	b.n	8000acc <__udivmoddi4+0x1f8>
 8000b84:	4646      	mov	r6, r8
 8000b86:	e7ea      	b.n	8000b5e <__udivmoddi4+0x28a>
 8000b88:	4620      	mov	r0, r4
 8000b8a:	e794      	b.n	8000ab6 <__udivmoddi4+0x1e2>
 8000b8c:	4640      	mov	r0, r8
 8000b8e:	e7d1      	b.n	8000b34 <__udivmoddi4+0x260>
 8000b90:	46d0      	mov	r8, sl
 8000b92:	e77b      	b.n	8000a8c <__udivmoddi4+0x1b8>
 8000b94:	3b02      	subs	r3, #2
 8000b96:	4461      	add	r1, ip
 8000b98:	e732      	b.n	8000a00 <__udivmoddi4+0x12c>
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	e709      	b.n	80009b2 <__udivmoddi4+0xde>
 8000b9e:	4464      	add	r4, ip
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	e742      	b.n	8000a2a <__udivmoddi4+0x156>

08000ba4 <__aeabi_idiv0>:
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <predict>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int predict(Perceptron* percep, double inputs[]) {
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b087      	sub	sp, #28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
    double sum = percep->weights[0];
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 0; i < input_size; i++) {
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	e01b      	b.n	8000bfa <predict+0x52>

        sum += inputs[i] * percep->weights[i + 1];
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	4413      	add	r3, r2
 8000bca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	4413      	add	r3, r2
 8000bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bdc:	f7ff faf4 	bl	80001c8 <__aeabi_dmul>
 8000be0:	4602      	mov	r2, r0
 8000be2:	460b      	mov	r3, r1
 8000be4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000be8:	f7ff fc1e 	bl	8000428 <__adddf3>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 0; i < input_size; i++) {
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	dde0      	ble.n	8000bc2 <predict+0x1a>
    }
    return (sum >= 0) ? 1 : 0;
 8000c00:	2301      	movs	r3, #1
 8000c02:	461c      	mov	r4, r3
 8000c04:	f04f 0200 	mov.w	r2, #0
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c10:	f7ff fe34 	bl	800087c <__aeabi_dcmpge>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d101      	bne.n	8000c1e <predict+0x76>
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	461c      	mov	r4, r3
 8000c1e:	b2e3      	uxtb	r3, r4
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	371c      	adds	r7, #28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd90      	pop	{r4, r7, pc}

08000c28 <train>:
void train(Perceptron* percep, double inputs[][input_size], int labels[], double learning_rate, int epochs, int num_examples) {
 8000c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c2a:	b08f      	sub	sp, #60	; 0x3c
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6178      	str	r0, [r7, #20]
 8000c30:	6139      	str	r1, [r7, #16]
 8000c32:	60fa      	str	r2, [r7, #12]
 8000c34:	ed87 0b00 	vstr	d0, [r7]
 8000c38:	60bb      	str	r3, [r7, #8]
    for (int epoch = 0; epoch < epochs; epoch++) {
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8000c3e:	e078      	b.n	8000d32 <train+0x10a>
        for (int example = 0; example < num_examples; example++) {
 8000c40:	2300      	movs	r3, #0
 8000c42:	633b      	str	r3, [r7, #48]	; 0x30
 8000c44:	e06e      	b.n	8000d24 <train+0xfc>
            double prediction = predict(percep, inputs[example]);
 8000c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4619      	mov	r1, r3
 8000c50:	6978      	ldr	r0, [r7, #20]
 8000c52:	f7ff ffa9 	bl	8000ba8 <predict>
 8000c56:	4603      	mov	r3, r0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fd31 	bl	80006c0 <__aeabi_i2d>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	460b      	mov	r3, r1
 8000c62:	e9c7 2308 	strd	r2, r3, [r7, #32]
            double error = labels[example] - prediction;
 8000c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fd25 	bl	80006c0 <__aeabi_i2d>
 8000c76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000c7a:	f7ff fbd3 	bl	8000424 <__aeabi_dsub>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	460b      	mov	r3, r1
 8000c82:	e9c7 2306 	strd	r2, r3, [r7, #24]
            percep->weights[0] += learning_rate * error;
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000c8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000c90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c94:	f7ff fa98 	bl	80001c8 <__aeabi_dmul>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	4629      	mov	r1, r5
 8000ca0:	f7ff fbc2 	bl	8000428 <__adddf3>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	6979      	ldr	r1, [r7, #20]
 8000caa:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < input_size; i++) {
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cb2:	e031      	b.n	8000d18 <train+0xf0>
                percep->weights[i + 1] += learning_rate * error * inputs[example][i];
 8000cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	4413      	add	r3, r2
 8000cbe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000cc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000cc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000cca:	f7ff fa7d 	bl	80001c8 <__aeabi_dmul>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cd8:	011b      	lsls	r3, r3, #4
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	441a      	add	r2, r3
 8000cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	4413      	add	r3, r2
 8000ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce8:	f7ff fa6e 	bl	80001c8 <__aeabi_dmul>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf6:	1c5e      	adds	r6, r3, #1
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	4629      	mov	r1, r5
 8000d00:	f7ff fb92 	bl	8000428 <__adddf3>
 8000d04:	4602      	mov	r2, r0
 8000d06:	460b      	mov	r3, r1
 8000d08:	6978      	ldr	r0, [r7, #20]
 8000d0a:	00f1      	lsls	r1, r6, #3
 8000d0c:	4401      	add	r1, r0
 8000d0e:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < input_size; i++) {
 8000d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d14:	3301      	adds	r3, #1
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	ddca      	ble.n	8000cb4 <train+0x8c>
        for (int example = 0; example < num_examples; example++) {
 8000d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d20:	3301      	adds	r3, #1
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
 8000d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	db8c      	blt.n	8000c46 <train+0x1e>
    for (int epoch = 0; epoch < epochs; epoch++) {
 8000d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d2e:	3301      	adds	r3, #1
 8000d30:	637b      	str	r3, [r7, #52]	; 0x34
 8000d32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	db82      	blt.n	8000c40 <train+0x18>
            }
        }
    }
}
 8000d3a:	bf00      	nop
 8000d3c:	bf00      	nop
 8000d3e:	373c      	adds	r7, #60	; 0x3c
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d44:	0000      	movs	r0, r0
	...

08000d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d48:	b5b0      	push	{r4, r5, r7, lr}
 8000d4a:	b0b6      	sub	sp, #216	; 0xd8
 8000d4c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4e:	f000 fc65 	bl	800161c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d52:	f000 f8e9 	bl	8000f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d56:	f000 fab7 	bl	80012c8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d5a:	f000 f94d 	bl	8000ff8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000d5e:	f000 f9ef 	bl	8001140 <MX_TIM2_Init>
  MX_ADC2_Init();
 8000d62:	f000 f99b 	bl	800109c <MX_ADC2_Init>
  MX_TIM5_Init();
 8000d66:	f000 fa37 	bl	80011d8 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 8000d6a:	f007 fcdf 	bl	800872c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  Perceptron percep;
  int count=0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000d74:	2100      	movs	r1, #0
 8000d76:	4864      	ldr	r0, [pc, #400]	; (8000f08 <main+0x1c0>)
 8000d78:	f003 fb2a 	bl	80043d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_3);
 8000d7c:	2108      	movs	r1, #8
 8000d7e:	4863      	ldr	r0, [pc, #396]	; (8000f0c <main+0x1c4>)
 8000d80:	f003 fb26 	bl	80043d0 <HAL_TIM_PWM_Start>

	/*  percep.weights[1]= atof(buffer); //trying to adjust buffer values to weights
	  HAL_Delay(100);
	  percep.weights[2]= atof(buffer);
	  CDC_Transmit_FS(buffer,strlen(buffer));*/
	  HAL_ADC_Start(&hadc1);
 8000d84:	4862      	ldr	r0, [pc, #392]	; (8000f10 <main+0x1c8>)
 8000d86:	f000 fd23 	bl	80017d0 <HAL_ADC_Start>
      HAL_ADC_Start(&hadc2);
 8000d8a:	4862      	ldr	r0, [pc, #392]	; (8000f14 <main+0x1cc>)
 8000d8c:	f000 fd20 	bl	80017d0 <HAL_ADC_Start>

	  if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8000d90:	210a      	movs	r1, #10
 8000d92:	485f      	ldr	r0, [pc, #380]	; (8000f10 <main+0x1c8>)
 8000d94:	f000 fe21 	bl	80019da <HAL_ADC_PollForConversion>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d110      	bne.n	8000dc0 <main+0x78>
	 	  			 voltage_1 = HAL_ADC_GetValue(&hadc1)/ (float)res_12bit;
 8000d9e:	485c      	ldr	r0, [pc, #368]	; (8000f10 <main+0x1c8>)
 8000da0:	f000 fea6 	bl	8001af0 <HAL_ADC_GetValue>
 8000da4:	ee07 0a90 	vmov	s15, r0
 8000da8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dac:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8000f18 <main+0x1d0>
 8000db0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000db4:	4b59      	ldr	r3, [pc, #356]	; (8000f1c <main+0x1d4>)
 8000db6:	edc3 7a00 	vstr	s15, [r3]
	 	  			 HAL_Delay(100);
 8000dba:	2064      	movs	r0, #100	; 0x64
 8000dbc:	f000 fca0 	bl	8001700 <HAL_Delay>
	 	  }
	  if (HAL_ADC_PollForConversion(&hadc2, 10) == HAL_OK) {
 8000dc0:	210a      	movs	r1, #10
 8000dc2:	4854      	ldr	r0, [pc, #336]	; (8000f14 <main+0x1cc>)
 8000dc4:	f000 fe09 	bl	80019da <HAL_ADC_PollForConversion>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d111      	bne.n	8000df2 <main+0xaa>
	  				 voltage_2 = HAL_ADC_GetValue(&hadc2)/ (float)res_12bit;
 8000dce:	4851      	ldr	r0, [pc, #324]	; (8000f14 <main+0x1cc>)
 8000dd0:	f000 fe8e 	bl	8001af0 <HAL_ADC_GetValue>
 8000dd4:	ee07 0a90 	vmov	s15, r0
 8000dd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ddc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8000f18 <main+0x1d0>
 8000de0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000de4:	4b4e      	ldr	r3, [pc, #312]	; (8000f20 <main+0x1d8>)
 8000de6:	edc3 7a00 	vstr	s15, [r3]
	  				 HAL_Delay(1000);
 8000dea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dee:	f000 fc87 	bl	8001700 <HAL_Delay>

	  }
	  HAL_ADC_Stop(&hadc1);
 8000df2:	4847      	ldr	r0, [pc, #284]	; (8000f10 <main+0x1c8>)
 8000df4:	f000 fdbe 	bl	8001974 <HAL_ADC_Stop>
	  HAL_ADC_Stop(&hadc2);
 8000df8:	4846      	ldr	r0, [pc, #280]	; (8000f14 <main+0x1cc>)
 8000dfa:	f000 fdbb 	bl	8001974 <HAL_ADC_Stop>

	  if(count ==0)
 8000dfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1be      	bne.n	8000d84 <main+0x3c>
	  {
      percep.weights[0]=voltage_1; //adjusting weights by pwm
 8000e06:	4b45      	ldr	r3, [pc, #276]	; (8000f1c <main+0x1d4>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fc6a 	bl	80006e4 <__aeabi_f2d>
 8000e10:	4602      	mov	r2, r0
 8000e12:	460b      	mov	r3, r1
 8000e14:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	  percep.weights[1]=voltage_2;
 8000e18:	4b41      	ldr	r3, [pc, #260]	; (8000f20 <main+0x1d8>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fc61 	bl	80006e4 <__aeabi_f2d>
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
double inputs[][input_size] = {
 8000e2a:	4b3e      	ldr	r3, [pc, #248]	; (8000f24 <main+0x1dc>)
 8000e2c:	463c      	mov	r4, r7
 8000e2e:	461d      	mov	r5, r3
 8000e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          {0, 0},
          {0, 1},
          {1, 0},
          {1, 1}
      };
      int labels_and[] = {0, 0, 0, 1};
 8000e44:	2300      	movs	r3, #0
 8000e46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000e50:	2300      	movs	r3, #0
 8000e52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000e56:	2301      	movs	r3, #1
 8000e58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      int num_examples = sizeof(inputs) / sizeof(inputs[0]);
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      double learning_rate = 0.1;
 8000e62:	a327      	add	r3, pc, #156	; (adr r3, 8000f00 <main+0x1b8>)
 8000e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e68:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
      int epochs = 10;
 8000e6c:	230a      	movs	r3, #10
 8000e6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      train(&percep, inputs, labels_and, learning_rate, epochs, num_examples);
 8000e72:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000e76:	4639      	mov	r1, r7
 8000e78:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8000e7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000e86:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 8000e8a:	f7ff fecd 	bl	8000c28 <train>

      // Testing the perceptron
      double test_inputs[][input_size] = {
 8000e8e:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <main+0x1dc>)
 8000e90:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000e94:	461d      	mov	r5, r3
 8000e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ea2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ea6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          {0, 0},
          {0, 1},
          {1, 0},
          {1, 1}
      };
      int num_test_examples = sizeof(test_inputs) / sizeof(test_inputs[0]);
 8000eaa:	2304      	movs	r3, #4
 8000eac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      for (int i = 0; i < num_test_examples; i++) {
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000eb6:	e01b      	b.n	8000ef0 <main+0x1a8>
          int prediction = predict(&percep, test_inputs[i]);
 8000eb8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000ebc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000ec0:	011b      	lsls	r3, r3, #4
 8000ec2:	441a      	add	r2, r3
 8000ec4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fe6c 	bl	8000ba8 <predict>
 8000ed0:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
          if(prediction==1)
 8000ed4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d104      	bne.n	8000ee6 <main+0x19e>
        	  count++;
 8000edc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      for (int i = 0; i < num_test_examples; i++) {
 8000ee6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000eea:	3301      	adds	r3, #1
 8000eec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000ef0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000ef4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	dbdd      	blt.n	8000eb8 <main+0x170>
	  HAL_ADC_Start(&hadc1);
 8000efc:	e742      	b.n	8000d84 <main+0x3c>
 8000efe:	bf00      	nop
 8000f00:	9999999a 	.word	0x9999999a
 8000f04:	3fb99999 	.word	0x3fb99999
 8000f08:	200001b4 	.word	0x200001b4
 8000f0c:	200001fc 	.word	0x200001fc
 8000f10:	20000124 	.word	0x20000124
 8000f14:	2000016c 	.word	0x2000016c
 8000f18:	45800000 	.word	0x45800000
 8000f1c:	20000118 	.word	0x20000118
 8000f20:	2000011c 	.word	0x2000011c
 8000f24:	080091d0 	.word	0x080091d0

08000f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b094      	sub	sp, #80	; 0x50
 8000f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	f107 0320 	add.w	r3, r7, #32
 8000f32:	2230      	movs	r2, #48	; 0x30
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f008 f934 	bl	80091a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	4b27      	ldr	r3, [pc, #156]	; (8000ff0 <SystemClock_Config+0xc8>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	4a26      	ldr	r2, [pc, #152]	; (8000ff0 <SystemClock_Config+0xc8>)
 8000f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5c:	4b24      	ldr	r3, [pc, #144]	; (8000ff0 <SystemClock_Config+0xc8>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f68:	2300      	movs	r3, #0
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <SystemClock_Config+0xcc>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a20      	ldr	r2, [pc, #128]	; (8000ff4 <SystemClock_Config+0xcc>)
 8000f72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <SystemClock_Config+0xcc>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f84:	2301      	movs	r3, #1
 8000f86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f9c:	2348      	movs	r3, #72	; 0x48
 8000f9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa8:	f107 0320 	add.w	r3, r7, #32
 8000fac:	4618      	mov	r0, r3
 8000fae:	f002 fcf7 	bl	80039a0 <HAL_RCC_OscConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fb8:	f000 f9ae 	bl	8001318 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f002 ff59 	bl	8003e90 <HAL_RCC_ClockConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fe4:	f000 f998 	bl	8001318 <Error_Handler>
  }
}
 8000fe8:	bf00      	nop
 8000fea:	3750      	adds	r7, #80	; 0x50
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40007000 	.word	0x40007000

08000ff8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <MX_ADC1_Init+0x98>)
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <MX_ADC1_Init+0x9c>)
 800100e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <MX_ADC1_Init+0x98>)
 8001012:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001016:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_ADC1_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <MX_ADC1_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_ADC1_Init+0x98>)
 8001026:	2201      	movs	r2, #1
 8001028:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <MX_ADC1_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_ADC1_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_ADC1_Init+0x98>)
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <MX_ADC1_Init+0xa0>)
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_ADC1_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_ADC1_Init+0x98>)
 8001046:	2201      	movs	r2, #1
 8001048:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_ADC1_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_ADC1_Init+0x98>)
 8001054:	2201      	movs	r2, #1
 8001056:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <MX_ADC1_Init+0x98>)
 800105a:	f000 fb75 	bl	8001748 <HAL_ADC_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001064:	f000 f958 	bl	8001318 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001068:	2300      	movs	r3, #0
 800106a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106c:	2301      	movs	r3, #1
 800106e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_ADC1_Init+0x98>)
 800107a:	f000 fd47 	bl	8001b0c <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001084:	f000 f948 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000124 	.word	0x20000124
 8001094:	40012000 	.word	0x40012000
 8001098:	0f000001 	.word	0x0f000001

0800109c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010a2:	463b      	mov	r3, r7
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80010ae:	4b21      	ldr	r3, [pc, #132]	; (8001134 <MX_ADC2_Init+0x98>)
 80010b0:	4a21      	ldr	r2, [pc, #132]	; (8001138 <MX_ADC2_Init+0x9c>)
 80010b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010b4:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <MX_ADC2_Init+0x98>)
 80010b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010ba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010bc:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <MX_ADC2_Init+0x98>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80010c2:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <MX_ADC2_Init+0x98>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010c8:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <MX_ADC2_Init+0x98>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010ce:	4b19      	ldr	r3, [pc, #100]	; (8001134 <MX_ADC2_Init+0x98>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <MX_ADC2_Init+0x98>)
 80010d8:	2200      	movs	r2, #0
 80010da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <MX_ADC2_Init+0x98>)
 80010de:	4a17      	ldr	r2, [pc, #92]	; (800113c <MX_ADC2_Init+0xa0>)
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <MX_ADC2_Init+0x98>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_ADC2_Init+0x98>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_ADC2_Init+0x98>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_ADC2_Init+0x98>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010fc:	480d      	ldr	r0, [pc, #52]	; (8001134 <MX_ADC2_Init+0x98>)
 80010fe:	f000 fb23 	bl	8001748 <HAL_ADC_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001108:	f000 f906 	bl	8001318 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800110c:	2303      	movs	r3, #3
 800110e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001110:	2301      	movs	r3, #1
 8001112:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001118:	463b      	mov	r3, r7
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <MX_ADC2_Init+0x98>)
 800111e:	f000 fcf5 	bl	8001b0c <HAL_ADC_ConfigChannel>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001128:	f000 f8f6 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2000016c 	.word	0x2000016c
 8001138:	40012100 	.word	0x40012100
 800113c:	0f000001 	.word	0x0f000001

08001140 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001154:	463b      	mov	r3, r7
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <MX_TIM2_Init+0x94>)
 800115e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001162:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <MX_TIM2_Init+0x94>)
 8001166:	2247      	movs	r2, #71	; 0x47
 8001168:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <MX_TIM2_Init+0x94>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001170:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <MX_TIM2_Init+0x94>)
 8001172:	f242 720f 	movw	r2, #9999	; 0x270f
 8001176:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <MX_TIM2_Init+0x94>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <MX_TIM2_Init+0x94>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001184:	4813      	ldr	r0, [pc, #76]	; (80011d4 <MX_TIM2_Init+0x94>)
 8001186:	f003 f87b 	bl	8004280 <HAL_TIM_Base_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001190:	f000 f8c2 	bl	8001318 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001198:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	4619      	mov	r1, r3
 80011a0:	480c      	ldr	r0, [pc, #48]	; (80011d4 <MX_TIM2_Init+0x94>)
 80011a2:	f003 fa9f 	bl	80046e4 <HAL_TIM_ConfigClockSource>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011ac:	f000 f8b4 	bl	8001318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b0:	2300      	movs	r3, #0
 80011b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	4619      	mov	r1, r3
 80011bc:	4805      	ldr	r0, [pc, #20]	; (80011d4 <MX_TIM2_Init+0x94>)
 80011be:	f003 fe69 	bl	8004e94 <HAL_TIMEx_MasterConfigSynchronization>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011c8:	f000 f8a6 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200001b4 	.word	0x200001b4

080011d8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08e      	sub	sp, #56	; 0x38
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ec:	f107 0320 	add.w	r3, r7, #32
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
 8001204:	615a      	str	r2, [r3, #20]
 8001206:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001208:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <MX_TIM5_Init+0xe8>)
 800120a:	4a2e      	ldr	r2, [pc, #184]	; (80012c4 <MX_TIM5_Init+0xec>)
 800120c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 72-1;
 800120e:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <MX_TIM5_Init+0xe8>)
 8001210:	2247      	movs	r2, #71	; 0x47
 8001212:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001214:	4b2a      	ldr	r3, [pc, #168]	; (80012c0 <MX_TIM5_Init+0xe8>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 800121a:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <MX_TIM5_Init+0xe8>)
 800121c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001220:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001222:	4b27      	ldr	r3, [pc, #156]	; (80012c0 <MX_TIM5_Init+0xe8>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001228:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <MX_TIM5_Init+0xe8>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800122e:	4824      	ldr	r0, [pc, #144]	; (80012c0 <MX_TIM5_Init+0xe8>)
 8001230:	f003 f826 	bl	8004280 <HAL_TIM_Base_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800123a:	f000 f86d 	bl	8001318 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800123e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001244:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001248:	4619      	mov	r1, r3
 800124a:	481d      	ldr	r0, [pc, #116]	; (80012c0 <MX_TIM5_Init+0xe8>)
 800124c:	f003 fa4a 	bl	80046e4 <HAL_TIM_ConfigClockSource>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001256:	f000 f85f 	bl	8001318 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800125a:	4819      	ldr	r0, [pc, #100]	; (80012c0 <MX_TIM5_Init+0xe8>)
 800125c:	f003 f85f 	bl	800431e <HAL_TIM_PWM_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001266:	f000 f857 	bl	8001318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001272:	f107 0320 	add.w	r3, r7, #32
 8001276:	4619      	mov	r1, r3
 8001278:	4811      	ldr	r0, [pc, #68]	; (80012c0 <MX_TIM5_Init+0xe8>)
 800127a:	f003 fe0b 	bl	8004e94 <HAL_TIMEx_MasterConfigSynchronization>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001284:	f000 f848 	bl	8001318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001288:	2360      	movs	r3, #96	; 0x60
 800128a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 8000-1;
 800128c:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8001290:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2208      	movs	r2, #8
 800129e:	4619      	mov	r1, r3
 80012a0:	4807      	ldr	r0, [pc, #28]	; (80012c0 <MX_TIM5_Init+0xe8>)
 80012a2:	f003 f95d 	bl	8004560 <HAL_TIM_PWM_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80012ac:	f000 f834 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80012b0:	4803      	ldr	r0, [pc, #12]	; (80012c0 <MX_TIM5_Init+0xe8>)
 80012b2:	f000 f909 	bl	80014c8 <HAL_TIM_MspPostInit>

}
 80012b6:	bf00      	nop
 80012b8:	3738      	adds	r7, #56	; 0x38
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200001fc 	.word	0x200001fc
 80012c4:	40000c00 	.word	0x40000c00

080012c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <MX_GPIO_Init+0x4c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a0f      	ldr	r2, [pc, #60]	; (8001314 <MX_GPIO_Init+0x4c>)
 80012d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <MX_GPIO_Init+0x4c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_GPIO_Init+0x4c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a08      	ldr	r2, [pc, #32]	; (8001314 <MX_GPIO_Init+0x4c>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_GPIO_Init+0x4c>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800

08001318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800131c:	b672      	cpsid	i
}
 800131e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001320:	e7fe      	b.n	8001320 <Error_Handler+0x8>
	...

08001324 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <HAL_MspInit+0x4c>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	4a0f      	ldr	r2, [pc, #60]	; (8001370 <HAL_MspInit+0x4c>)
 8001334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001338:	6453      	str	r3, [r2, #68]	; 0x44
 800133a:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <HAL_MspInit+0x4c>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_MspInit+0x4c>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	4a08      	ldr	r2, [pc, #32]	; (8001370 <HAL_MspInit+0x4c>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	6413      	str	r3, [r2, #64]	; 0x40
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_MspInit+0x4c>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800

08001374 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08c      	sub	sp, #48	; 0x30
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a2e      	ldr	r2, [pc, #184]	; (800144c <HAL_ADC_MspInit+0xd8>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d128      	bne.n	80013e8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	61bb      	str	r3, [r7, #24]
 800139a:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <HAL_ADC_MspInit+0xdc>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	4a2c      	ldr	r2, [pc, #176]	; (8001450 <HAL_ADC_MspInit+0xdc>)
 80013a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a4:	6453      	str	r3, [r2, #68]	; 0x44
 80013a6:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <HAL_ADC_MspInit+0xdc>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ae:	61bb      	str	r3, [r7, #24]
 80013b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	4b26      	ldr	r3, [pc, #152]	; (8001450 <HAL_ADC_MspInit+0xdc>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a25      	ldr	r2, [pc, #148]	; (8001450 <HAL_ADC_MspInit+0xdc>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b23      	ldr	r3, [pc, #140]	; (8001450 <HAL_ADC_MspInit+0xdc>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013ce:	2301      	movs	r3, #1
 80013d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d2:	2303      	movs	r3, #3
 80013d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	481c      	ldr	r0, [pc, #112]	; (8001454 <HAL_ADC_MspInit+0xe0>)
 80013e2:	f000 fec3 	bl	800216c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80013e6:	e02c      	b.n	8001442 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a1a      	ldr	r2, [pc, #104]	; (8001458 <HAL_ADC_MspInit+0xe4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d127      	bne.n	8001442 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <HAL_ADC_MspInit+0xdc>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a15      	ldr	r2, [pc, #84]	; (8001450 <HAL_ADC_MspInit+0xdc>)
 80013fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <HAL_ADC_MspInit+0xdc>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <HAL_ADC_MspInit+0xdc>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <HAL_ADC_MspInit+0xdc>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <HAL_ADC_MspInit+0xdc>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800142a:	2308      	movs	r3, #8
 800142c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142e:	2303      	movs	r3, #3
 8001430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <HAL_ADC_MspInit+0xe0>)
 800143e:	f000 fe95 	bl	800216c <HAL_GPIO_Init>
}
 8001442:	bf00      	nop
 8001444:	3730      	adds	r7, #48	; 0x30
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40012000 	.word	0x40012000
 8001450:	40023800 	.word	0x40023800
 8001454:	40020000 	.word	0x40020000
 8001458:	40012100 	.word	0x40012100

0800145c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800146c:	d10e      	bne.n	800148c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <HAL_TIM_Base_MspInit+0x64>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <HAL_TIM_Base_MspInit+0x64>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6413      	str	r3, [r2, #64]	; 0x40
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <HAL_TIM_Base_MspInit+0x64>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800148a:	e012      	b.n	80014b2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <HAL_TIM_Base_MspInit+0x68>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d10d      	bne.n	80014b2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <HAL_TIM_Base_MspInit+0x64>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	4a08      	ldr	r2, [pc, #32]	; (80014c0 <HAL_TIM_Base_MspInit+0x64>)
 80014a0:	f043 0308 	orr.w	r3, r3, #8
 80014a4:	6413      	str	r3, [r2, #64]	; 0x40
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_TIM_Base_MspInit+0x64>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
}
 80014b2:	bf00      	nop
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40000c00 	.word	0x40000c00

080014c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a12      	ldr	r2, [pc, #72]	; (8001530 <HAL_TIM_MspPostInit+0x68>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d11d      	bne.n	8001526 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <HAL_TIM_MspPostInit+0x6c>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a10      	ldr	r2, [pc, #64]	; (8001534 <HAL_TIM_MspPostInit+0x6c>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_TIM_MspPostInit+0x6c>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA2     ------> TIM5_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001506:	2304      	movs	r3, #4
 8001508:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001516:	2302      	movs	r3, #2
 8001518:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <HAL_TIM_MspPostInit+0x70>)
 8001522:	f000 fe23 	bl	800216c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001526:	bf00      	nop
 8001528:	3720      	adds	r7, #32
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40000c00 	.word	0x40000c00
 8001534:	40023800 	.word	0x40023800
 8001538:	40020000 	.word	0x40020000

0800153c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <NMI_Handler+0x4>

08001542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <HardFault_Handler+0x4>

08001548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <MemManage_Handler+0x4>

0800154e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <BusFault_Handler+0x4>

08001554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <UsageFault_Handler+0x4>

0800155a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001588:	f000 f89a 	bl	80016c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}

08001590 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <OTG_FS_IRQHandler+0x10>)
 8001596:	f001 f8d5 	bl	8002744 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20001728 	.word	0x20001728

080015a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <SystemInit+0x20>)
 80015aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ae:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <SystemInit+0x20>)
 80015b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001600 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015cc:	480d      	ldr	r0, [pc, #52]	; (8001604 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ce:	490e      	ldr	r1, [pc, #56]	; (8001608 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015d0:	4a0e      	ldr	r2, [pc, #56]	; (800160c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d4:	e002      	b.n	80015dc <LoopCopyDataInit>

080015d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015da:	3304      	adds	r3, #4

080015dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e0:	d3f9      	bcc.n	80015d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e2:	4a0b      	ldr	r2, [pc, #44]	; (8001610 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015e4:	4c0b      	ldr	r4, [pc, #44]	; (8001614 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e8:	e001      	b.n	80015ee <LoopFillZerobss>

080015ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ec:	3204      	adds	r2, #4

080015ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f0:	d3fb      	bcc.n	80015ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015f2:	f7ff ffd7 	bl	80015a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015f6:	f007 fda3 	bl	8009140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015fa:	f7ff fba5 	bl	8000d48 <main>
  bx  lr    
 80015fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001600:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001608:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 800160c:	08009278 	.word	0x08009278
  ldr r2, =_sbss
 8001610:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001614:	20001e54 	.word	0x20001e54

08001618 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001618:	e7fe      	b.n	8001618 <ADC_IRQHandler>
	...

0800161c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001620:	4b0e      	ldr	r3, [pc, #56]	; (800165c <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0d      	ldr	r2, [pc, #52]	; (800165c <HAL_Init+0x40>)
 8001626:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800162a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_Init+0x40>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0a      	ldr	r2, [pc, #40]	; (800165c <HAL_Init+0x40>)
 8001632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001636:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_Init+0x40>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <HAL_Init+0x40>)
 800163e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001642:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001644:	2003      	movs	r0, #3
 8001646:	f000 fd4f 	bl	80020e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164a:	200f      	movs	r0, #15
 800164c:	f000 f808 	bl	8001660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001650:	f7ff fe68 	bl	8001324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023c00 	.word	0x40023c00

08001660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_InitTick+0x54>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x58>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001676:	fbb3 f3f1 	udiv	r3, r3, r1
 800167a:	fbb2 f3f3 	udiv	r3, r2, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f000 fd67 	bl	8002152 <HAL_SYSTICK_Config>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e00e      	b.n	80016ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b0f      	cmp	r3, #15
 8001692:	d80a      	bhi.n	80016aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001694:	2200      	movs	r2, #0
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f000 fd2f 	bl	80020fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a0:	4a06      	ldr	r2, [pc, #24]	; (80016bc <HAL_InitTick+0x5c>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e000      	b.n	80016ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000008 	.word	0x20000008
 80016bc:	20000004 	.word	0x20000004

080016c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_IncTick+0x20>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_IncTick+0x24>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <HAL_IncTick+0x24>)
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	20000008 	.word	0x20000008
 80016e4:	20000244 	.word	0x20000244

080016e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return uwTick;
 80016ec:	4b03      	ldr	r3, [pc, #12]	; (80016fc <HAL_GetTick+0x14>)
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000244 	.word	0x20000244

08001700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001708:	f7ff ffee 	bl	80016e8 <HAL_GetTick>
 800170c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001718:	d005      	beq.n	8001726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_Delay+0x44>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001726:	bf00      	nop
 8001728:	f7ff ffde 	bl	80016e8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	429a      	cmp	r2, r3
 8001736:	d8f7      	bhi.n	8001728 <HAL_Delay+0x28>
  {
  }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000008 	.word	0x20000008

08001748 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e033      	b.n	80017c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	2b00      	cmp	r3, #0
 8001764:	d109      	bne.n	800177a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fe04 	bl	8001374 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	2b00      	cmp	r3, #0
 8001784:	d118      	bne.n	80017b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800178e:	f023 0302 	bic.w	r3, r3, #2
 8001792:	f043 0202 	orr.w	r2, r3, #2
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 fad8 	bl	8001d50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f023 0303 	bic.w	r3, r3, #3
 80017ae:	f043 0201 	orr.w	r2, r3, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	641a      	str	r2, [r3, #64]	; 0x40
 80017b6:	e001      	b.n	80017bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d101      	bne.n	80017ea <HAL_ADC_Start+0x1a>
 80017e6:	2302      	movs	r3, #2
 80017e8:	e0b2      	b.n	8001950 <HAL_ADC_Start+0x180>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d018      	beq.n	8001832 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0201 	orr.w	r2, r2, #1
 800180e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001810:	4b52      	ldr	r3, [pc, #328]	; (800195c <HAL_ADC_Start+0x18c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a52      	ldr	r2, [pc, #328]	; (8001960 <HAL_ADC_Start+0x190>)
 8001816:	fba2 2303 	umull	r2, r3, r2, r3
 800181a:	0c9a      	lsrs	r2, r3, #18
 800181c:	4613      	mov	r3, r2
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	4413      	add	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001824:	e002      	b.n	800182c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	3b01      	subs	r3, #1
 800182a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f9      	bne.n	8001826 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b01      	cmp	r3, #1
 800183e:	d17a      	bne.n	8001936 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001848:	f023 0301 	bic.w	r3, r3, #1
 800184c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185e:	2b00      	cmp	r3, #0
 8001860:	d007      	beq.n	8001872 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800186a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800187a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800187e:	d106      	bne.n	800188e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001884:	f023 0206 	bic.w	r2, r3, #6
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	645a      	str	r2, [r3, #68]	; 0x44
 800188c:	e002      	b.n	8001894 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800189c:	4b31      	ldr	r3, [pc, #196]	; (8001964 <HAL_ADC_Start+0x194>)
 800189e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018a8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 031f 	and.w	r3, r3, #31
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d12a      	bne.n	800190c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a2b      	ldr	r2, [pc, #172]	; (8001968 <HAL_ADC_Start+0x198>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d015      	beq.n	80018ec <HAL_ADC_Start+0x11c>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a29      	ldr	r2, [pc, #164]	; (800196c <HAL_ADC_Start+0x19c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d105      	bne.n	80018d6 <HAL_ADC_Start+0x106>
 80018ca:	4b26      	ldr	r3, [pc, #152]	; (8001964 <HAL_ADC_Start+0x194>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 031f 	and.w	r3, r3, #31
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00a      	beq.n	80018ec <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a25      	ldr	r2, [pc, #148]	; (8001970 <HAL_ADC_Start+0x1a0>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d136      	bne.n	800194e <HAL_ADC_Start+0x17e>
 80018e0:	4b20      	ldr	r3, [pc, #128]	; (8001964 <HAL_ADC_Start+0x194>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d130      	bne.n	800194e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d129      	bne.n	800194e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	e020      	b.n	800194e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a15      	ldr	r2, [pc, #84]	; (8001968 <HAL_ADC_Start+0x198>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d11b      	bne.n	800194e <HAL_ADC_Start+0x17e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d114      	bne.n	800194e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	e00b      	b.n	800194e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f043 0210 	orr.w	r2, r3, #16
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	f043 0201 	orr.w	r2, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	20000000 	.word	0x20000000
 8001960:	431bde83 	.word	0x431bde83
 8001964:	40012300 	.word	0x40012300
 8001968:	40012000 	.word	0x40012000
 800196c:	40012100 	.word	0x40012100
 8001970:	40012200 	.word	0x40012200

08001974 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001982:	2b01      	cmp	r3, #1
 8001984:	d101      	bne.n	800198a <HAL_ADC_Stop+0x16>
 8001986:	2302      	movs	r3, #2
 8001988:	e021      	b.n	80019ce <HAL_ADC_Stop+0x5a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 0201 	bic.w	r2, r2, #1
 80019a0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d109      	bne.n	80019c4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019b8:	f023 0301 	bic.w	r3, r3, #1
 80019bc:	f043 0201 	orr.w	r2, r3, #1
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b084      	sub	sp, #16
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f6:	d113      	bne.n	8001a20 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a06:	d10b      	bne.n	8001a20 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	f043 0220 	orr.w	r2, r3, #32
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e063      	b.n	8001ae8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a20:	f7ff fe62 	bl	80016e8 <HAL_GetTick>
 8001a24:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a26:	e021      	b.n	8001a6c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a2e:	d01d      	beq.n	8001a6c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d007      	beq.n	8001a46 <HAL_ADC_PollForConversion+0x6c>
 8001a36:	f7ff fe57 	bl	80016e8 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d212      	bcs.n	8001a6c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d00b      	beq.n	8001a6c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	f043 0204 	orr.w	r2, r3, #4
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e03d      	b.n	8001ae8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d1d6      	bne.n	8001a28 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f06f 0212 	mvn.w	r2, #18
 8001a82:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d123      	bne.n	8001ae6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d11f      	bne.n	8001ae6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d006      	beq.n	8001ac2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d111      	bne.n	8001ae6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d105      	bne.n	8001ae6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f043 0201 	orr.w	r2, r3, #1
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x1c>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e105      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x228>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b09      	cmp	r3, #9
 8001b36:	d925      	bls.n	8001b84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68d9      	ldr	r1, [r3, #12]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	461a      	mov	r2, r3
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3b1e      	subs	r3, #30
 8001b4e:	2207      	movs	r2, #7
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43da      	mvns	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	400a      	ands	r2, r1
 8001b5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68d9      	ldr	r1, [r3, #12]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	4618      	mov	r0, r3
 8001b70:	4603      	mov	r3, r0
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4403      	add	r3, r0
 8001b76:	3b1e      	subs	r3, #30
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	e022      	b.n	8001bca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6919      	ldr	r1, [r3, #16]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	2207      	movs	r2, #7
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	400a      	ands	r2, r1
 8001ba6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6919      	ldr	r1, [r3, #16]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	4618      	mov	r0, r3
 8001bba:	4603      	mov	r3, r0
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4403      	add	r3, r0
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d824      	bhi.n	8001c1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	3b05      	subs	r3, #5
 8001be4:	221f      	movs	r2, #31
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43da      	mvns	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	4618      	mov	r0, r3
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3b05      	subs	r3, #5
 8001c0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	635a      	str	r2, [r3, #52]	; 0x34
 8001c1a:	e04c      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b0c      	cmp	r3, #12
 8001c22:	d824      	bhi.n	8001c6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	3b23      	subs	r3, #35	; 0x23
 8001c36:	221f      	movs	r2, #31
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43da      	mvns	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	400a      	ands	r2, r1
 8001c44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4618      	mov	r0, r3
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3b23      	subs	r3, #35	; 0x23
 8001c60:	fa00 f203 	lsl.w	r2, r0, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c6c:	e023      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3b41      	subs	r3, #65	; 0x41
 8001c80:	221f      	movs	r2, #31
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43da      	mvns	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	400a      	ands	r2, r1
 8001c8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3b41      	subs	r3, #65	; 0x41
 8001caa:	fa00 f203 	lsl.w	r2, r0, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cb6:	4b22      	ldr	r3, [pc, #136]	; (8001d40 <HAL_ADC_ConfigChannel+0x234>)
 8001cb8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a21      	ldr	r2, [pc, #132]	; (8001d44 <HAL_ADC_ConfigChannel+0x238>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d109      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x1cc>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b12      	cmp	r3, #18
 8001cca:	d105      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a19      	ldr	r2, [pc, #100]	; (8001d44 <HAL_ADC_ConfigChannel+0x238>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d123      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x21e>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b10      	cmp	r3, #16
 8001ce8:	d003      	beq.n	8001cf2 <HAL_ADC_ConfigChannel+0x1e6>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b11      	cmp	r3, #17
 8001cf0:	d11b      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b10      	cmp	r3, #16
 8001d04:	d111      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d06:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <HAL_ADC_ConfigChannel+0x23c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a10      	ldr	r2, [pc, #64]	; (8001d4c <HAL_ADC_ConfigChannel+0x240>)
 8001d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d10:	0c9a      	lsrs	r2, r3, #18
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d1c:	e002      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f9      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	40012300 	.word	0x40012300
 8001d44:	40012000 	.word	0x40012000
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	431bde83 	.word	0x431bde83

08001d50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d58:	4b79      	ldr	r3, [pc, #484]	; (8001f40 <ADC_Init+0x1f0>)
 8001d5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	431a      	orrs	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6859      	ldr	r1, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	021a      	lsls	r2, r3, #8
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001da8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6859      	ldr	r1, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6899      	ldr	r1, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de2:	4a58      	ldr	r2, [pc, #352]	; (8001f44 <ADC_Init+0x1f4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d022      	beq.n	8001e2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001df6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6899      	ldr	r1, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6899      	ldr	r1, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	e00f      	b.n	8001e4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0202 	bic.w	r2, r2, #2
 8001e5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6899      	ldr	r1, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	7e1b      	ldrb	r3, [r3, #24]
 8001e68:	005a      	lsls	r2, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d01b      	beq.n	8001eb4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6859      	ldr	r1, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	035a      	lsls	r2, r3, #13
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	e007      	b.n	8001ec4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ec2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	051a      	lsls	r2, r3, #20
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ef8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6899      	ldr	r1, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f06:	025a      	lsls	r2, r3, #9
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6899      	ldr	r1, [r3, #8]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	029a      	lsls	r2, r3, #10
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	609a      	str	r2, [r3, #8]
}
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	40012300 	.word	0x40012300
 8001f44:	0f000001 	.word	0x0f000001

08001f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <__NVIC_SetPriorityGrouping+0x44>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f64:	4013      	ands	r3, r2
 8001f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f7a:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <__NVIC_SetPriorityGrouping+0x44>)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	60d3      	str	r3, [r2, #12]
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	0a1b      	lsrs	r3, r3, #8
 8001f9a:	f003 0307 	and.w	r3, r3, #7
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	db0b      	blt.n	8001fd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	f003 021f 	and.w	r2, r3, #31
 8001fc4:	4907      	ldr	r1, [pc, #28]	; (8001fe4 <__NVIC_EnableIRQ+0x38>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	2001      	movs	r0, #1
 8001fce:	fa00 f202 	lsl.w	r2, r0, r2
 8001fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000e100 	.word	0xe000e100

08001fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	6039      	str	r1, [r7, #0]
 8001ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	db0a      	blt.n	8002012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	490c      	ldr	r1, [pc, #48]	; (8002034 <__NVIC_SetPriority+0x4c>)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	0112      	lsls	r2, r2, #4
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	440b      	add	r3, r1
 800200c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002010:	e00a      	b.n	8002028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	4908      	ldr	r1, [pc, #32]	; (8002038 <__NVIC_SetPriority+0x50>)
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	3b04      	subs	r3, #4
 8002020:	0112      	lsls	r2, r2, #4
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	440b      	add	r3, r1
 8002026:	761a      	strb	r2, [r3, #24]
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000e100 	.word	0xe000e100
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800203c:	b480      	push	{r7}
 800203e:	b089      	sub	sp, #36	; 0x24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f1c3 0307 	rsb	r3, r3, #7
 8002056:	2b04      	cmp	r3, #4
 8002058:	bf28      	it	cs
 800205a:	2304      	movcs	r3, #4
 800205c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3304      	adds	r3, #4
 8002062:	2b06      	cmp	r3, #6
 8002064:	d902      	bls.n	800206c <NVIC_EncodePriority+0x30>
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3b03      	subs	r3, #3
 800206a:	e000      	b.n	800206e <NVIC_EncodePriority+0x32>
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002070:	f04f 32ff 	mov.w	r2, #4294967295
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43da      	mvns	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	401a      	ands	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002084:	f04f 31ff 	mov.w	r1, #4294967295
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	43d9      	mvns	r1, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	4313      	orrs	r3, r2
         );
}
 8002096:	4618      	mov	r0, r3
 8002098:	3724      	adds	r7, #36	; 0x24
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020b4:	d301      	bcc.n	80020ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b6:	2301      	movs	r3, #1
 80020b8:	e00f      	b.n	80020da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ba:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <SysTick_Config+0x40>)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3b01      	subs	r3, #1
 80020c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020c2:	210f      	movs	r1, #15
 80020c4:	f04f 30ff 	mov.w	r0, #4294967295
 80020c8:	f7ff ff8e 	bl	8001fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <SysTick_Config+0x40>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020d2:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <SysTick_Config+0x40>)
 80020d4:	2207      	movs	r2, #7
 80020d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	e000e010 	.word	0xe000e010

080020e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff ff29 	bl	8001f48 <__NVIC_SetPriorityGrouping>
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020fe:	b580      	push	{r7, lr}
 8002100:	b086      	sub	sp, #24
 8002102:	af00      	add	r7, sp, #0
 8002104:	4603      	mov	r3, r0
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
 800210a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002110:	f7ff ff3e 	bl	8001f90 <__NVIC_GetPriorityGrouping>
 8002114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	6978      	ldr	r0, [r7, #20]
 800211c:	f7ff ff8e 	bl	800203c <NVIC_EncodePriority>
 8002120:	4602      	mov	r2, r0
 8002122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002126:	4611      	mov	r1, r2
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff5d 	bl	8001fe8 <__NVIC_SetPriority>
}
 800212e:	bf00      	nop
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff31 	bl	8001fac <__NVIC_EnableIRQ>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ffa2 	bl	80020a4 <SysTick_Config>
 8002160:	4603      	mov	r3, r0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800216c:	b480      	push	{r7}
 800216e:	b089      	sub	sp, #36	; 0x24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800217e:	2300      	movs	r3, #0
 8002180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	e16b      	b.n	8002460 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002188:	2201      	movs	r2, #1
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	f040 815a 	bne.w	800245a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d005      	beq.n	80021be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d130      	bne.n	8002220 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	2203      	movs	r2, #3
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021f4:	2201      	movs	r2, #1
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 0201 	and.w	r2, r3, #1
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	2b03      	cmp	r3, #3
 800222a:	d017      	beq.n	800225c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	2203      	movs	r2, #3
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d123      	bne.n	80022b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	08da      	lsrs	r2, r3, #3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3208      	adds	r2, #8
 8002270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	220f      	movs	r2, #15
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	08da      	lsrs	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3208      	adds	r2, #8
 80022aa:	69b9      	ldr	r1, [r7, #24]
 80022ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0203 	and.w	r2, r3, #3
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 80b4 	beq.w	800245a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	4b60      	ldr	r3, [pc, #384]	; (8002478 <HAL_GPIO_Init+0x30c>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	4a5f      	ldr	r2, [pc, #380]	; (8002478 <HAL_GPIO_Init+0x30c>)
 80022fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002300:	6453      	str	r3, [r2, #68]	; 0x44
 8002302:	4b5d      	ldr	r3, [pc, #372]	; (8002478 <HAL_GPIO_Init+0x30c>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800230e:	4a5b      	ldr	r2, [pc, #364]	; (800247c <HAL_GPIO_Init+0x310>)
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	3302      	adds	r3, #2
 8002316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	220f      	movs	r2, #15
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a52      	ldr	r2, [pc, #328]	; (8002480 <HAL_GPIO_Init+0x314>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d02b      	beq.n	8002392 <HAL_GPIO_Init+0x226>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a51      	ldr	r2, [pc, #324]	; (8002484 <HAL_GPIO_Init+0x318>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d025      	beq.n	800238e <HAL_GPIO_Init+0x222>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a50      	ldr	r2, [pc, #320]	; (8002488 <HAL_GPIO_Init+0x31c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d01f      	beq.n	800238a <HAL_GPIO_Init+0x21e>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a4f      	ldr	r2, [pc, #316]	; (800248c <HAL_GPIO_Init+0x320>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d019      	beq.n	8002386 <HAL_GPIO_Init+0x21a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4e      	ldr	r2, [pc, #312]	; (8002490 <HAL_GPIO_Init+0x324>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d013      	beq.n	8002382 <HAL_GPIO_Init+0x216>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a4d      	ldr	r2, [pc, #308]	; (8002494 <HAL_GPIO_Init+0x328>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00d      	beq.n	800237e <HAL_GPIO_Init+0x212>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a4c      	ldr	r2, [pc, #304]	; (8002498 <HAL_GPIO_Init+0x32c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d007      	beq.n	800237a <HAL_GPIO_Init+0x20e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a4b      	ldr	r2, [pc, #300]	; (800249c <HAL_GPIO_Init+0x330>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d101      	bne.n	8002376 <HAL_GPIO_Init+0x20a>
 8002372:	2307      	movs	r3, #7
 8002374:	e00e      	b.n	8002394 <HAL_GPIO_Init+0x228>
 8002376:	2308      	movs	r3, #8
 8002378:	e00c      	b.n	8002394 <HAL_GPIO_Init+0x228>
 800237a:	2306      	movs	r3, #6
 800237c:	e00a      	b.n	8002394 <HAL_GPIO_Init+0x228>
 800237e:	2305      	movs	r3, #5
 8002380:	e008      	b.n	8002394 <HAL_GPIO_Init+0x228>
 8002382:	2304      	movs	r3, #4
 8002384:	e006      	b.n	8002394 <HAL_GPIO_Init+0x228>
 8002386:	2303      	movs	r3, #3
 8002388:	e004      	b.n	8002394 <HAL_GPIO_Init+0x228>
 800238a:	2302      	movs	r3, #2
 800238c:	e002      	b.n	8002394 <HAL_GPIO_Init+0x228>
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_GPIO_Init+0x228>
 8002392:	2300      	movs	r3, #0
 8002394:	69fa      	ldr	r2, [r7, #28]
 8002396:	f002 0203 	and.w	r2, r2, #3
 800239a:	0092      	lsls	r2, r2, #2
 800239c:	4093      	lsls	r3, r2
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023a4:	4935      	ldr	r1, [pc, #212]	; (800247c <HAL_GPIO_Init+0x310>)
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	089b      	lsrs	r3, r3, #2
 80023aa:	3302      	adds	r3, #2
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023b2:	4b3b      	ldr	r3, [pc, #236]	; (80024a0 <HAL_GPIO_Init+0x334>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023d6:	4a32      	ldr	r2, [pc, #200]	; (80024a0 <HAL_GPIO_Init+0x334>)
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023dc:	4b30      	ldr	r3, [pc, #192]	; (80024a0 <HAL_GPIO_Init+0x334>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002400:	4a27      	ldr	r2, [pc, #156]	; (80024a0 <HAL_GPIO_Init+0x334>)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002406:	4b26      	ldr	r3, [pc, #152]	; (80024a0 <HAL_GPIO_Init+0x334>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800242a:	4a1d      	ldr	r2, [pc, #116]	; (80024a0 <HAL_GPIO_Init+0x334>)
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002430:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <HAL_GPIO_Init+0x334>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002454:	4a12      	ldr	r2, [pc, #72]	; (80024a0 <HAL_GPIO_Init+0x334>)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3301      	adds	r3, #1
 800245e:	61fb      	str	r3, [r7, #28]
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	2b0f      	cmp	r3, #15
 8002464:	f67f ae90 	bls.w	8002188 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002468:	bf00      	nop
 800246a:	bf00      	nop
 800246c:	3724      	adds	r7, #36	; 0x24
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800
 800247c:	40013800 	.word	0x40013800
 8002480:	40020000 	.word	0x40020000
 8002484:	40020400 	.word	0x40020400
 8002488:	40020800 	.word	0x40020800
 800248c:	40020c00 	.word	0x40020c00
 8002490:	40021000 	.word	0x40021000
 8002494:	40021400 	.word	0x40021400
 8002498:	40021800 	.word	0x40021800
 800249c:	40021c00 	.word	0x40021c00
 80024a0:	40013c00 	.word	0x40013c00

080024a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024a6:	b08f      	sub	sp, #60	; 0x3c
 80024a8:	af0a      	add	r7, sp, #40	; 0x28
 80024aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e10f      	b.n	80026d6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d106      	bne.n	80024d6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f006 fb21 	bl	8008b18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2203      	movs	r2, #3
 80024da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d102      	bne.n	80024f0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f002 fe5e 	bl	80051b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	603b      	str	r3, [r7, #0]
 8002500:	687e      	ldr	r6, [r7, #4]
 8002502:	466d      	mov	r5, sp
 8002504:	f106 0410 	add.w	r4, r6, #16
 8002508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800250a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800250c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800250e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002510:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002514:	e885 0003 	stmia.w	r5, {r0, r1}
 8002518:	1d33      	adds	r3, r6, #4
 800251a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800251c:	6838      	ldr	r0, [r7, #0]
 800251e:	f002 fd35 	bl	8004f8c <USB_CoreInit>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0d0      	b.n	80026d6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2100      	movs	r1, #0
 800253a:	4618      	mov	r0, r3
 800253c:	f002 fe4c 	bl	80051d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002540:	2300      	movs	r3, #0
 8002542:	73fb      	strb	r3, [r7, #15]
 8002544:	e04a      	b.n	80025dc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002546:	7bfa      	ldrb	r2, [r7, #15]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	333d      	adds	r3, #61	; 0x3d
 8002556:	2201      	movs	r2, #1
 8002558:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800255a:	7bfa      	ldrb	r2, [r7, #15]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4413      	add	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	333c      	adds	r3, #60	; 0x3c
 800256a:	7bfa      	ldrb	r2, [r7, #15]
 800256c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800256e:	7bfa      	ldrb	r2, [r7, #15]
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	b298      	uxth	r0, r3
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	3344      	adds	r3, #68	; 0x44
 8002582:	4602      	mov	r2, r0
 8002584:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002586:	7bfa      	ldrb	r2, [r7, #15]
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4413      	add	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	3340      	adds	r3, #64	; 0x40
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800259a:	7bfa      	ldrb	r2, [r7, #15]
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	4613      	mov	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4413      	add	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	440b      	add	r3, r1
 80025a8:	3348      	adds	r3, #72	; 0x48
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025ae:	7bfa      	ldrb	r2, [r7, #15]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4413      	add	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	334c      	adds	r3, #76	; 0x4c
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025c2:	7bfa      	ldrb	r2, [r7, #15]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	3354      	adds	r3, #84	; 0x54
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
 80025d8:	3301      	adds	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
 80025dc:	7bfa      	ldrb	r2, [r7, #15]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d3af      	bcc.n	8002546 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	73fb      	strb	r3, [r7, #15]
 80025ea:	e044      	b.n	8002676 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4413      	add	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002602:	7bfa      	ldrb	r2, [r7, #15]
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002614:	7bfa      	ldrb	r2, [r7, #15]
 8002616:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002618:	7bfa      	ldrb	r2, [r7, #15]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800262e:	7bfa      	ldrb	r2, [r7, #15]
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002644:	7bfa      	ldrb	r2, [r7, #15]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800265a:	7bfa      	ldrb	r2, [r7, #15]
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	4413      	add	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	440b      	add	r3, r1
 8002668:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	3301      	adds	r3, #1
 8002674:	73fb      	strb	r3, [r7, #15]
 8002676:	7bfa      	ldrb	r2, [r7, #15]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	429a      	cmp	r2, r3
 800267e:	d3b5      	bcc.n	80025ec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	603b      	str	r3, [r7, #0]
 8002686:	687e      	ldr	r6, [r7, #4]
 8002688:	466d      	mov	r5, sp
 800268a:	f106 0410 	add.w	r4, r6, #16
 800268e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002696:	e894 0003 	ldmia.w	r4, {r0, r1}
 800269a:	e885 0003 	stmia.w	r5, {r0, r1}
 800269e:	1d33      	adds	r3, r6, #4
 80026a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026a2:	6838      	ldr	r0, [r7, #0]
 80026a4:	f002 fde4 	bl	8005270 <USB_DevInit>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2202      	movs	r2, #2
 80026b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e00d      	b.n	80026d6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f003 ff33 	bl	800653a <USB_DevDisconnect>

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_PCD_Start+0x1c>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e020      	b.n	800273c <HAL_PCD_Start+0x5e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	2b01      	cmp	r3, #1
 8002708:	d109      	bne.n	800271e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800270e:	2b01      	cmp	r3, #1
 8002710:	d005      	beq.n	800271e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002716:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f002 fd36 	bl	8005194 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f003 fee3 	bl	80064f8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002744:	b590      	push	{r4, r7, lr}
 8002746:	b08d      	sub	sp, #52	; 0x34
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f003 ffa1 	bl	80066a2 <USB_GetMode>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	f040 848a 	bne.w	800307c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f003 ff05 	bl	800657c <USB_ReadInterrupts>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 8480 	beq.w	800307a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	0a1b      	lsrs	r3, r3, #8
 8002784:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f003 fef2 	bl	800657c <USB_ReadInterrupts>
 8002798:	4603      	mov	r3, r0
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d107      	bne.n	80027b2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695a      	ldr	r2, [r3, #20]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f002 0202 	and.w	r2, r2, #2
 80027b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f003 fee0 	bl	800657c <USB_ReadInterrupts>
 80027bc:	4603      	mov	r3, r0
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b10      	cmp	r3, #16
 80027c4:	d161      	bne.n	800288a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699a      	ldr	r2, [r3, #24]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0210 	bic.w	r2, r2, #16
 80027d4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	f003 020f 	and.w	r2, r3, #15
 80027e2:	4613      	mov	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	3304      	adds	r3, #4
 80027f4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	0c5b      	lsrs	r3, r3, #17
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d124      	bne.n	800284c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d035      	beq.n	800287a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002818:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800281c:	b29b      	uxth	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	6a38      	ldr	r0, [r7, #32]
 8002822:	f003 fd17 	bl	8006254 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002832:	441a      	add	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	6a1a      	ldr	r2, [r3, #32]
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	091b      	lsrs	r3, r3, #4
 8002840:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002844:	441a      	add	r2, r3
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	621a      	str	r2, [r3, #32]
 800284a:	e016      	b.n	800287a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	0c5b      	lsrs	r3, r3, #17
 8002850:	f003 030f 	and.w	r3, r3, #15
 8002854:	2b06      	cmp	r3, #6
 8002856:	d110      	bne.n	800287a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800285e:	2208      	movs	r2, #8
 8002860:	4619      	mov	r1, r3
 8002862:	6a38      	ldr	r0, [r7, #32]
 8002864:	f003 fcf6 	bl	8006254 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	6a1a      	ldr	r2, [r3, #32]
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	091b      	lsrs	r3, r3, #4
 8002870:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002874:	441a      	add	r2, r3
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699a      	ldr	r2, [r3, #24]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f042 0210 	orr.w	r2, r2, #16
 8002888:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f003 fe74 	bl	800657c <USB_ReadInterrupts>
 8002894:	4603      	mov	r3, r0
 8002896:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800289a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800289e:	f040 80a7 	bne.w	80029f0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f003 fe79 	bl	80065a2 <USB_ReadDevAllOutEpInterrupt>
 80028b0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80028b2:	e099      	b.n	80029e8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80028b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 808e 	beq.w	80029dc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	4611      	mov	r1, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f003 fe9d 	bl	800660a <USB_ReadDevOutEPInterrupt>
 80028d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00c      	beq.n	80028f6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e8:	461a      	mov	r2, r3
 80028ea:	2301      	movs	r3, #1
 80028ec:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fec3 	bl	800367c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00c      	beq.n	800291a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	4413      	add	r3, r2
 8002908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800290c:	461a      	mov	r2, r3
 800290e:	2308      	movs	r3, #8
 8002910:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002912:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 ff99 	bl	800384c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	f003 0310 	and.w	r3, r3, #16
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	4413      	add	r3, r2
 800292c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002930:	461a      	mov	r2, r3
 8002932:	2310      	movs	r3, #16
 8002934:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d030      	beq.n	80029a2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002948:	2b80      	cmp	r3, #128	; 0x80
 800294a:	d109      	bne.n	8002960 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800295a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800295e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002962:	4613      	mov	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	4413      	add	r3, r2
 8002972:	3304      	adds	r3, #4
 8002974:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	78db      	ldrb	r3, [r3, #3]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d108      	bne.n	8002990 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2200      	movs	r2, #0
 8002982:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	b2db      	uxtb	r3, r3
 8002988:	4619      	mov	r1, r3
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f006 f9ca 	bl	8008d24 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	4413      	add	r3, r2
 8002998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800299c:	461a      	mov	r2, r3
 800299e:	2302      	movs	r3, #2
 80029a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029b8:	461a      	mov	r2, r3
 80029ba:	2320      	movs	r3, #32
 80029bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d009      	beq.n	80029dc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d4:	461a      	mov	r2, r3
 80029d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029da:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	3301      	adds	r3, #1
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80029e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e4:	085b      	lsrs	r3, r3, #1
 80029e6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80029e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f47f af62 	bne.w	80028b4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f003 fdc1 	bl	800657c <USB_ReadInterrupts>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a04:	f040 80db 	bne.w	8002bbe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f003 fde2 	bl	80065d6 <USB_ReadDevAllInEpInterrupt>
 8002a12:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002a18:	e0cd      	b.n	8002bb6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80c2 	beq.w	8002baa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	4611      	mov	r1, r2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f003 fe08 	bl	8006646 <USB_ReadDevInEPInterrupt>
 8002a36:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d057      	beq.n	8002af2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	2201      	movs	r2, #1
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69f9      	ldr	r1, [r7, #28]
 8002a5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a62:	4013      	ands	r3, r2
 8002a64:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	015a      	lsls	r2, r3, #5
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a72:	461a      	mov	r2, r3
 8002a74:	2301      	movs	r3, #1
 8002a76:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d132      	bne.n	8002ae6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	334c      	adds	r3, #76	; 0x4c
 8002a90:	6819      	ldr	r1, [r3, #0]
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a96:	4613      	mov	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4403      	add	r3, r0
 8002aa0:	3348      	adds	r3, #72	; 0x48
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4419      	add	r1, r3
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aaa:	4613      	mov	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4403      	add	r3, r0
 8002ab4:	334c      	adds	r3, #76	; 0x4c
 8002ab6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d113      	bne.n	8002ae6 <HAL_PCD_IRQHandler+0x3a2>
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	3354      	adds	r3, #84	; 0x54
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d108      	bne.n	8002ae6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	f003 fe0f 	bl	8006704 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	4619      	mov	r1, r3
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f006 f894 	bl	8008c1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2308      	movs	r3, #8
 8002b0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b24:	461a      	mov	r2, r3
 8002b26:	2310      	movs	r3, #16
 8002b28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b40:	461a      	mov	r2, r3
 8002b42:	2340      	movs	r3, #64	; 0x40
 8002b44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d023      	beq.n	8002b98 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b52:	6a38      	ldr	r0, [r7, #32]
 8002b54:	f002 fcf0 	bl	8005538 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4413      	add	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	3338      	adds	r3, #56	; 0x38
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	4413      	add	r3, r2
 8002b68:	3304      	adds	r3, #4
 8002b6a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	78db      	ldrb	r3, [r3, #3]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d108      	bne.n	8002b86 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	2200      	movs	r2, #0
 8002b78:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	4619      	mov	r1, r3
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f006 f8e1 	bl	8008d48 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b92:	461a      	mov	r2, r3
 8002b94:	2302      	movs	r3, #2
 8002b96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ba2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 fcdb 	bl	8003560 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	3301      	adds	r3, #1
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb2:	085b      	lsrs	r3, r3, #1
 8002bb4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f47f af2e 	bne.w	8002a1a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f003 fcda 	bl	800657c <USB_ReadInterrupts>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bd2:	d122      	bne.n	8002c1a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	69fa      	ldr	r2, [r7, #28]
 8002bde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002be2:	f023 0301 	bic.w	r3, r3, #1
 8002be6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d108      	bne.n	8002c04 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fec3 	bl	8003988 <HAL_PCDEx_LPM_Callback>
 8002c02:	e002      	b.n	8002c0a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f006 f87f 	bl	8008d08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695a      	ldr	r2, [r3, #20]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002c18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f003 fcac 	bl	800657c <USB_ReadInterrupts>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c2e:	d112      	bne.n	8002c56 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d102      	bne.n	8002c46 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f006 f83b 	bl	8008cbc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695a      	ldr	r2, [r3, #20]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002c54:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f003 fc8e 	bl	800657c <USB_ReadInterrupts>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c6a:	f040 80b7 	bne.w	8002ddc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	69fa      	ldr	r2, [r7, #28]
 8002c78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c7c:	f023 0301 	bic.w	r3, r3, #1
 8002c80:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2110      	movs	r1, #16
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f002 fc55 	bl	8005538 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c8e:	2300      	movs	r3, #0
 8002c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c92:	e046      	b.n	8002d22 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ca6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cb8:	0151      	lsls	r1, r2, #5
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	440a      	add	r2, r1
 8002cbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002cc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cc6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002cda:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cec:	0151      	lsls	r1, r2, #5
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	440a      	add	r2, r1
 8002cf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cf6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cfa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d0c:	0151      	lsls	r1, r2, #5
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	440a      	add	r2, r1
 8002d12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d1a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1e:	3301      	adds	r3, #1
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d3b3      	bcc.n	8002c94 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	69fa      	ldr	r2, [r7, #28]
 8002d36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d3a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002d3e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d016      	beq.n	8002d76 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d52:	69fa      	ldr	r2, [r7, #28]
 8002d54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d58:	f043 030b 	orr.w	r3, r3, #11
 8002d5c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d68:	69fa      	ldr	r2, [r7, #28]
 8002d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d6e:	f043 030b 	orr.w	r3, r3, #11
 8002d72:	6453      	str	r3, [r2, #68]	; 0x44
 8002d74:	e015      	b.n	8002da2 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	69fa      	ldr	r2, [r7, #28]
 8002d80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d88:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002d8c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d9c:	f043 030b 	orr.w	r3, r3, #11
 8002da0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	69fa      	ldr	r2, [r7, #28]
 8002dac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002db0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002db4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f003 fc9c 	bl	8006704 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002dda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f003 fbcb 	bl	800657c <USB_ReadInterrupts>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df0:	d124      	bne.n	8002e3c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f003 fc61 	bl	80066be <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f002 fc16 	bl	8005632 <USB_GetDevSpeed>
 8002e06:	4603      	mov	r3, r0
 8002e08:	461a      	mov	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681c      	ldr	r4, [r3, #0]
 8002e12:	f001 fa29 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 8002e16:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4620      	mov	r0, r4
 8002e22:	f002 f915 	bl	8005050 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f005 ff1f 	bl	8008c6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002e3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f003 fb9b 	bl	800657c <USB_ReadInterrupts>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d10a      	bne.n	8002e66 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f005 fefc 	bl	8008c4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	695a      	ldr	r2, [r3, #20]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f002 0208 	and.w	r2, r2, #8
 8002e64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f003 fb86 	bl	800657c <USB_ReadInterrupts>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e76:	2b80      	cmp	r3, #128	; 0x80
 8002e78:	d122      	bne.n	8002ec0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e86:	2301      	movs	r3, #1
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8a:	e014      	b.n	8002eb6 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e90:	4613      	mov	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d105      	bne.n	8002eb0 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fb27 	bl	80034fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d3e5      	bcc.n	8002e8c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f003 fb59 	bl	800657c <USB_ReadInterrupts>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ed0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ed4:	d13b      	bne.n	8002f4e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eda:	e02b      	b.n	8002f34 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	3340      	adds	r3, #64	; 0x40
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d115      	bne.n	8002f2e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002f02:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	da12      	bge.n	8002f2e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	333f      	adds	r3, #63	; 0x3f
 8002f18:	2201      	movs	r2, #1
 8002f1a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	4619      	mov	r1, r3
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fae8 	bl	80034fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	3301      	adds	r3, #1
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d3ce      	bcc.n	8002edc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002f4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f003 fb12 	bl	800657c <USB_ReadInterrupts>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f62:	d155      	bne.n	8003010 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f64:	2301      	movs	r3, #1
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
 8002f68:	e045      	b.n	8002ff6 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7e:	4613      	mov	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d12e      	bne.n	8002ff0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f92:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	da2b      	bge.n	8002ff0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002fa4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d121      	bne.n	8002ff0 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10a      	bne.n	8002ff0 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fe8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fec:	6053      	str	r3, [r2, #4]
            break;
 8002fee:	e007      	b.n	8003000 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d3b4      	bcc.n	8002f6a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695a      	ldr	r2, [r3, #20]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800300e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f003 fab1 	bl	800657c <USB_ReadInterrupts>
 800301a:	4603      	mov	r3, r0
 800301c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003024:	d10a      	bne.n	800303c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f005 fea0 	bl	8008d6c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695a      	ldr	r2, [r3, #20]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800303a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f003 fa9b 	bl	800657c <USB_ReadInterrupts>
 8003046:	4603      	mov	r3, r0
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b04      	cmp	r3, #4
 800304e:	d115      	bne.n	800307c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f005 fe90 	bl	8008d88 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6859      	ldr	r1, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	430a      	orrs	r2, r1
 8003076:	605a      	str	r2, [r3, #4]
 8003078:	e000      	b.n	800307c <HAL_PCD_IRQHandler+0x938>
      return;
 800307a:	bf00      	nop
    }
  }
}
 800307c:	3734      	adds	r7, #52	; 0x34
 800307e:	46bd      	mov	sp, r7
 8003080:	bd90      	pop	{r4, r7, pc}

08003082 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	460b      	mov	r3, r1
 800308c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_PCD_SetAddress+0x1a>
 8003098:	2302      	movs	r3, #2
 800309a:	e013      	b.n	80030c4 <HAL_PCD_SetAddress+0x42>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	4611      	mov	r1, r2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f003 f9f9 	bl	80064ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	4608      	mov	r0, r1
 80030d6:	4611      	mov	r1, r2
 80030d8:	461a      	mov	r2, r3
 80030da:	4603      	mov	r3, r0
 80030dc:	70fb      	strb	r3, [r7, #3]
 80030de:	460b      	mov	r3, r1
 80030e0:	803b      	strh	r3, [r7, #0]
 80030e2:	4613      	mov	r3, r2
 80030e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	da0f      	bge.n	8003112 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	f003 020f 	and.w	r2, r3, #15
 80030f8:	4613      	mov	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	3338      	adds	r3, #56	; 0x38
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	4413      	add	r3, r2
 8003106:	3304      	adds	r3, #4
 8003108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	705a      	strb	r2, [r3, #1]
 8003110:	e00f      	b.n	8003132 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003112:	78fb      	ldrb	r3, [r7, #3]
 8003114:	f003 020f 	and.w	r2, r3, #15
 8003118:	4613      	mov	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	4413      	add	r3, r2
 8003128:	3304      	adds	r3, #4
 800312a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003132:	78fb      	ldrb	r3, [r7, #3]
 8003134:	f003 030f 	and.w	r3, r3, #15
 8003138:	b2da      	uxtb	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800313e:	883a      	ldrh	r2, [r7, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	78ba      	ldrb	r2, [r7, #2]
 8003148:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	785b      	ldrb	r3, [r3, #1]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d004      	beq.n	800315c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800315c:	78bb      	ldrb	r3, [r7, #2]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d102      	bne.n	8003168 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_PCD_EP_Open+0xaa>
 8003172:	2302      	movs	r3, #2
 8003174:	e00e      	b.n	8003194 <HAL_PCD_EP_Open+0xc8>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68f9      	ldr	r1, [r7, #12]
 8003184:	4618      	mov	r0, r3
 8003186:	f002 fa79 	bl	800567c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003192:	7afb      	ldrb	r3, [r7, #11]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	da0f      	bge.n	80031d0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	f003 020f 	and.w	r2, r3, #15
 80031b6:	4613      	mov	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	3338      	adds	r3, #56	; 0x38
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	4413      	add	r3, r2
 80031c4:	3304      	adds	r3, #4
 80031c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2201      	movs	r2, #1
 80031cc:	705a      	strb	r2, [r3, #1]
 80031ce:	e00f      	b.n	80031f0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	f003 020f 	and.w	r2, r3, #15
 80031d6:	4613      	mov	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	4413      	add	r3, r2
 80031e6:	3304      	adds	r3, #4
 80031e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80031f0:	78fb      	ldrb	r3, [r7, #3]
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <HAL_PCD_EP_Close+0x6e>
 8003206:	2302      	movs	r3, #2
 8003208:	e00e      	b.n	8003228 <HAL_PCD_EP_Close+0x8c>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68f9      	ldr	r1, [r7, #12]
 8003218:	4618      	mov	r0, r3
 800321a:	f002 fab7 	bl	800578c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	607a      	str	r2, [r7, #4]
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	460b      	mov	r3, r1
 800323e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003240:	7afb      	ldrb	r3, [r7, #11]
 8003242:	f003 020f 	and.w	r2, r3, #15
 8003246:	4613      	mov	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4413      	add	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4413      	add	r3, r2
 8003256:	3304      	adds	r3, #4
 8003258:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2200      	movs	r2, #0
 800326a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2200      	movs	r2, #0
 8003270:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003272:	7afb      	ldrb	r3, [r7, #11]
 8003274:	f003 030f 	and.w	r3, r3, #15
 8003278:	b2da      	uxtb	r2, r3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d102      	bne.n	800328c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800328c:	7afb      	ldrb	r3, [r7, #11]
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	2b00      	cmp	r3, #0
 8003294:	d109      	bne.n	80032aa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	6979      	ldr	r1, [r7, #20]
 80032a4:	f002 fd96 	bl	8005dd4 <USB_EP0StartXfer>
 80032a8:	e008      	b.n	80032bc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	461a      	mov	r2, r3
 80032b6:	6979      	ldr	r1, [r7, #20]
 80032b8:	f002 fb44 	bl	8005944 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	460b      	mov	r3, r1
 80032d0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032d2:	78fb      	ldrb	r3, [r7, #3]
 80032d4:	f003 020f 	and.w	r2, r3, #15
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80032e8:	681b      	ldr	r3, [r3, #0]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b086      	sub	sp, #24
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	603b      	str	r3, [r7, #0]
 8003302:	460b      	mov	r3, r1
 8003304:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003306:	7afb      	ldrb	r3, [r7, #11]
 8003308:	f003 020f 	and.w	r2, r3, #15
 800330c:	4613      	mov	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	3338      	adds	r3, #56	; 0x38
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4413      	add	r3, r2
 800331a:	3304      	adds	r3, #4
 800331c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2200      	movs	r2, #0
 800332e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2201      	movs	r2, #1
 8003334:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003336:	7afb      	ldrb	r3, [r7, #11]
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	b2da      	uxtb	r2, r3
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d102      	bne.n	8003350 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003350:	7afb      	ldrb	r3, [r7, #11]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	2b00      	cmp	r3, #0
 8003358:	d109      	bne.n	800336e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	461a      	mov	r2, r3
 8003366:	6979      	ldr	r1, [r7, #20]
 8003368:	f002 fd34 	bl	8005dd4 <USB_EP0StartXfer>
 800336c:	e008      	b.n	8003380 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6818      	ldr	r0, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	461a      	mov	r2, r3
 800337a:	6979      	ldr	r1, [r7, #20]
 800337c:	f002 fae2 	bl	8005944 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	460b      	mov	r3, r1
 8003394:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003396:	78fb      	ldrb	r3, [r7, #3]
 8003398:	f003 020f 	and.w	r2, r3, #15
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d901      	bls.n	80033a8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e050      	b.n	800344a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	da0f      	bge.n	80033d0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	f003 020f 	and.w	r2, r3, #15
 80033b6:	4613      	mov	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	4413      	add	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	3338      	adds	r3, #56	; 0x38
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	4413      	add	r3, r2
 80033c4:	3304      	adds	r3, #4
 80033c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2201      	movs	r2, #1
 80033cc:	705a      	strb	r2, [r3, #1]
 80033ce:	e00d      	b.n	80033ec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	4613      	mov	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	4413      	add	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	4413      	add	r3, r2
 80033e2:	3304      	adds	r3, #4
 80033e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2201      	movs	r2, #1
 80033f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033f2:	78fb      	ldrb	r3, [r7, #3]
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003404:	2b01      	cmp	r3, #1
 8003406:	d101      	bne.n	800340c <HAL_PCD_EP_SetStall+0x82>
 8003408:	2302      	movs	r3, #2
 800340a:	e01e      	b.n	800344a <HAL_PCD_EP_SetStall+0xc0>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68f9      	ldr	r1, [r7, #12]
 800341a:	4618      	mov	r0, r3
 800341c:	f002 ff72 	bl	8006304 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10a      	bne.n	8003440 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	b2d9      	uxtb	r1, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800343a:	461a      	mov	r2, r3
 800343c:	f003 f962 	bl	8006704 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b084      	sub	sp, #16
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	460b      	mov	r3, r1
 800345c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800345e:	78fb      	ldrb	r3, [r7, #3]
 8003460:	f003 020f 	and.w	r2, r3, #15
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	429a      	cmp	r2, r3
 800346a:	d901      	bls.n	8003470 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e042      	b.n	80034f6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003470:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003474:	2b00      	cmp	r3, #0
 8003476:	da0f      	bge.n	8003498 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003478:	78fb      	ldrb	r3, [r7, #3]
 800347a:	f003 020f 	and.w	r2, r3, #15
 800347e:	4613      	mov	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	3338      	adds	r3, #56	; 0x38
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	4413      	add	r3, r2
 800348c:	3304      	adds	r3, #4
 800348e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2201      	movs	r2, #1
 8003494:	705a      	strb	r2, [r3, #1]
 8003496:	e00f      	b.n	80034b8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	f003 020f 	and.w	r2, r3, #15
 800349e:	4613      	mov	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	4413      	add	r3, r2
 80034ae:	3304      	adds	r3, #4
 80034b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_PCD_EP_ClrStall+0x86>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e00e      	b.n	80034f6 <HAL_PCD_EP_ClrStall+0xa4>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68f9      	ldr	r1, [r7, #12]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f002 ff7a 	bl	80063e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b084      	sub	sp, #16
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	460b      	mov	r3, r1
 8003508:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800350a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800350e:	2b00      	cmp	r3, #0
 8003510:	da0c      	bge.n	800352c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	f003 020f 	and.w	r2, r3, #15
 8003518:	4613      	mov	r3, r2
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	4413      	add	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	3338      	adds	r3, #56	; 0x38
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	4413      	add	r3, r2
 8003526:	3304      	adds	r3, #4
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	e00c      	b.n	8003546 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	f003 020f 	and.w	r2, r3, #15
 8003532:	4613      	mov	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	4413      	add	r3, r2
 8003542:	3304      	adds	r3, #4
 8003544:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68f9      	ldr	r1, [r7, #12]
 800354c:	4618      	mov	r0, r3
 800354e:	f002 fd99 	bl	8006084 <USB_EPStopXfer>
 8003552:	4603      	mov	r3, r0
 8003554:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003556:	7afb      	ldrb	r3, [r7, #11]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08a      	sub	sp, #40	; 0x28
 8003564:	af02      	add	r7, sp, #8
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	4613      	mov	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	3338      	adds	r3, #56	; 0x38
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	4413      	add	r3, r2
 8003584:	3304      	adds	r3, #4
 8003586:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a1a      	ldr	r2, [r3, #32]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	429a      	cmp	r2, r3
 8003592:	d901      	bls.n	8003598 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e06c      	b.n	8003672 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	699a      	ldr	r2, [r3, #24]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d902      	bls.n	80035b4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	3303      	adds	r3, #3
 80035b8:	089b      	lsrs	r3, r3, #2
 80035ba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035bc:	e02b      	b.n	8003616 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	69fa      	ldr	r2, [r7, #28]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d902      	bls.n	80035da <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	3303      	adds	r3, #3
 80035de:	089b      	lsrs	r3, r3, #2
 80035e0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6919      	ldr	r1, [r3, #16]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	4603      	mov	r3, r0
 80035f8:	6978      	ldr	r0, [r7, #20]
 80035fa:	f002 fded 	bl	80061d8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	691a      	ldr	r2, [r3, #16]
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	441a      	add	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a1a      	ldr	r2, [r3, #32]
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	441a      	add	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4413      	add	r3, r2
 800361e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	b29b      	uxth	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	429a      	cmp	r2, r3
 800362a:	d809      	bhi.n	8003640 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a1a      	ldr	r2, [r3, #32]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003634:	429a      	cmp	r2, r3
 8003636:	d203      	bcs.n	8003640 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1be      	bne.n	80035be <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	699a      	ldr	r2, [r3, #24]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	429a      	cmp	r2, r3
 800364a:	d811      	bhi.n	8003670 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	2201      	movs	r2, #1
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	43db      	mvns	r3, r3
 8003666:	6939      	ldr	r1, [r7, #16]
 8003668:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800366c:	4013      	ands	r3, r2
 800366e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3720      	adds	r7, #32
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	333c      	adds	r3, #60	; 0x3c
 8003694:	3304      	adds	r3, #4
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d17b      	bne.n	80037aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d015      	beq.n	80036e8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	4a61      	ldr	r2, [pc, #388]	; (8003844 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	f240 80b9 	bls.w	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 80b3 	beq.w	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036de:	461a      	mov	r2, r3
 80036e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036e4:	6093      	str	r3, [r2, #8]
 80036e6:	e0a7      	b.n	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d009      	beq.n	8003706 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fe:	461a      	mov	r2, r3
 8003700:	2320      	movs	r3, #32
 8003702:	6093      	str	r3, [r2, #8]
 8003704:	e098      	b.n	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800370c:	2b00      	cmp	r3, #0
 800370e:	f040 8093 	bne.w	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	4a4b      	ldr	r2, [pc, #300]	; (8003844 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d90f      	bls.n	800373a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003730:	461a      	mov	r2, r3
 8003732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003736:	6093      	str	r3, [r2, #8]
 8003738:	e07e      	b.n	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	4613      	mov	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	4413      	add	r3, r2
 800374c:	3304      	adds	r3, #4
 800374e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	0159      	lsls	r1, r3, #5
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	440b      	add	r3, r1
 800375c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003766:	1ad2      	subs	r2, r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d114      	bne.n	800379c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003784:	461a      	mov	r2, r3
 8003786:	2101      	movs	r1, #1
 8003788:	f002 ffbc 	bl	8006704 <USB_EP0_OutStart>
 800378c:	e006      	b.n	800379c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	691a      	ldr	r2, [r3, #16]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	441a      	add	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	4619      	mov	r1, r3
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f005 fa1e 	bl	8008be4 <HAL_PCD_DataOutStageCallback>
 80037a8:	e046      	b.n	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	4a26      	ldr	r2, [pc, #152]	; (8003848 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d124      	bne.n	80037fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c8:	461a      	mov	r2, r3
 80037ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ce:	6093      	str	r3, [r2, #8]
 80037d0:	e032      	b.n	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e8:	461a      	mov	r2, r3
 80037ea:	2320      	movs	r3, #32
 80037ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	4619      	mov	r1, r3
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f005 f9f5 	bl	8008be4 <HAL_PCD_DataOutStageCallback>
 80037fa:	e01d      	b.n	8003838 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d114      	bne.n	800382c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	4613      	mov	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d108      	bne.n	800382c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003824:	461a      	mov	r2, r3
 8003826:	2100      	movs	r1, #0
 8003828:	f002 ff6c 	bl	8006704 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	4619      	mov	r1, r3
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f005 f9d6 	bl	8008be4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3720      	adds	r7, #32
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	4f54300a 	.word	0x4f54300a
 8003848:	4f54310a 	.word	0x4f54310a

0800384c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	333c      	adds	r3, #60	; 0x3c
 8003864:	3304      	adds	r3, #4
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4413      	add	r3, r2
 8003872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4a15      	ldr	r2, [pc, #84]	; (80038d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d90e      	bls.n	80038a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003888:	2b00      	cmp	r3, #0
 800388a:	d009      	beq.n	80038a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003898:	461a      	mov	r2, r3
 800389a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800389e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f005 f98d 	bl	8008bc0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d90c      	bls.n	80038c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d108      	bne.n	80038c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038c0:	461a      	mov	r2, r3
 80038c2:	2101      	movs	r1, #1
 80038c4:	f002 ff1e 	bl	8006704 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	4f54300a 	.word	0x4f54300a

080038d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	70fb      	strb	r3, [r7, #3]
 80038e4:	4613      	mov	r3, r2
 80038e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d107      	bne.n	8003906 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038f6:	883b      	ldrh	r3, [r7, #0]
 80038f8:	0419      	lsls	r1, r3, #16
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	430a      	orrs	r2, r1
 8003902:	629a      	str	r2, [r3, #40]	; 0x28
 8003904:	e028      	b.n	8003958 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390c:	0c1b      	lsrs	r3, r3, #16
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	4413      	add	r3, r2
 8003912:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003914:	2300      	movs	r3, #0
 8003916:	73fb      	strb	r3, [r7, #15]
 8003918:	e00d      	b.n	8003936 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	3340      	adds	r3, #64	; 0x40
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	0c1b      	lsrs	r3, r3, #16
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	4413      	add	r3, r2
 800392e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	3301      	adds	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
 8003936:	7bfa      	ldrb	r2, [r7, #15]
 8003938:	78fb      	ldrb	r3, [r7, #3]
 800393a:	3b01      	subs	r3, #1
 800393c:	429a      	cmp	r2, r3
 800393e:	d3ec      	bcc.n	800391a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003940:	883b      	ldrh	r3, [r7, #0]
 8003942:	0418      	lsls	r0, r3, #16
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6819      	ldr	r1, [r3, #0]
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	3b01      	subs	r3, #1
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	4302      	orrs	r2, r0
 8003950:	3340      	adds	r3, #64	; 0x40
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	460b      	mov	r3, r1
 8003970:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	887a      	ldrh	r2, [r7, #2]
 8003978:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e267      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d075      	beq.n	8003aaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039be:	4b88      	ldr	r3, [pc, #544]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d00c      	beq.n	80039e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ca:	4b85      	ldr	r3, [pc, #532]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d112      	bne.n	80039fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039d6:	4b82      	ldr	r3, [pc, #520]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039e2:	d10b      	bne.n	80039fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e4:	4b7e      	ldr	r3, [pc, #504]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d05b      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x108>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d157      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e242      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a04:	d106      	bne.n	8003a14 <HAL_RCC_OscConfig+0x74>
 8003a06:	4b76      	ldr	r3, [pc, #472]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a75      	ldr	r2, [pc, #468]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	e01d      	b.n	8003a50 <HAL_RCC_OscConfig+0xb0>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x98>
 8003a1e:	4b70      	ldr	r3, [pc, #448]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a6f      	ldr	r2, [pc, #444]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	4b6d      	ldr	r3, [pc, #436]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a6c      	ldr	r2, [pc, #432]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	e00b      	b.n	8003a50 <HAL_RCC_OscConfig+0xb0>
 8003a38:	4b69      	ldr	r3, [pc, #420]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a68      	ldr	r2, [pc, #416]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	4b66      	ldr	r3, [pc, #408]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a65      	ldr	r2, [pc, #404]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d013      	beq.n	8003a80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7fd fe46 	bl	80016e8 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a60:	f7fd fe42 	bl	80016e8 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b64      	cmp	r3, #100	; 0x64
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e207      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	4b5b      	ldr	r3, [pc, #364]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0xc0>
 8003a7e:	e014      	b.n	8003aaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a80:	f7fd fe32 	bl	80016e8 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a88:	f7fd fe2e 	bl	80016e8 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	; 0x64
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e1f3      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9a:	4b51      	ldr	r3, [pc, #324]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0xe8>
 8003aa6:	e000      	b.n	8003aaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d063      	beq.n	8003b7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ab6:	4b4a      	ldr	r3, [pc, #296]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00b      	beq.n	8003ada <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ac2:	4b47      	ldr	r3, [pc, #284]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d11c      	bne.n	8003b08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ace:	4b44      	ldr	r3, [pc, #272]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d116      	bne.n	8003b08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ada:	4b41      	ldr	r3, [pc, #260]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_RCC_OscConfig+0x152>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d001      	beq.n	8003af2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e1c7      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af2:	4b3b      	ldr	r3, [pc, #236]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4937      	ldr	r1, [pc, #220]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b06:	e03a      	b.n	8003b7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d020      	beq.n	8003b52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b10:	4b34      	ldr	r3, [pc, #208]	; (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b16:	f7fd fde7 	bl	80016e8 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b1e:	f7fd fde3 	bl	80016e8 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e1a8      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b30:	4b2b      	ldr	r3, [pc, #172]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3c:	4b28      	ldr	r3, [pc, #160]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	4925      	ldr	r1, [pc, #148]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	600b      	str	r3, [r1, #0]
 8003b50:	e015      	b.n	8003b7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b52:	4b24      	ldr	r3, [pc, #144]	; (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fd fdc6 	bl	80016e8 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b60:	f7fd fdc2 	bl	80016e8 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e187      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b72:	4b1b      	ldr	r3, [pc, #108]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d036      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d016      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b92:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <HAL_RCC_OscConfig+0x248>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b98:	f7fd fda6 	bl	80016e8 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ba0:	f7fd fda2 	bl	80016e8 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e167      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x200>
 8003bbe:	e01b      	b.n	8003bf8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc0:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <HAL_RCC_OscConfig+0x248>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc6:	f7fd fd8f 	bl	80016e8 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bcc:	e00e      	b.n	8003bec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bce:	f7fd fd8b 	bl	80016e8 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d907      	bls.n	8003bec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e150      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
 8003be0:	40023800 	.word	0x40023800
 8003be4:	42470000 	.word	0x42470000
 8003be8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bec:	4b88      	ldr	r3, [pc, #544]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1ea      	bne.n	8003bce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8097 	beq.w	8003d34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c06:	2300      	movs	r3, #0
 8003c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c0a:	4b81      	ldr	r3, [pc, #516]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10f      	bne.n	8003c36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	4b7d      	ldr	r3, [pc, #500]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	4a7c      	ldr	r2, [pc, #496]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c24:	6413      	str	r3, [r2, #64]	; 0x40
 8003c26:	4b7a      	ldr	r3, [pc, #488]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c32:	2301      	movs	r3, #1
 8003c34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c36:	4b77      	ldr	r3, [pc, #476]	; (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d118      	bne.n	8003c74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c42:	4b74      	ldr	r3, [pc, #464]	; (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a73      	ldr	r2, [pc, #460]	; (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c4e:	f7fd fd4b 	bl	80016e8 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c56:	f7fd fd47 	bl	80016e8 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e10c      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c68:	4b6a      	ldr	r3, [pc, #424]	; (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d106      	bne.n	8003c8a <HAL_RCC_OscConfig+0x2ea>
 8003c7c:	4b64      	ldr	r3, [pc, #400]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c80:	4a63      	ldr	r2, [pc, #396]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	6713      	str	r3, [r2, #112]	; 0x70
 8003c88:	e01c      	b.n	8003cc4 <HAL_RCC_OscConfig+0x324>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	2b05      	cmp	r3, #5
 8003c90:	d10c      	bne.n	8003cac <HAL_RCC_OscConfig+0x30c>
 8003c92:	4b5f      	ldr	r3, [pc, #380]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c96:	4a5e      	ldr	r2, [pc, #376]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c98:	f043 0304 	orr.w	r3, r3, #4
 8003c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c9e:	4b5c      	ldr	r3, [pc, #368]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	4a5b      	ldr	r2, [pc, #364]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8003caa:	e00b      	b.n	8003cc4 <HAL_RCC_OscConfig+0x324>
 8003cac:	4b58      	ldr	r3, [pc, #352]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb0:	4a57      	ldr	r2, [pc, #348]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb8:	4b55      	ldr	r3, [pc, #340]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbc:	4a54      	ldr	r2, [pc, #336]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cbe:	f023 0304 	bic.w	r3, r3, #4
 8003cc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d015      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ccc:	f7fd fd0c 	bl	80016e8 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd2:	e00a      	b.n	8003cea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd4:	f7fd fd08 	bl	80016e8 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e0cb      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cea:	4b49      	ldr	r3, [pc, #292]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0ee      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x334>
 8003cf6:	e014      	b.n	8003d22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf8:	f7fd fcf6 	bl	80016e8 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d00:	f7fd fcf2 	bl	80016e8 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e0b5      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d16:	4b3e      	ldr	r3, [pc, #248]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1ee      	bne.n	8003d00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d22:	7dfb      	ldrb	r3, [r7, #23]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d105      	bne.n	8003d34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d28:	4b39      	ldr	r3, [pc, #228]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	4a38      	ldr	r2, [pc, #224]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 80a1 	beq.w	8003e80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d3e:	4b34      	ldr	r3, [pc, #208]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	2b08      	cmp	r3, #8
 8003d48:	d05c      	beq.n	8003e04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d141      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d52:	4b31      	ldr	r3, [pc, #196]	; (8003e18 <HAL_RCC_OscConfig+0x478>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7fd fcc6 	bl	80016e8 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d60:	f7fd fcc2 	bl	80016e8 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e087      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d72:	4b27      	ldr	r3, [pc, #156]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69da      	ldr	r2, [r3, #28]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	019b      	lsls	r3, r3, #6
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d94:	085b      	lsrs	r3, r3, #1
 8003d96:	3b01      	subs	r3, #1
 8003d98:	041b      	lsls	r3, r3, #16
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	061b      	lsls	r3, r3, #24
 8003da2:	491b      	ldr	r1, [pc, #108]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da8:	4b1b      	ldr	r3, [pc, #108]	; (8003e18 <HAL_RCC_OscConfig+0x478>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dae:	f7fd fc9b 	bl	80016e8 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db6:	f7fd fc97 	bl	80016e8 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e05c      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc8:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x416>
 8003dd4:	e054      	b.n	8003e80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd6:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <HAL_RCC_OscConfig+0x478>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7fd fc84 	bl	80016e8 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de4:	f7fd fc80 	bl	80016e8 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e045      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df6:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0x444>
 8003e02:	e03d      	b.n	8003e80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d107      	bne.n	8003e1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e038      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
 8003e10:	40023800 	.word	0x40023800
 8003e14:	40007000 	.word	0x40007000
 8003e18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e1c:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <HAL_RCC_OscConfig+0x4ec>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d028      	beq.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d121      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d11a      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d111      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	085b      	lsrs	r3, r3, #1
 8003e64:	3b01      	subs	r3, #1
 8003e66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d107      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40023800 	.word	0x40023800

08003e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0cc      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea4:	4b68      	ldr	r3, [pc, #416]	; (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d90c      	bls.n	8003ecc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb2:	4b65      	ldr	r3, [pc, #404]	; (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eba:	4b63      	ldr	r3, [pc, #396]	; (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0b8      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d020      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d005      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ee4:	4b59      	ldr	r3, [pc, #356]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	4a58      	ldr	r2, [pc, #352]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003efc:	4b53      	ldr	r3, [pc, #332]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4a52      	ldr	r2, [pc, #328]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f08:	4b50      	ldr	r3, [pc, #320]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	494d      	ldr	r1, [pc, #308]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d044      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d107      	bne.n	8003f3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2e:	4b47      	ldr	r3, [pc, #284]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d119      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e07f      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d003      	beq.n	8003f4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4e:	4b3f      	ldr	r3, [pc, #252]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d109      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e06f      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5e:	4b3b      	ldr	r3, [pc, #236]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e067      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f6e:	4b37      	ldr	r3, [pc, #220]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f023 0203 	bic.w	r2, r3, #3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4934      	ldr	r1, [pc, #208]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f80:	f7fd fbb2 	bl	80016e8 <HAL_GetTick>
 8003f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f86:	e00a      	b.n	8003f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f88:	f7fd fbae 	bl	80016e8 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e04f      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	4b2b      	ldr	r3, [pc, #172]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 020c 	and.w	r2, r3, #12
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d1eb      	bne.n	8003f88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb0:	4b25      	ldr	r3, [pc, #148]	; (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d20c      	bcs.n	8003fd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fbe:	4b22      	ldr	r3, [pc, #136]	; (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc6:	4b20      	ldr	r3, [pc, #128]	; (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d001      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e032      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe4:	4b19      	ldr	r3, [pc, #100]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4916      	ldr	r1, [pc, #88]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004002:	4b12      	ldr	r3, [pc, #72]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	490e      	ldr	r1, [pc, #56]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	4313      	orrs	r3, r2
 8004014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004016:	f000 f821 	bl	800405c <HAL_RCC_GetSysClockFreq>
 800401a:	4602      	mov	r2, r0
 800401c:	4b0b      	ldr	r3, [pc, #44]	; (800404c <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	490a      	ldr	r1, [pc, #40]	; (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8004028:	5ccb      	ldrb	r3, [r1, r3]
 800402a:	fa22 f303 	lsr.w	r3, r2, r3
 800402e:	4a09      	ldr	r2, [pc, #36]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8004030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <HAL_RCC_ClockConfig+0x1c8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f7fd fb12 	bl	8001660 <HAL_InitTick>

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40023c00 	.word	0x40023c00
 800404c:	40023800 	.word	0x40023800
 8004050:	08009258 	.word	0x08009258
 8004054:	20000000 	.word	0x20000000
 8004058:	20000004 	.word	0x20000004

0800405c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800405c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004060:	b094      	sub	sp, #80	; 0x50
 8004062:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	647b      	str	r3, [r7, #68]	; 0x44
 8004068:	2300      	movs	r3, #0
 800406a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800406c:	2300      	movs	r3, #0
 800406e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004074:	4b79      	ldr	r3, [pc, #484]	; (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 030c 	and.w	r3, r3, #12
 800407c:	2b08      	cmp	r3, #8
 800407e:	d00d      	beq.n	800409c <HAL_RCC_GetSysClockFreq+0x40>
 8004080:	2b08      	cmp	r3, #8
 8004082:	f200 80e1 	bhi.w	8004248 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0x34>
 800408a:	2b04      	cmp	r3, #4
 800408c:	d003      	beq.n	8004096 <HAL_RCC_GetSysClockFreq+0x3a>
 800408e:	e0db      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004090:	4b73      	ldr	r3, [pc, #460]	; (8004260 <HAL_RCC_GetSysClockFreq+0x204>)
 8004092:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004094:	e0db      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004096:	4b73      	ldr	r3, [pc, #460]	; (8004264 <HAL_RCC_GetSysClockFreq+0x208>)
 8004098:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800409a:	e0d8      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800409c:	4b6f      	ldr	r3, [pc, #444]	; (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040a6:	4b6d      	ldr	r3, [pc, #436]	; (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d063      	beq.n	800417a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040b2:	4b6a      	ldr	r3, [pc, #424]	; (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	099b      	lsrs	r3, r3, #6
 80040b8:	2200      	movs	r2, #0
 80040ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80040bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c4:	633b      	str	r3, [r7, #48]	; 0x30
 80040c6:	2300      	movs	r3, #0
 80040c8:	637b      	str	r3, [r7, #52]	; 0x34
 80040ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040ce:	4622      	mov	r2, r4
 80040d0:	462b      	mov	r3, r5
 80040d2:	f04f 0000 	mov.w	r0, #0
 80040d6:	f04f 0100 	mov.w	r1, #0
 80040da:	0159      	lsls	r1, r3, #5
 80040dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040e0:	0150      	lsls	r0, r2, #5
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4621      	mov	r1, r4
 80040e8:	1a51      	subs	r1, r2, r1
 80040ea:	6139      	str	r1, [r7, #16]
 80040ec:	4629      	mov	r1, r5
 80040ee:	eb63 0301 	sbc.w	r3, r3, r1
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004100:	4659      	mov	r1, fp
 8004102:	018b      	lsls	r3, r1, #6
 8004104:	4651      	mov	r1, sl
 8004106:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800410a:	4651      	mov	r1, sl
 800410c:	018a      	lsls	r2, r1, #6
 800410e:	4651      	mov	r1, sl
 8004110:	ebb2 0801 	subs.w	r8, r2, r1
 8004114:	4659      	mov	r1, fp
 8004116:	eb63 0901 	sbc.w	r9, r3, r1
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004126:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800412a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800412e:	4690      	mov	r8, r2
 8004130:	4699      	mov	r9, r3
 8004132:	4623      	mov	r3, r4
 8004134:	eb18 0303 	adds.w	r3, r8, r3
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	462b      	mov	r3, r5
 800413c:	eb49 0303 	adc.w	r3, r9, r3
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800414e:	4629      	mov	r1, r5
 8004150:	024b      	lsls	r3, r1, #9
 8004152:	4621      	mov	r1, r4
 8004154:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004158:	4621      	mov	r1, r4
 800415a:	024a      	lsls	r2, r1, #9
 800415c:	4610      	mov	r0, r2
 800415e:	4619      	mov	r1, r3
 8004160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004162:	2200      	movs	r2, #0
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
 8004166:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004168:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800416c:	f7fc fb9a 	bl	80008a4 <__aeabi_uldivmod>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4613      	mov	r3, r2
 8004176:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004178:	e058      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800417a:	4b38      	ldr	r3, [pc, #224]	; (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	099b      	lsrs	r3, r3, #6
 8004180:	2200      	movs	r2, #0
 8004182:	4618      	mov	r0, r3
 8004184:	4611      	mov	r1, r2
 8004186:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800418a:	623b      	str	r3, [r7, #32]
 800418c:	2300      	movs	r3, #0
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
 8004190:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004194:	4642      	mov	r2, r8
 8004196:	464b      	mov	r3, r9
 8004198:	f04f 0000 	mov.w	r0, #0
 800419c:	f04f 0100 	mov.w	r1, #0
 80041a0:	0159      	lsls	r1, r3, #5
 80041a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041a6:	0150      	lsls	r0, r2, #5
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4641      	mov	r1, r8
 80041ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80041b2:	4649      	mov	r1, r9
 80041b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041cc:	ebb2 040a 	subs.w	r4, r2, sl
 80041d0:	eb63 050b 	sbc.w	r5, r3, fp
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	00eb      	lsls	r3, r5, #3
 80041de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041e2:	00e2      	lsls	r2, r4, #3
 80041e4:	4614      	mov	r4, r2
 80041e6:	461d      	mov	r5, r3
 80041e8:	4643      	mov	r3, r8
 80041ea:	18e3      	adds	r3, r4, r3
 80041ec:	603b      	str	r3, [r7, #0]
 80041ee:	464b      	mov	r3, r9
 80041f0:	eb45 0303 	adc.w	r3, r5, r3
 80041f4:	607b      	str	r3, [r7, #4]
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	f04f 0300 	mov.w	r3, #0
 80041fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004202:	4629      	mov	r1, r5
 8004204:	028b      	lsls	r3, r1, #10
 8004206:	4621      	mov	r1, r4
 8004208:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800420c:	4621      	mov	r1, r4
 800420e:	028a      	lsls	r2, r1, #10
 8004210:	4610      	mov	r0, r2
 8004212:	4619      	mov	r1, r3
 8004214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004216:	2200      	movs	r2, #0
 8004218:	61bb      	str	r3, [r7, #24]
 800421a:	61fa      	str	r2, [r7, #28]
 800421c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004220:	f7fc fb40 	bl	80008a4 <__aeabi_uldivmod>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4613      	mov	r3, r2
 800422a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800422c:	4b0b      	ldr	r3, [pc, #44]	; (800425c <HAL_RCC_GetSysClockFreq+0x200>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	0c1b      	lsrs	r3, r3, #16
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	3301      	adds	r3, #1
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800423c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800423e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004246:	e002      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004248:	4b05      	ldr	r3, [pc, #20]	; (8004260 <HAL_RCC_GetSysClockFreq+0x204>)
 800424a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800424c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800424e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004250:	4618      	mov	r0, r3
 8004252:	3750      	adds	r7, #80	; 0x50
 8004254:	46bd      	mov	sp, r7
 8004256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800425a:	bf00      	nop
 800425c:	40023800 	.word	0x40023800
 8004260:	00f42400 	.word	0x00f42400
 8004264:	007a1200 	.word	0x007a1200

08004268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800426c:	4b03      	ldr	r3, [pc, #12]	; (800427c <HAL_RCC_GetHCLKFreq+0x14>)
 800426e:	681b      	ldr	r3, [r3, #0]
}
 8004270:	4618      	mov	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	20000000 	.word	0x20000000

08004280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e041      	b.n	8004316 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7fd f8d8 	bl	800145c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3304      	adds	r3, #4
 80042bc:	4619      	mov	r1, r3
 80042be:	4610      	mov	r0, r2
 80042c0:	f000 fad8 	bl	8004874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e041      	b.n	80043b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d106      	bne.n	800434a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f839 	bl	80043bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2202      	movs	r2, #2
 800434e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3304      	adds	r3, #4
 800435a:	4619      	mov	r1, r3
 800435c:	4610      	mov	r0, r2
 800435e:	f000 fa89 	bl	8004874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d109      	bne.n	80043f4 <HAL_TIM_PWM_Start+0x24>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	bf14      	ite	ne
 80043ec:	2301      	movne	r3, #1
 80043ee:	2300      	moveq	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	e022      	b.n	800443a <HAL_TIM_PWM_Start+0x6a>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d109      	bne.n	800440e <HAL_TIM_PWM_Start+0x3e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b01      	cmp	r3, #1
 8004404:	bf14      	ite	ne
 8004406:	2301      	movne	r3, #1
 8004408:	2300      	moveq	r3, #0
 800440a:	b2db      	uxtb	r3, r3
 800440c:	e015      	b.n	800443a <HAL_TIM_PWM_Start+0x6a>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b08      	cmp	r3, #8
 8004412:	d109      	bne.n	8004428 <HAL_TIM_PWM_Start+0x58>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b01      	cmp	r3, #1
 800441e:	bf14      	ite	ne
 8004420:	2301      	movne	r3, #1
 8004422:	2300      	moveq	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	e008      	b.n	800443a <HAL_TIM_PWM_Start+0x6a>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b01      	cmp	r3, #1
 8004432:	bf14      	ite	ne
 8004434:	2301      	movne	r3, #1
 8004436:	2300      	moveq	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e07c      	b.n	800453c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d104      	bne.n	8004452 <HAL_TIM_PWM_Start+0x82>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004450:	e013      	b.n	800447a <HAL_TIM_PWM_Start+0xaa>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b04      	cmp	r3, #4
 8004456:	d104      	bne.n	8004462 <HAL_TIM_PWM_Start+0x92>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004460:	e00b      	b.n	800447a <HAL_TIM_PWM_Start+0xaa>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b08      	cmp	r3, #8
 8004466:	d104      	bne.n	8004472 <HAL_TIM_PWM_Start+0xa2>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004470:	e003      	b.n	800447a <HAL_TIM_PWM_Start+0xaa>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2202      	movs	r2, #2
 8004476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2201      	movs	r2, #1
 8004480:	6839      	ldr	r1, [r7, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fce0 	bl	8004e48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a2d      	ldr	r2, [pc, #180]	; (8004544 <HAL_TIM_PWM_Start+0x174>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d004      	beq.n	800449c <HAL_TIM_PWM_Start+0xcc>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a2c      	ldr	r2, [pc, #176]	; (8004548 <HAL_TIM_PWM_Start+0x178>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d101      	bne.n	80044a0 <HAL_TIM_PWM_Start+0xd0>
 800449c:	2301      	movs	r3, #1
 800449e:	e000      	b.n	80044a2 <HAL_TIM_PWM_Start+0xd2>
 80044a0:	2300      	movs	r3, #0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d007      	beq.n	80044b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a22      	ldr	r2, [pc, #136]	; (8004544 <HAL_TIM_PWM_Start+0x174>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d022      	beq.n	8004506 <HAL_TIM_PWM_Start+0x136>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c8:	d01d      	beq.n	8004506 <HAL_TIM_PWM_Start+0x136>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a1f      	ldr	r2, [pc, #124]	; (800454c <HAL_TIM_PWM_Start+0x17c>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d018      	beq.n	8004506 <HAL_TIM_PWM_Start+0x136>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a1d      	ldr	r2, [pc, #116]	; (8004550 <HAL_TIM_PWM_Start+0x180>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d013      	beq.n	8004506 <HAL_TIM_PWM_Start+0x136>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1c      	ldr	r2, [pc, #112]	; (8004554 <HAL_TIM_PWM_Start+0x184>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d00e      	beq.n	8004506 <HAL_TIM_PWM_Start+0x136>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a16      	ldr	r2, [pc, #88]	; (8004548 <HAL_TIM_PWM_Start+0x178>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d009      	beq.n	8004506 <HAL_TIM_PWM_Start+0x136>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a18      	ldr	r2, [pc, #96]	; (8004558 <HAL_TIM_PWM_Start+0x188>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d004      	beq.n	8004506 <HAL_TIM_PWM_Start+0x136>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a16      	ldr	r2, [pc, #88]	; (800455c <HAL_TIM_PWM_Start+0x18c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d111      	bne.n	800452a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2b06      	cmp	r3, #6
 8004516:	d010      	beq.n	800453a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004528:	e007      	b.n	800453a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 0201 	orr.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40010000 	.word	0x40010000
 8004548:	40010400 	.word	0x40010400
 800454c:	40000400 	.word	0x40000400
 8004550:	40000800 	.word	0x40000800
 8004554:	40000c00 	.word	0x40000c00
 8004558:	40014000 	.word	0x40014000
 800455c:	40001800 	.word	0x40001800

08004560 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800456c:	2300      	movs	r3, #0
 800456e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004576:	2b01      	cmp	r3, #1
 8004578:	d101      	bne.n	800457e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800457a:	2302      	movs	r3, #2
 800457c:	e0ae      	b.n	80046dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b0c      	cmp	r3, #12
 800458a:	f200 809f 	bhi.w	80046cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800458e:	a201      	add	r2, pc, #4	; (adr r2, 8004594 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004594:	080045c9 	.word	0x080045c9
 8004598:	080046cd 	.word	0x080046cd
 800459c:	080046cd 	.word	0x080046cd
 80045a0:	080046cd 	.word	0x080046cd
 80045a4:	08004609 	.word	0x08004609
 80045a8:	080046cd 	.word	0x080046cd
 80045ac:	080046cd 	.word	0x080046cd
 80045b0:	080046cd 	.word	0x080046cd
 80045b4:	0800464b 	.word	0x0800464b
 80045b8:	080046cd 	.word	0x080046cd
 80045bc:	080046cd 	.word	0x080046cd
 80045c0:	080046cd 	.word	0x080046cd
 80045c4:	0800468b 	.word	0x0800468b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 f9f0 	bl	80049b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0208 	orr.w	r2, r2, #8
 80045e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699a      	ldr	r2, [r3, #24]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0204 	bic.w	r2, r2, #4
 80045f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6999      	ldr	r1, [r3, #24]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	619a      	str	r2, [r3, #24]
      break;
 8004606:	e064      	b.n	80046d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fa40 	bl	8004a94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699a      	ldr	r2, [r3, #24]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699a      	ldr	r2, [r3, #24]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6999      	ldr	r1, [r3, #24]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	021a      	lsls	r2, r3, #8
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	619a      	str	r2, [r3, #24]
      break;
 8004648:	e043      	b.n	80046d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68b9      	ldr	r1, [r7, #8]
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fa95 	bl	8004b80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	69da      	ldr	r2, [r3, #28]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f042 0208 	orr.w	r2, r2, #8
 8004664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0204 	bic.w	r2, r2, #4
 8004674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69d9      	ldr	r1, [r3, #28]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	61da      	str	r2, [r3, #28]
      break;
 8004688:	e023      	b.n	80046d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68b9      	ldr	r1, [r7, #8]
 8004690:	4618      	mov	r0, r3
 8004692:	f000 fae9 	bl	8004c68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	69da      	ldr	r2, [r3, #28]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69da      	ldr	r2, [r3, #28]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69d9      	ldr	r1, [r3, #28]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	021a      	lsls	r2, r3, #8
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	61da      	str	r2, [r3, #28]
      break;
 80046ca:	e002      	b.n	80046d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	75fb      	strb	r3, [r7, #23]
      break;
 80046d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046da:	7dfb      	ldrb	r3, [r7, #23]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_TIM_ConfigClockSource+0x1c>
 80046fc:	2302      	movs	r3, #2
 80046fe:	e0b4      	b.n	800486a <HAL_TIM_ConfigClockSource+0x186>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800471e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004726:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004738:	d03e      	beq.n	80047b8 <HAL_TIM_ConfigClockSource+0xd4>
 800473a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800473e:	f200 8087 	bhi.w	8004850 <HAL_TIM_ConfigClockSource+0x16c>
 8004742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004746:	f000 8086 	beq.w	8004856 <HAL_TIM_ConfigClockSource+0x172>
 800474a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800474e:	d87f      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x16c>
 8004750:	2b70      	cmp	r3, #112	; 0x70
 8004752:	d01a      	beq.n	800478a <HAL_TIM_ConfigClockSource+0xa6>
 8004754:	2b70      	cmp	r3, #112	; 0x70
 8004756:	d87b      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x16c>
 8004758:	2b60      	cmp	r3, #96	; 0x60
 800475a:	d050      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x11a>
 800475c:	2b60      	cmp	r3, #96	; 0x60
 800475e:	d877      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x16c>
 8004760:	2b50      	cmp	r3, #80	; 0x50
 8004762:	d03c      	beq.n	80047de <HAL_TIM_ConfigClockSource+0xfa>
 8004764:	2b50      	cmp	r3, #80	; 0x50
 8004766:	d873      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x16c>
 8004768:	2b40      	cmp	r3, #64	; 0x40
 800476a:	d058      	beq.n	800481e <HAL_TIM_ConfigClockSource+0x13a>
 800476c:	2b40      	cmp	r3, #64	; 0x40
 800476e:	d86f      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x16c>
 8004770:	2b30      	cmp	r3, #48	; 0x30
 8004772:	d064      	beq.n	800483e <HAL_TIM_ConfigClockSource+0x15a>
 8004774:	2b30      	cmp	r3, #48	; 0x30
 8004776:	d86b      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x16c>
 8004778:	2b20      	cmp	r3, #32
 800477a:	d060      	beq.n	800483e <HAL_TIM_ConfigClockSource+0x15a>
 800477c:	2b20      	cmp	r3, #32
 800477e:	d867      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x16c>
 8004780:	2b00      	cmp	r3, #0
 8004782:	d05c      	beq.n	800483e <HAL_TIM_ConfigClockSource+0x15a>
 8004784:	2b10      	cmp	r3, #16
 8004786:	d05a      	beq.n	800483e <HAL_TIM_ConfigClockSource+0x15a>
 8004788:	e062      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6818      	ldr	r0, [r3, #0]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	6899      	ldr	r1, [r3, #8]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f000 fb35 	bl	8004e08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	609a      	str	r2, [r3, #8]
      break;
 80047b6:	e04f      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6818      	ldr	r0, [r3, #0]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	6899      	ldr	r1, [r3, #8]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f000 fb1e 	bl	8004e08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047da:	609a      	str	r2, [r3, #8]
      break;
 80047dc:	e03c      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6859      	ldr	r1, [r3, #4]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	461a      	mov	r2, r3
 80047ec:	f000 fa92 	bl	8004d14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2150      	movs	r1, #80	; 0x50
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 faeb 	bl	8004dd2 <TIM_ITRx_SetConfig>
      break;
 80047fc:	e02c      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6818      	ldr	r0, [r3, #0]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	6859      	ldr	r1, [r3, #4]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	461a      	mov	r2, r3
 800480c:	f000 fab1 	bl	8004d72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2160      	movs	r1, #96	; 0x60
 8004816:	4618      	mov	r0, r3
 8004818:	f000 fadb 	bl	8004dd2 <TIM_ITRx_SetConfig>
      break;
 800481c:	e01c      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6818      	ldr	r0, [r3, #0]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	6859      	ldr	r1, [r3, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	461a      	mov	r2, r3
 800482c:	f000 fa72 	bl	8004d14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2140      	movs	r1, #64	; 0x40
 8004836:	4618      	mov	r0, r3
 8004838:	f000 facb 	bl	8004dd2 <TIM_ITRx_SetConfig>
      break;
 800483c:	e00c      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4619      	mov	r1, r3
 8004848:	4610      	mov	r0, r2
 800484a:	f000 fac2 	bl	8004dd2 <TIM_ITRx_SetConfig>
      break;
 800484e:	e003      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]
      break;
 8004854:	e000      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004856:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004868:	7bfb      	ldrb	r3, [r7, #15]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
	...

08004874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a40      	ldr	r2, [pc, #256]	; (8004988 <TIM_Base_SetConfig+0x114>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d013      	beq.n	80048b4 <TIM_Base_SetConfig+0x40>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004892:	d00f      	beq.n	80048b4 <TIM_Base_SetConfig+0x40>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a3d      	ldr	r2, [pc, #244]	; (800498c <TIM_Base_SetConfig+0x118>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d00b      	beq.n	80048b4 <TIM_Base_SetConfig+0x40>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a3c      	ldr	r2, [pc, #240]	; (8004990 <TIM_Base_SetConfig+0x11c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d007      	beq.n	80048b4 <TIM_Base_SetConfig+0x40>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a3b      	ldr	r2, [pc, #236]	; (8004994 <TIM_Base_SetConfig+0x120>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d003      	beq.n	80048b4 <TIM_Base_SetConfig+0x40>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a3a      	ldr	r2, [pc, #232]	; (8004998 <TIM_Base_SetConfig+0x124>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d108      	bne.n	80048c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a2f      	ldr	r2, [pc, #188]	; (8004988 <TIM_Base_SetConfig+0x114>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d02b      	beq.n	8004926 <TIM_Base_SetConfig+0xb2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d4:	d027      	beq.n	8004926 <TIM_Base_SetConfig+0xb2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a2c      	ldr	r2, [pc, #176]	; (800498c <TIM_Base_SetConfig+0x118>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d023      	beq.n	8004926 <TIM_Base_SetConfig+0xb2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a2b      	ldr	r2, [pc, #172]	; (8004990 <TIM_Base_SetConfig+0x11c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d01f      	beq.n	8004926 <TIM_Base_SetConfig+0xb2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a2a      	ldr	r2, [pc, #168]	; (8004994 <TIM_Base_SetConfig+0x120>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d01b      	beq.n	8004926 <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a29      	ldr	r2, [pc, #164]	; (8004998 <TIM_Base_SetConfig+0x124>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d017      	beq.n	8004926 <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a28      	ldr	r2, [pc, #160]	; (800499c <TIM_Base_SetConfig+0x128>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d013      	beq.n	8004926 <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a27      	ldr	r2, [pc, #156]	; (80049a0 <TIM_Base_SetConfig+0x12c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d00f      	beq.n	8004926 <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a26      	ldr	r2, [pc, #152]	; (80049a4 <TIM_Base_SetConfig+0x130>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00b      	beq.n	8004926 <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a25      	ldr	r2, [pc, #148]	; (80049a8 <TIM_Base_SetConfig+0x134>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d007      	beq.n	8004926 <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a24      	ldr	r2, [pc, #144]	; (80049ac <TIM_Base_SetConfig+0x138>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d003      	beq.n	8004926 <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a23      	ldr	r2, [pc, #140]	; (80049b0 <TIM_Base_SetConfig+0x13c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d108      	bne.n	8004938 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800492c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	4313      	orrs	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a0a      	ldr	r2, [pc, #40]	; (8004988 <TIM_Base_SetConfig+0x114>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d003      	beq.n	800496c <TIM_Base_SetConfig+0xf8>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a0c      	ldr	r2, [pc, #48]	; (8004998 <TIM_Base_SetConfig+0x124>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d103      	bne.n	8004974 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	691a      	ldr	r2, [r3, #16]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	615a      	str	r2, [r3, #20]
}
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40010000 	.word	0x40010000
 800498c:	40000400 	.word	0x40000400
 8004990:	40000800 	.word	0x40000800
 8004994:	40000c00 	.word	0x40000c00
 8004998:	40010400 	.word	0x40010400
 800499c:	40014000 	.word	0x40014000
 80049a0:	40014400 	.word	0x40014400
 80049a4:	40014800 	.word	0x40014800
 80049a8:	40001800 	.word	0x40001800
 80049ac:	40001c00 	.word	0x40001c00
 80049b0:	40002000 	.word	0x40002000

080049b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	f023 0201 	bic.w	r2, r3, #1
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0303 	bic.w	r3, r3, #3
 80049ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f023 0302 	bic.w	r3, r3, #2
 80049fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a20      	ldr	r2, [pc, #128]	; (8004a8c <TIM_OC1_SetConfig+0xd8>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d003      	beq.n	8004a18 <TIM_OC1_SetConfig+0x64>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a1f      	ldr	r2, [pc, #124]	; (8004a90 <TIM_OC1_SetConfig+0xdc>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d10c      	bne.n	8004a32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f023 0308 	bic.w	r3, r3, #8
 8004a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f023 0304 	bic.w	r3, r3, #4
 8004a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a15      	ldr	r2, [pc, #84]	; (8004a8c <TIM_OC1_SetConfig+0xd8>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d003      	beq.n	8004a42 <TIM_OC1_SetConfig+0x8e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a14      	ldr	r2, [pc, #80]	; (8004a90 <TIM_OC1_SetConfig+0xdc>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d111      	bne.n	8004a66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	621a      	str	r2, [r3, #32]
}
 8004a80:	bf00      	nop
 8004a82:	371c      	adds	r7, #28
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	40010000 	.word	0x40010000
 8004a90:	40010400 	.word	0x40010400

08004a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	f023 0210 	bic.w	r2, r3, #16
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f023 0320 	bic.w	r3, r3, #32
 8004ade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a22      	ldr	r2, [pc, #136]	; (8004b78 <TIM_OC2_SetConfig+0xe4>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d003      	beq.n	8004afc <TIM_OC2_SetConfig+0x68>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a21      	ldr	r2, [pc, #132]	; (8004b7c <TIM_OC2_SetConfig+0xe8>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d10d      	bne.n	8004b18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a17      	ldr	r2, [pc, #92]	; (8004b78 <TIM_OC2_SetConfig+0xe4>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d003      	beq.n	8004b28 <TIM_OC2_SetConfig+0x94>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a16      	ldr	r2, [pc, #88]	; (8004b7c <TIM_OC2_SetConfig+0xe8>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d113      	bne.n	8004b50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	621a      	str	r2, [r3, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40010000 	.word	0x40010000
 8004b7c:	40010400 	.word	0x40010400

08004b80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0303 	bic.w	r3, r3, #3
 8004bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a21      	ldr	r2, [pc, #132]	; (8004c60 <TIM_OC3_SetConfig+0xe0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d003      	beq.n	8004be6 <TIM_OC3_SetConfig+0x66>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a20      	ldr	r2, [pc, #128]	; (8004c64 <TIM_OC3_SetConfig+0xe4>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d10d      	bne.n	8004c02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	021b      	lsls	r3, r3, #8
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a16      	ldr	r2, [pc, #88]	; (8004c60 <TIM_OC3_SetConfig+0xe0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d003      	beq.n	8004c12 <TIM_OC3_SetConfig+0x92>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a15      	ldr	r2, [pc, #84]	; (8004c64 <TIM_OC3_SetConfig+0xe4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d113      	bne.n	8004c3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	621a      	str	r2, [r3, #32]
}
 8004c54:	bf00      	nop
 8004c56:	371c      	adds	r7, #28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	40010000 	.word	0x40010000
 8004c64:	40010400 	.word	0x40010400

08004c68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	021b      	lsls	r3, r3, #8
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	031b      	lsls	r3, r3, #12
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a12      	ldr	r2, [pc, #72]	; (8004d0c <TIM_OC4_SetConfig+0xa4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d003      	beq.n	8004cd0 <TIM_OC4_SetConfig+0x68>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a11      	ldr	r2, [pc, #68]	; (8004d10 <TIM_OC4_SetConfig+0xa8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d109      	bne.n	8004ce4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	019b      	lsls	r3, r3, #6
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	621a      	str	r2, [r3, #32]
}
 8004cfe:	bf00      	nop
 8004d00:	371c      	adds	r7, #28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40010000 	.word	0x40010000
 8004d10:	40010400 	.word	0x40010400

08004d14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	f023 0201 	bic.w	r2, r3, #1
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	011b      	lsls	r3, r3, #4
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f023 030a 	bic.w	r3, r3, #10
 8004d50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	621a      	str	r2, [r3, #32]
}
 8004d66:	bf00      	nop
 8004d68:	371c      	adds	r7, #28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b087      	sub	sp, #28
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	60f8      	str	r0, [r7, #12]
 8004d7a:	60b9      	str	r1, [r7, #8]
 8004d7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	f023 0210 	bic.w	r2, r3, #16
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	031b      	lsls	r3, r3, #12
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	011b      	lsls	r3, r3, #4
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	621a      	str	r2, [r3, #32]
}
 8004dc6:	bf00      	nop
 8004dc8:	371c      	adds	r7, #28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b085      	sub	sp, #20
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f043 0307 	orr.w	r3, r3, #7
 8004df4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	609a      	str	r2, [r3, #8]
}
 8004dfc:	bf00      	nop
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	021a      	lsls	r2, r3, #8
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	609a      	str	r2, [r3, #8]
}
 8004e3c:	bf00      	nop
 8004e3e:	371c      	adds	r7, #28
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f003 031f 	and.w	r3, r3, #31
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6a1a      	ldr	r2, [r3, #32]
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	43db      	mvns	r3, r3
 8004e6a:	401a      	ands	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6a1a      	ldr	r2, [r3, #32]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f003 031f 	and.w	r3, r3, #31
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e80:	431a      	orrs	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	621a      	str	r2, [r3, #32]
}
 8004e86:	bf00      	nop
 8004e88:	371c      	adds	r7, #28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
	...

08004e94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e05a      	b.n	8004f62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a21      	ldr	r2, [pc, #132]	; (8004f70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d022      	beq.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef8:	d01d      	beq.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a1d      	ldr	r2, [pc, #116]	; (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d018      	beq.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a1b      	ldr	r2, [pc, #108]	; (8004f78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d013      	beq.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a1a      	ldr	r2, [pc, #104]	; (8004f7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00e      	beq.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a18      	ldr	r2, [pc, #96]	; (8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d009      	beq.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a17      	ldr	r2, [pc, #92]	; (8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d004      	beq.n	8004f36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a15      	ldr	r2, [pc, #84]	; (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d10c      	bne.n	8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40010000 	.word	0x40010000
 8004f74:	40000400 	.word	0x40000400
 8004f78:	40000800 	.word	0x40000800
 8004f7c:	40000c00 	.word	0x40000c00
 8004f80:	40010400 	.word	0x40010400
 8004f84:	40014000 	.word	0x40014000
 8004f88:	40001800 	.word	0x40001800

08004f8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f8c:	b084      	sub	sp, #16
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	f107 001c 	add.w	r0, r7, #28
 8004f9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d122      	bne.n	8004fea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d105      	bne.n	8004fde <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f001 fbee 	bl	80067c0 <USB_CoreReset>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	73fb      	strb	r3, [r7, #15]
 8004fe8:	e01a      	b.n	8005020 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f001 fbe2 	bl	80067c0 <USB_CoreReset>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	639a      	str	r2, [r3, #56]	; 0x38
 8005012:	e005      	b.n	8005020 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005022:	2b01      	cmp	r3, #1
 8005024:	d10b      	bne.n	800503e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f043 0206 	orr.w	r2, r3, #6
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f043 0220 	orr.w	r2, r3, #32
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800503e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800504a:	b004      	add	sp, #16
 800504c:	4770      	bx	lr
	...

08005050 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	4613      	mov	r3, r2
 800505c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800505e:	79fb      	ldrb	r3, [r7, #7]
 8005060:	2b02      	cmp	r3, #2
 8005062:	d165      	bne.n	8005130 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4a41      	ldr	r2, [pc, #260]	; (800516c <USB_SetTurnaroundTime+0x11c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d906      	bls.n	800507a <USB_SetTurnaroundTime+0x2a>
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4a40      	ldr	r2, [pc, #256]	; (8005170 <USB_SetTurnaroundTime+0x120>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d202      	bcs.n	800507a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005074:	230f      	movs	r3, #15
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	e062      	b.n	8005140 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	4a3c      	ldr	r2, [pc, #240]	; (8005170 <USB_SetTurnaroundTime+0x120>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d306      	bcc.n	8005090 <USB_SetTurnaroundTime+0x40>
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	4a3b      	ldr	r2, [pc, #236]	; (8005174 <USB_SetTurnaroundTime+0x124>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d202      	bcs.n	8005090 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800508a:	230e      	movs	r3, #14
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	e057      	b.n	8005140 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	4a38      	ldr	r2, [pc, #224]	; (8005174 <USB_SetTurnaroundTime+0x124>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d306      	bcc.n	80050a6 <USB_SetTurnaroundTime+0x56>
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4a37      	ldr	r2, [pc, #220]	; (8005178 <USB_SetTurnaroundTime+0x128>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d202      	bcs.n	80050a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80050a0:	230d      	movs	r3, #13
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	e04c      	b.n	8005140 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	4a33      	ldr	r2, [pc, #204]	; (8005178 <USB_SetTurnaroundTime+0x128>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d306      	bcc.n	80050bc <USB_SetTurnaroundTime+0x6c>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	4a32      	ldr	r2, [pc, #200]	; (800517c <USB_SetTurnaroundTime+0x12c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d802      	bhi.n	80050bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80050b6:	230c      	movs	r3, #12
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	e041      	b.n	8005140 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4a2f      	ldr	r2, [pc, #188]	; (800517c <USB_SetTurnaroundTime+0x12c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d906      	bls.n	80050d2 <USB_SetTurnaroundTime+0x82>
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	4a2e      	ldr	r2, [pc, #184]	; (8005180 <USB_SetTurnaroundTime+0x130>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d802      	bhi.n	80050d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80050cc:	230b      	movs	r3, #11
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	e036      	b.n	8005140 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	4a2a      	ldr	r2, [pc, #168]	; (8005180 <USB_SetTurnaroundTime+0x130>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d906      	bls.n	80050e8 <USB_SetTurnaroundTime+0x98>
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	4a29      	ldr	r2, [pc, #164]	; (8005184 <USB_SetTurnaroundTime+0x134>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d802      	bhi.n	80050e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80050e2:	230a      	movs	r3, #10
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	e02b      	b.n	8005140 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	4a26      	ldr	r2, [pc, #152]	; (8005184 <USB_SetTurnaroundTime+0x134>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d906      	bls.n	80050fe <USB_SetTurnaroundTime+0xae>
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4a25      	ldr	r2, [pc, #148]	; (8005188 <USB_SetTurnaroundTime+0x138>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d202      	bcs.n	80050fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80050f8:	2309      	movs	r3, #9
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	e020      	b.n	8005140 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	4a21      	ldr	r2, [pc, #132]	; (8005188 <USB_SetTurnaroundTime+0x138>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d306      	bcc.n	8005114 <USB_SetTurnaroundTime+0xc4>
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	4a20      	ldr	r2, [pc, #128]	; (800518c <USB_SetTurnaroundTime+0x13c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d802      	bhi.n	8005114 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800510e:	2308      	movs	r3, #8
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	e015      	b.n	8005140 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4a1d      	ldr	r2, [pc, #116]	; (800518c <USB_SetTurnaroundTime+0x13c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d906      	bls.n	800512a <USB_SetTurnaroundTime+0xda>
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	4a1c      	ldr	r2, [pc, #112]	; (8005190 <USB_SetTurnaroundTime+0x140>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d202      	bcs.n	800512a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005124:	2307      	movs	r3, #7
 8005126:	617b      	str	r3, [r7, #20]
 8005128:	e00a      	b.n	8005140 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800512a:	2306      	movs	r3, #6
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	e007      	b.n	8005140 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005130:	79fb      	ldrb	r3, [r7, #7]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d102      	bne.n	800513c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005136:	2309      	movs	r3, #9
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	e001      	b.n	8005140 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800513c:	2309      	movs	r3, #9
 800513e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	029b      	lsls	r3, r3, #10
 8005154:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005158:	431a      	orrs	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	371c      	adds	r7, #28
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	00d8acbf 	.word	0x00d8acbf
 8005170:	00e4e1c0 	.word	0x00e4e1c0
 8005174:	00f42400 	.word	0x00f42400
 8005178:	01067380 	.word	0x01067380
 800517c:	011a499f 	.word	0x011a499f
 8005180:	01312cff 	.word	0x01312cff
 8005184:	014ca43f 	.word	0x014ca43f
 8005188:	016e3600 	.word	0x016e3600
 800518c:	01a6ab1f 	.word	0x01a6ab1f
 8005190:	01e84800 	.word	0x01e84800

08005194 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f043 0201 	orr.w	r2, r3, #1
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f023 0201 	bic.w	r2, r3, #1
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	460b      	mov	r3, r1
 80051e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051f4:	78fb      	ldrb	r3, [r7, #3]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d115      	bne.n	8005226 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005206:	2001      	movs	r0, #1
 8005208:	f7fc fa7a 	bl	8001700 <HAL_Delay>
      ms++;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	3301      	adds	r3, #1
 8005210:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f001 fa45 	bl	80066a2 <USB_GetMode>
 8005218:	4603      	mov	r3, r0
 800521a:	2b01      	cmp	r3, #1
 800521c:	d01e      	beq.n	800525c <USB_SetCurrentMode+0x84>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b31      	cmp	r3, #49	; 0x31
 8005222:	d9f0      	bls.n	8005206 <USB_SetCurrentMode+0x2e>
 8005224:	e01a      	b.n	800525c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005226:	78fb      	ldrb	r3, [r7, #3]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d115      	bne.n	8005258 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005238:	2001      	movs	r0, #1
 800523a:	f7fc fa61 	bl	8001700 <HAL_Delay>
      ms++;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3301      	adds	r3, #1
 8005242:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f001 fa2c 	bl	80066a2 <USB_GetMode>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d005      	beq.n	800525c <USB_SetCurrentMode+0x84>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b31      	cmp	r3, #49	; 0x31
 8005254:	d9f0      	bls.n	8005238 <USB_SetCurrentMode+0x60>
 8005256:	e001      	b.n	800525c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e005      	b.n	8005268 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2b32      	cmp	r3, #50	; 0x32
 8005260:	d101      	bne.n	8005266 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e000      	b.n	8005268 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005270:	b084      	sub	sp, #16
 8005272:	b580      	push	{r7, lr}
 8005274:	b086      	sub	sp, #24
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800527e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800528a:	2300      	movs	r3, #0
 800528c:	613b      	str	r3, [r7, #16]
 800528e:	e009      	b.n	80052a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	3340      	adds	r3, #64	; 0x40
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	2200      	movs	r2, #0
 800529c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	3301      	adds	r3, #1
 80052a2:	613b      	str	r3, [r7, #16]
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	2b0e      	cmp	r3, #14
 80052a8:	d9f2      	bls.n	8005290 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80052aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d11c      	bne.n	80052ea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052be:	f043 0302 	orr.w	r3, r3, #2
 80052c2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	639a      	str	r2, [r3, #56]	; 0x38
 80052e8:	e00b      	b.n	8005302 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005308:	461a      	mov	r2, r3
 800530a:	2300      	movs	r3, #0
 800530c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005314:	4619      	mov	r1, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531c:	461a      	mov	r2, r3
 800531e:	680b      	ldr	r3, [r1, #0]
 8005320:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005324:	2b01      	cmp	r3, #1
 8005326:	d10c      	bne.n	8005342 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d104      	bne.n	8005338 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800532e:	2100      	movs	r1, #0
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f965 	bl	8005600 <USB_SetDevSpeed>
 8005336:	e008      	b.n	800534a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005338:	2101      	movs	r1, #1
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f960 	bl	8005600 <USB_SetDevSpeed>
 8005340:	e003      	b.n	800534a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005342:	2103      	movs	r1, #3
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f95b 	bl	8005600 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800534a:	2110      	movs	r1, #16
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f8f3 	bl	8005538 <USB_FlushTxFifo>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f91f 	bl	80055a0 <USB_FlushRxFifo>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005372:	461a      	mov	r2, r3
 8005374:	2300      	movs	r3, #0
 8005376:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537e:	461a      	mov	r2, r3
 8005380:	2300      	movs	r3, #0
 8005382:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538a:	461a      	mov	r2, r3
 800538c:	2300      	movs	r3, #0
 800538e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005390:	2300      	movs	r3, #0
 8005392:	613b      	str	r3, [r7, #16]
 8005394:	e043      	b.n	800541e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053ac:	d118      	bne.n	80053e0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10a      	bne.n	80053ca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c0:	461a      	mov	r2, r3
 80053c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	e013      	b.n	80053f2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d6:	461a      	mov	r2, r3
 80053d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	e008      	b.n	80053f2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ec:	461a      	mov	r2, r3
 80053ee:	2300      	movs	r3, #0
 80053f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fe:	461a      	mov	r2, r3
 8005400:	2300      	movs	r3, #0
 8005402:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4413      	add	r3, r2
 800540c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005410:	461a      	mov	r2, r3
 8005412:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005416:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	3301      	adds	r3, #1
 800541c:	613b      	str	r3, [r7, #16]
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	429a      	cmp	r2, r3
 8005424:	d3b7      	bcc.n	8005396 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005426:	2300      	movs	r3, #0
 8005428:	613b      	str	r3, [r7, #16]
 800542a:	e043      	b.n	80054b4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800543e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005442:	d118      	bne.n	8005476 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10a      	bne.n	8005460 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005456:	461a      	mov	r2, r3
 8005458:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	e013      	b.n	8005488 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546c:	461a      	mov	r2, r3
 800546e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005472:	6013      	str	r3, [r2, #0]
 8005474:	e008      	b.n	8005488 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005482:	461a      	mov	r2, r3
 8005484:	2300      	movs	r3, #0
 8005486:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005494:	461a      	mov	r2, r3
 8005496:	2300      	movs	r3, #0
 8005498:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a6:	461a      	mov	r2, r3
 80054a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	3301      	adds	r3, #1
 80054b2:	613b      	str	r3, [r7, #16]
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d3b7      	bcc.n	800542c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80054dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d105      	bne.n	80054f0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	f043 0210 	orr.w	r2, r3, #16
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699a      	ldr	r2, [r3, #24]
 80054f4:	4b0f      	ldr	r3, [pc, #60]	; (8005534 <USB_DevInit+0x2c4>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d005      	beq.n	800550e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	f043 0208 	orr.w	r2, r3, #8
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800550e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005510:	2b01      	cmp	r3, #1
 8005512:	d107      	bne.n	8005524 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800551c:	f043 0304 	orr.w	r3, r3, #4
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005524:	7dfb      	ldrb	r3, [r7, #23]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005530:	b004      	add	sp, #16
 8005532:	4770      	bx	lr
 8005534:	803c3800 	.word	0x803c3800

08005538 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3301      	adds	r3, #1
 800554a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4a13      	ldr	r2, [pc, #76]	; (800559c <USB_FlushTxFifo+0x64>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d901      	bls.n	8005558 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e01b      	b.n	8005590 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	daf2      	bge.n	8005546 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	019b      	lsls	r3, r3, #6
 8005568:	f043 0220 	orr.w	r2, r3, #32
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	3301      	adds	r3, #1
 8005574:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4a08      	ldr	r2, [pc, #32]	; (800559c <USB_FlushTxFifo+0x64>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d901      	bls.n	8005582 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e006      	b.n	8005590 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f003 0320 	and.w	r3, r3, #32
 800558a:	2b20      	cmp	r3, #32
 800558c:	d0f0      	beq.n	8005570 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	00030d40 	.word	0x00030d40

080055a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	3301      	adds	r3, #1
 80055b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	4a11      	ldr	r2, [pc, #68]	; (80055fc <USB_FlushRxFifo+0x5c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d901      	bls.n	80055be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e018      	b.n	80055f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	daf2      	bge.n	80055ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80055c6:	2300      	movs	r3, #0
 80055c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2210      	movs	r2, #16
 80055ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	3301      	adds	r3, #1
 80055d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4a08      	ldr	r2, [pc, #32]	; (80055fc <USB_FlushRxFifo+0x5c>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d901      	bls.n	80055e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e006      	b.n	80055f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f003 0310 	and.w	r3, r3, #16
 80055ea:	2b10      	cmp	r3, #16
 80055ec:	d0f0      	beq.n	80055d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	00030d40 	.word	0x00030d40

08005600 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	460b      	mov	r3, r1
 800560a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	78fb      	ldrb	r3, [r7, #3]
 800561a:	68f9      	ldr	r1, [r7, #12]
 800561c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005620:	4313      	orrs	r3, r2
 8005622:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005632:	b480      	push	{r7}
 8005634:	b087      	sub	sp, #28
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 0306 	and.w	r3, r3, #6
 800564a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d102      	bne.n	8005658 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005652:	2300      	movs	r3, #0
 8005654:	75fb      	strb	r3, [r7, #23]
 8005656:	e00a      	b.n	800566e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b02      	cmp	r3, #2
 800565c:	d002      	beq.n	8005664 <USB_GetDevSpeed+0x32>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2b06      	cmp	r3, #6
 8005662:	d102      	bne.n	800566a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005664:	2302      	movs	r3, #2
 8005666:	75fb      	strb	r3, [r7, #23]
 8005668:	e001      	b.n	800566e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800566a:	230f      	movs	r3, #15
 800566c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800566e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005670:	4618      	mov	r0, r3
 8005672:	371c      	adds	r7, #28
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	785b      	ldrb	r3, [r3, #1]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d13a      	bne.n	800570e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569e:	69da      	ldr	r2, [r3, #28]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	f003 030f 	and.w	r3, r3, #15
 80056a8:	2101      	movs	r1, #1
 80056aa:	fa01 f303 	lsl.w	r3, r1, r3
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	68f9      	ldr	r1, [r7, #12]
 80056b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056b6:	4313      	orrs	r3, r2
 80056b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	015a      	lsls	r2, r3, #5
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4413      	add	r3, r2
 80056c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d155      	bne.n	800577c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	791b      	ldrb	r3, [r3, #4]
 80056ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	059b      	lsls	r3, r3, #22
 80056f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056f4:	4313      	orrs	r3, r2
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	0151      	lsls	r1, r2, #5
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	440a      	add	r2, r1
 80056fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800570a:	6013      	str	r3, [r2, #0]
 800570c:	e036      	b.n	800577c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005714:	69da      	ldr	r2, [r3, #28]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	2101      	movs	r1, #1
 8005720:	fa01 f303 	lsl.w	r3, r1, r3
 8005724:	041b      	lsls	r3, r3, #16
 8005726:	68f9      	ldr	r1, [r7, #12]
 8005728:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800572c:	4313      	orrs	r3, r2
 800572e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d11a      	bne.n	800577c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	791b      	ldrb	r3, [r3, #4]
 8005760:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005762:	430b      	orrs	r3, r1
 8005764:	4313      	orrs	r3, r2
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	0151      	lsls	r1, r2, #5
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	440a      	add	r2, r1
 800576e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800577a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
	...

0800578c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	785b      	ldrb	r3, [r3, #1]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d161      	bne.n	800586c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057be:	d11f      	bne.n	8005800 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	0151      	lsls	r1, r2, #5
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	440a      	add	r2, r1
 80057d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	0151      	lsls	r1, r2, #5
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	440a      	add	r2, r1
 80057f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005806:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	f003 030f 	and.w	r3, r3, #15
 8005810:	2101      	movs	r1, #1
 8005812:	fa01 f303 	lsl.w	r3, r1, r3
 8005816:	b29b      	uxth	r3, r3
 8005818:	43db      	mvns	r3, r3
 800581a:	68f9      	ldr	r1, [r7, #12]
 800581c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005820:	4013      	ands	r3, r2
 8005822:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800582a:	69da      	ldr	r2, [r3, #28]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	f003 030f 	and.w	r3, r3, #15
 8005834:	2101      	movs	r1, #1
 8005836:	fa01 f303 	lsl.w	r3, r1, r3
 800583a:	b29b      	uxth	r3, r3
 800583c:	43db      	mvns	r3, r3
 800583e:	68f9      	ldr	r1, [r7, #12]
 8005840:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005844:	4013      	ands	r3, r2
 8005846:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	0159      	lsls	r1, r3, #5
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	440b      	add	r3, r1
 800585e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005862:	4619      	mov	r1, r3
 8005864:	4b35      	ldr	r3, [pc, #212]	; (800593c <USB_DeactivateEndpoint+0x1b0>)
 8005866:	4013      	ands	r3, r2
 8005868:	600b      	str	r3, [r1, #0]
 800586a:	e060      	b.n	800592e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800587e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005882:	d11f      	bne.n	80058c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	0151      	lsls	r1, r2, #5
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	440a      	add	r2, r1
 800589a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800589e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	0151      	lsls	r1, r2, #5
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	440a      	add	r2, r1
 80058ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	f003 030f 	and.w	r3, r3, #15
 80058d4:	2101      	movs	r1, #1
 80058d6:	fa01 f303 	lsl.w	r3, r1, r3
 80058da:	041b      	lsls	r3, r3, #16
 80058dc:	43db      	mvns	r3, r3
 80058de:	68f9      	ldr	r1, [r7, #12]
 80058e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058e4:	4013      	ands	r3, r2
 80058e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ee:	69da      	ldr	r2, [r3, #28]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	f003 030f 	and.w	r3, r3, #15
 80058f8:	2101      	movs	r1, #1
 80058fa:	fa01 f303 	lsl.w	r3, r1, r3
 80058fe:	041b      	lsls	r3, r3, #16
 8005900:	43db      	mvns	r3, r3
 8005902:	68f9      	ldr	r1, [r7, #12]
 8005904:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005908:	4013      	ands	r3, r2
 800590a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	0159      	lsls	r1, r3, #5
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	440b      	add	r3, r1
 8005922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005926:	4619      	mov	r1, r3
 8005928:	4b05      	ldr	r3, [pc, #20]	; (8005940 <USB_DeactivateEndpoint+0x1b4>)
 800592a:	4013      	ands	r3, r2
 800592c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	ec337800 	.word	0xec337800
 8005940:	eff37800 	.word	0xeff37800

08005944 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b08a      	sub	sp, #40	; 0x28
 8005948:	af02      	add	r7, sp, #8
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	4613      	mov	r3, r2
 8005950:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	785b      	ldrb	r3, [r3, #1]
 8005960:	2b01      	cmp	r3, #1
 8005962:	f040 815c 	bne.w	8005c1e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d132      	bne.n	80059d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	0151      	lsls	r1, r2, #5
 8005980:	69fa      	ldr	r2, [r7, #28]
 8005982:	440a      	add	r2, r1
 8005984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005988:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800598c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005990:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	4413      	add	r3, r2
 800599a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	0151      	lsls	r1, r2, #5
 80059a4:	69fa      	ldr	r2, [r7, #28]
 80059a6:	440a      	add	r2, r1
 80059a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	0151      	lsls	r1, r2, #5
 80059c4:	69fa      	ldr	r2, [r7, #28]
 80059c6:	440a      	add	r2, r1
 80059c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059cc:	0cdb      	lsrs	r3, r3, #19
 80059ce:	04db      	lsls	r3, r3, #19
 80059d0:	6113      	str	r3, [r2, #16]
 80059d2:	e074      	b.n	8005abe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	0151      	lsls	r1, r2, #5
 80059e6:	69fa      	ldr	r2, [r7, #28]
 80059e8:	440a      	add	r2, r1
 80059ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ee:	0cdb      	lsrs	r3, r3, #19
 80059f0:	04db      	lsls	r3, r3, #19
 80059f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	0151      	lsls	r1, r2, #5
 8005a06:	69fa      	ldr	r2, [r7, #28]
 8005a08:	440a      	add	r2, r1
 8005a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a24:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	6999      	ldr	r1, [r3, #24]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	440b      	add	r3, r1
 8005a30:	1e59      	subs	r1, r3, #1
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a3a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a3c:	4b9d      	ldr	r3, [pc, #628]	; (8005cb4 <USB_EPStartXfer+0x370>)
 8005a3e:	400b      	ands	r3, r1
 8005a40:	69b9      	ldr	r1, [r7, #24]
 8005a42:	0148      	lsls	r0, r1, #5
 8005a44:	69f9      	ldr	r1, [r7, #28]
 8005a46:	4401      	add	r1, r0
 8005a48:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5c:	691a      	ldr	r2, [r3, #16]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a66:	69b9      	ldr	r1, [r7, #24]
 8005a68:	0148      	lsls	r0, r1, #5
 8005a6a:	69f9      	ldr	r1, [r7, #28]
 8005a6c:	4401      	add	r1, r0
 8005a6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a72:	4313      	orrs	r3, r2
 8005a74:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	791b      	ldrb	r3, [r3, #4]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d11f      	bne.n	8005abe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	0151      	lsls	r1, r2, #5
 8005a90:	69fa      	ldr	r2, [r7, #28]
 8005a92:	440a      	add	r2, r1
 8005a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a98:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005a9c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	0151      	lsls	r1, r2, #5
 8005ab0:	69fa      	ldr	r2, [r7, #28]
 8005ab2:	440a      	add	r2, r1
 8005ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ab8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005abc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005abe:	79fb      	ldrb	r3, [r7, #7]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d14b      	bne.n	8005b5c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d009      	beq.n	8005ae0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad8:	461a      	mov	r2, r3
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	791b      	ldrb	r3, [r3, #4]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d128      	bne.n	8005b3a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d110      	bne.n	8005b1a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	0151      	lsls	r1, r2, #5
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b16:	6013      	str	r3, [r2, #0]
 8005b18:	e00f      	b.n	8005b3a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	0151      	lsls	r1, r2, #5
 8005b2c:	69fa      	ldr	r2, [r7, #28]
 8005b2e:	440a      	add	r2, r1
 8005b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b38:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	0151      	lsls	r1, r2, #5
 8005b4c:	69fa      	ldr	r2, [r7, #28]
 8005b4e:	440a      	add	r2, r1
 8005b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b58:	6013      	str	r3, [r2, #0]
 8005b5a:	e133      	b.n	8005dc4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	0151      	lsls	r1, r2, #5
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	440a      	add	r2, r1
 8005b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b7a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	791b      	ldrb	r3, [r3, #4]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d015      	beq.n	8005bb0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 811b 	beq.w	8005dc4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	f003 030f 	and.w	r3, r3, #15
 8005b9e:	2101      	movs	r1, #1
 8005ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba4:	69f9      	ldr	r1, [r7, #28]
 8005ba6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005baa:	4313      	orrs	r3, r2
 8005bac:	634b      	str	r3, [r1, #52]	; 0x34
 8005bae:	e109      	b.n	8005dc4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d110      	bne.n	8005be2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	0151      	lsls	r1, r2, #5
 8005bd2:	69fa      	ldr	r2, [r7, #28]
 8005bd4:	440a      	add	r2, r1
 8005bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bde:	6013      	str	r3, [r2, #0]
 8005be0:	e00f      	b.n	8005c02 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	0151      	lsls	r1, r2, #5
 8005bf4:	69fa      	ldr	r2, [r7, #28]
 8005bf6:	440a      	add	r2, r1
 8005bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c00:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	6919      	ldr	r1, [r3, #16]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	781a      	ldrb	r2, [r3, #0]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	b298      	uxth	r0, r3
 8005c10:	79fb      	ldrb	r3, [r7, #7]
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	4603      	mov	r3, r0
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 fade 	bl	80061d8 <USB_WritePacket>
 8005c1c:	e0d2      	b.n	8005dc4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	0151      	lsls	r1, r2, #5
 8005c30:	69fa      	ldr	r2, [r7, #28]
 8005c32:	440a      	add	r2, r1
 8005c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c38:	0cdb      	lsrs	r3, r3, #19
 8005c3a:	04db      	lsls	r3, r3, #19
 8005c3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	0151      	lsls	r1, r2, #5
 8005c50:	69fa      	ldr	r2, [r7, #28]
 8005c52:	440a      	add	r2, r1
 8005c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c60:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d126      	bne.n	8005cb8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c76:	691a      	ldr	r2, [r3, #16]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c80:	69b9      	ldr	r1, [r7, #24]
 8005c82:	0148      	lsls	r0, r1, #5
 8005c84:	69f9      	ldr	r1, [r7, #28]
 8005c86:	4401      	add	r1, r0
 8005c88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	0151      	lsls	r1, r2, #5
 8005ca2:	69fa      	ldr	r2, [r7, #28]
 8005ca4:	440a      	add	r2, r1
 8005ca6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005caa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cae:	6113      	str	r3, [r2, #16]
 8005cb0:	e03a      	b.n	8005d28 <USB_EPStartXfer+0x3e4>
 8005cb2:	bf00      	nop
 8005cb4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	699a      	ldr	r2, [r3, #24]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	1e5a      	subs	r2, r3, #1
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ccc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	8afa      	ldrh	r2, [r7, #22]
 8005cd4:	fb03 f202 	mul.w	r2, r3, r2
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce8:	691a      	ldr	r2, [r3, #16]
 8005cea:	8afb      	ldrh	r3, [r7, #22]
 8005cec:	04d9      	lsls	r1, r3, #19
 8005cee:	4b38      	ldr	r3, [pc, #224]	; (8005dd0 <USB_EPStartXfer+0x48c>)
 8005cf0:	400b      	ands	r3, r1
 8005cf2:	69b9      	ldr	r1, [r7, #24]
 8005cf4:	0148      	lsls	r0, r1, #5
 8005cf6:	69f9      	ldr	r1, [r7, #28]
 8005cf8:	4401      	add	r1, r0
 8005cfa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0e:	691a      	ldr	r2, [r3, #16]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d18:	69b9      	ldr	r1, [r7, #24]
 8005d1a:	0148      	lsls	r0, r1, #5
 8005d1c:	69f9      	ldr	r1, [r7, #28]
 8005d1e:	4401      	add	r1, r0
 8005d20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d24:	4313      	orrs	r3, r2
 8005d26:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d28:	79fb      	ldrb	r3, [r7, #7]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d10d      	bne.n	8005d4a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d009      	beq.n	8005d4a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	6919      	ldr	r1, [r3, #16]
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d46:	460a      	mov	r2, r1
 8005d48:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	791b      	ldrb	r3, [r3, #4]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d128      	bne.n	8005da4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d110      	bne.n	8005d84 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	0151      	lsls	r1, r2, #5
 8005d74:	69fa      	ldr	r2, [r7, #28]
 8005d76:	440a      	add	r2, r1
 8005d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d80:	6013      	str	r3, [r2, #0]
 8005d82:	e00f      	b.n	8005da4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	0151      	lsls	r1, r2, #5
 8005d96:	69fa      	ldr	r2, [r7, #28]
 8005d98:	440a      	add	r2, r1
 8005d9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	0151      	lsls	r1, r2, #5
 8005db6:	69fa      	ldr	r2, [r7, #28]
 8005db8:	440a      	add	r2, r1
 8005dba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3720      	adds	r7, #32
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	1ff80000 	.word	0x1ff80000

08005dd4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	4613      	mov	r3, r2
 8005de0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	785b      	ldrb	r3, [r3, #1]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	f040 80ce 	bne.w	8005f92 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d132      	bne.n	8005e64 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	0151      	lsls	r1, r2, #5
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	440a      	add	r2, r1
 8005e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	0151      	lsls	r1, r2, #5
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	440a      	add	r2, r1
 8005e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e5c:	0cdb      	lsrs	r3, r3, #19
 8005e5e:	04db      	lsls	r3, r3, #19
 8005e60:	6113      	str	r3, [r2, #16]
 8005e62:	e04e      	b.n	8005f02 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	0151      	lsls	r1, r2, #5
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	440a      	add	r2, r1
 8005e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e7e:	0cdb      	lsrs	r3, r3, #19
 8005e80:	04db      	lsls	r3, r3, #19
 8005e82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	0151      	lsls	r1, r2, #5
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	440a      	add	r2, r1
 8005e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ea2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ea6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	699a      	ldr	r2, [r3, #24]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d903      	bls.n	8005ebc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	68da      	ldr	r2, [r3, #12]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	0151      	lsls	r1, r2, #5
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	440a      	add	r2, r1
 8005ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005eda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee8:	691a      	ldr	r2, [r3, #16]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ef2:	6939      	ldr	r1, [r7, #16]
 8005ef4:	0148      	lsls	r0, r1, #5
 8005ef6:	6979      	ldr	r1, [r7, #20]
 8005ef8:	4401      	add	r1, r0
 8005efa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005efe:	4313      	orrs	r3, r2
 8005f00:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f02:	79fb      	ldrb	r3, [r7, #7]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d11e      	bne.n	8005f46 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d009      	beq.n	8005f24 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	0151      	lsls	r1, r2, #5
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	440a      	add	r2, r1
 8005f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	e097      	b.n	8006076 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	0151      	lsls	r1, r2, #5
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	440a      	add	r2, r1
 8005f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f64:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f000 8083 	beq.w	8006076 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	f003 030f 	and.w	r3, r3, #15
 8005f80:	2101      	movs	r1, #1
 8005f82:	fa01 f303 	lsl.w	r3, r1, r3
 8005f86:	6979      	ldr	r1, [r7, #20]
 8005f88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	634b      	str	r3, [r1, #52]	; 0x34
 8005f90:	e071      	b.n	8006076 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	0151      	lsls	r1, r2, #5
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fac:	0cdb      	lsrs	r3, r3, #19
 8005fae:	04db      	lsls	r3, r3, #19
 8005fb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	0151      	lsls	r1, r2, #5
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	440a      	add	r2, r1
 8005fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fd4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	0151      	lsls	r1, r2, #5
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	440a      	add	r2, r1
 8006004:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006008:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800600c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	015a      	lsls	r2, r3, #5
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	4413      	add	r3, r2
 8006016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800601a:	691a      	ldr	r2, [r3, #16]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006024:	6939      	ldr	r1, [r7, #16]
 8006026:	0148      	lsls	r0, r1, #5
 8006028:	6979      	ldr	r1, [r7, #20]
 800602a:	4401      	add	r1, r0
 800602c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006030:	4313      	orrs	r3, r2
 8006032:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006034:	79fb      	ldrb	r3, [r7, #7]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d10d      	bne.n	8006056 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d009      	beq.n	8006056 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	6919      	ldr	r1, [r3, #16]
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	4413      	add	r3, r2
 800604e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006052:	460a      	mov	r2, r1
 8006054:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	0151      	lsls	r1, r2, #5
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	440a      	add	r2, r1
 800606c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006070:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006074:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	371c      	adds	r7, #28
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006084:	b480      	push	{r7}
 8006086:	b087      	sub	sp, #28
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d14a      	bne.n	8006138 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060ba:	f040 8086 	bne.w	80061ca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	7812      	ldrb	r2, [r2, #0]
 80060d2:	0151      	lsls	r1, r2, #5
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	440a      	add	r2, r1
 80060d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060e0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	7812      	ldrb	r2, [r2, #0]
 80060f6:	0151      	lsls	r1, r2, #5
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	440a      	add	r2, r1
 80060fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006100:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006104:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	3301      	adds	r3, #1
 800610a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006112:	4293      	cmp	r3, r2
 8006114:	d902      	bls.n	800611c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	75fb      	strb	r3, [r7, #23]
          break;
 800611a:	e056      	b.n	80061ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	4413      	add	r3, r2
 8006126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006134:	d0e7      	beq.n	8006106 <USB_EPStopXfer+0x82>
 8006136:	e048      	b.n	80061ca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	4413      	add	r3, r2
 8006142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800614c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006150:	d13b      	bne.n	80061ca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	4413      	add	r3, r2
 800615c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	7812      	ldrb	r2, [r2, #0]
 8006166:	0151      	lsls	r1, r2, #5
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	440a      	add	r2, r1
 800616c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006170:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006174:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	7812      	ldrb	r2, [r2, #0]
 800618a:	0151      	lsls	r1, r2, #5
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	440a      	add	r2, r1
 8006190:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006194:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006198:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	3301      	adds	r3, #1
 800619e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d902      	bls.n	80061b0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	75fb      	strb	r3, [r7, #23]
          break;
 80061ae:	e00c      	b.n	80061ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061c8:	d0e7      	beq.n	800619a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80061ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	371c      	adds	r7, #28
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80061d8:	b480      	push	{r7}
 80061da:	b089      	sub	sp, #36	; 0x24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	4611      	mov	r1, r2
 80061e4:	461a      	mov	r2, r3
 80061e6:	460b      	mov	r3, r1
 80061e8:	71fb      	strb	r3, [r7, #7]
 80061ea:	4613      	mov	r3, r2
 80061ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80061f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d123      	bne.n	8006246 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80061fe:	88bb      	ldrh	r3, [r7, #4]
 8006200:	3303      	adds	r3, #3
 8006202:	089b      	lsrs	r3, r3, #2
 8006204:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006206:	2300      	movs	r3, #0
 8006208:	61bb      	str	r3, [r7, #24]
 800620a:	e018      	b.n	800623e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800620c:	79fb      	ldrb	r3, [r7, #7]
 800620e:	031a      	lsls	r2, r3, #12
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	4413      	add	r3, r2
 8006214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006218:	461a      	mov	r2, r3
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	3301      	adds	r3, #1
 8006224:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	3301      	adds	r3, #1
 800622a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	3301      	adds	r3, #1
 8006230:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	3301      	adds	r3, #1
 8006236:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	3301      	adds	r3, #1
 800623c:	61bb      	str	r3, [r7, #24]
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	429a      	cmp	r2, r3
 8006244:	d3e2      	bcc.n	800620c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3724      	adds	r7, #36	; 0x24
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006254:	b480      	push	{r7}
 8006256:	b08b      	sub	sp, #44	; 0x2c
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	4613      	mov	r3, r2
 8006260:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800626a:	88fb      	ldrh	r3, [r7, #6]
 800626c:	089b      	lsrs	r3, r3, #2
 800626e:	b29b      	uxth	r3, r3
 8006270:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006272:	88fb      	ldrh	r3, [r7, #6]
 8006274:	f003 0303 	and.w	r3, r3, #3
 8006278:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800627a:	2300      	movs	r3, #0
 800627c:	623b      	str	r3, [r7, #32]
 800627e:	e014      	b.n	80062aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	601a      	str	r2, [r3, #0]
    pDest++;
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	3301      	adds	r3, #1
 8006290:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	3301      	adds	r3, #1
 8006296:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	3301      	adds	r3, #1
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	3301      	adds	r3, #1
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	3301      	adds	r3, #1
 80062a8:	623b      	str	r3, [r7, #32]
 80062aa:	6a3a      	ldr	r2, [r7, #32]
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d3e6      	bcc.n	8006280 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80062b2:	8bfb      	ldrh	r3, [r7, #30]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d01e      	beq.n	80062f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80062b8:	2300      	movs	r3, #0
 80062ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062c2:	461a      	mov	r2, r3
 80062c4:	f107 0310 	add.w	r3, r7, #16
 80062c8:	6812      	ldr	r2, [r2, #0]
 80062ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	00db      	lsls	r3, r3, #3
 80062d4:	fa22 f303 	lsr.w	r3, r2, r3
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	701a      	strb	r2, [r3, #0]
      i++;
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	3301      	adds	r3, #1
 80062e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	3301      	adds	r3, #1
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80062ea:	8bfb      	ldrh	r3, [r7, #30]
 80062ec:	3b01      	subs	r3, #1
 80062ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80062f0:	8bfb      	ldrh	r3, [r7, #30]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1ea      	bne.n	80062cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	372c      	adds	r7, #44	; 0x2c
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	785b      	ldrb	r3, [r3, #1]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d12c      	bne.n	800637a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	db12      	blt.n	8006358 <USB_EPSetStall+0x54>
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00f      	beq.n	8006358 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	0151      	lsls	r1, r2, #5
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	440a      	add	r2, r1
 800634e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006352:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006356:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	0151      	lsls	r1, r2, #5
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	440a      	add	r2, r1
 800636e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006372:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006376:	6013      	str	r3, [r2, #0]
 8006378:	e02b      	b.n	80063d2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	db12      	blt.n	80063b2 <USB_EPSetStall+0xae>
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00f      	beq.n	80063b2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	0151      	lsls	r1, r2, #5
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	440a      	add	r2, r1
 80063a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063b0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	0151      	lsls	r1, r2, #5
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	440a      	add	r2, r1
 80063c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	785b      	ldrb	r3, [r3, #1]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d128      	bne.n	800644e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4413      	add	r3, r2
 8006404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	0151      	lsls	r1, r2, #5
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	440a      	add	r2, r1
 8006412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006416:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800641a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	791b      	ldrb	r3, [r3, #4]
 8006420:	2b03      	cmp	r3, #3
 8006422:	d003      	beq.n	800642c <USB_EPClearStall+0x4c>
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	791b      	ldrb	r3, [r3, #4]
 8006428:	2b02      	cmp	r3, #2
 800642a:	d138      	bne.n	800649e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	0151      	lsls	r1, r2, #5
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	440a      	add	r2, r1
 8006442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800644a:	6013      	str	r3, [r2, #0]
 800644c:	e027      	b.n	800649e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	4413      	add	r3, r2
 8006456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	0151      	lsls	r1, r2, #5
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	440a      	add	r2, r1
 8006464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006468:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800646c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	791b      	ldrb	r3, [r3, #4]
 8006472:	2b03      	cmp	r3, #3
 8006474:	d003      	beq.n	800647e <USB_EPClearStall+0x9e>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	791b      	ldrb	r3, [r3, #4]
 800647a:	2b02      	cmp	r3, #2
 800647c:	d10f      	bne.n	800649e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	0151      	lsls	r1, r2, #5
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	440a      	add	r2, r1
 8006494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800649c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	460b      	mov	r3, r1
 80064b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80064ce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	78fb      	ldrb	r3, [r7, #3]
 80064da:	011b      	lsls	r3, r3, #4
 80064dc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80064e0:	68f9      	ldr	r1, [r7, #12]
 80064e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064e6:	4313      	orrs	r3, r2
 80064e8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006512:	f023 0303 	bic.w	r3, r3, #3
 8006516:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006526:	f023 0302 	bic.w	r3, r3, #2
 800652a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800653a:	b480      	push	{r7}
 800653c:	b085      	sub	sp, #20
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006554:	f023 0303 	bic.w	r3, r3, #3
 8006558:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006568:	f043 0302 	orr.w	r3, r3, #2
 800656c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	4013      	ands	r3, r2
 8006592:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006594:	68fb      	ldr	r3, [r7, #12]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b085      	sub	sp, #20
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	4013      	ands	r3, r2
 80065c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	0c1b      	lsrs	r3, r3, #16
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b085      	sub	sp, #20
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	4013      	ands	r3, r2
 80065f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	b29b      	uxth	r3, r3
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800660a:	b480      	push	{r7}
 800660c:	b085      	sub	sp, #20
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	460b      	mov	r3, r1
 8006614:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800661a:	78fb      	ldrb	r3, [r7, #3]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	4013      	ands	r3, r2
 8006636:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006638:	68bb      	ldr	r3, [r7, #8]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006646:	b480      	push	{r7}
 8006648:	b087      	sub	sp, #28
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	460b      	mov	r3, r1
 8006650:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006668:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800666a:	78fb      	ldrb	r3, [r7, #3]
 800666c:	f003 030f 	and.w	r3, r3, #15
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	fa22 f303 	lsr.w	r3, r2, r3
 8006676:	01db      	lsls	r3, r3, #7
 8006678:	b2db      	uxtb	r3, r3
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	4313      	orrs	r3, r2
 800667e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006680:	78fb      	ldrb	r3, [r7, #3]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	4013      	ands	r3, r2
 8006692:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006694:	68bb      	ldr	r3, [r7, #8]
}
 8006696:	4618      	mov	r0, r3
 8006698:	371c      	adds	r7, #28
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	f003 0301 	and.w	r3, r3, #1
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80066be:	b480      	push	{r7}
 80066c0:	b085      	sub	sp, #20
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80066dc:	f023 0307 	bic.w	r3, r3, #7
 80066e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	460b      	mov	r3, r1
 800670e:	607a      	str	r2, [r7, #4]
 8006710:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	333c      	adds	r3, #60	; 0x3c
 800671a:	3304      	adds	r3, #4
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	4a26      	ldr	r2, [pc, #152]	; (80067bc <USB_EP0_OutStart+0xb8>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d90a      	bls.n	800673e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006738:	d101      	bne.n	800673e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800673a:	2300      	movs	r3, #0
 800673c:	e037      	b.n	80067ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006744:	461a      	mov	r2, r3
 8006746:	2300      	movs	r3, #0
 8006748:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006758:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800675c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800676c:	f043 0318 	orr.w	r3, r3, #24
 8006770:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006780:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006784:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006786:	7afb      	ldrb	r3, [r7, #11]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d10f      	bne.n	80067ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006792:	461a      	mov	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067a6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80067aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	371c      	adds	r7, #28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	4f54300a 	.word	0x4f54300a

080067c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067c8:	2300      	movs	r3, #0
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	3301      	adds	r3, #1
 80067d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	4a13      	ldr	r2, [pc, #76]	; (8006824 <USB_CoreReset+0x64>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d901      	bls.n	80067de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e01b      	b.n	8006816 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	daf2      	bge.n	80067cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067e6:	2300      	movs	r3, #0
 80067e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	f043 0201 	orr.w	r2, r3, #1
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	3301      	adds	r3, #1
 80067fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4a09      	ldr	r2, [pc, #36]	; (8006824 <USB_CoreReset+0x64>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d901      	bls.n	8006808 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e006      	b.n	8006816 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b01      	cmp	r3, #1
 8006812:	d0f0      	beq.n	80067f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	00030d40 	.word	0x00030d40

08006828 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	460b      	mov	r3, r1
 8006832:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006834:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006838:	f002 fc3e 	bl	80090b8 <USBD_static_malloc>
 800683c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d109      	bne.n	8006858 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	32b0      	adds	r2, #176	; 0xb0
 800684e:	2100      	movs	r1, #0
 8006850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006854:	2302      	movs	r3, #2
 8006856:	e0d4      	b.n	8006a02 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006858:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800685c:	2100      	movs	r1, #0
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f002 fca0 	bl	80091a4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	32b0      	adds	r2, #176	; 0xb0
 800686e:	68f9      	ldr	r1, [r7, #12]
 8006870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	32b0      	adds	r2, #176	; 0xb0
 800687e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	7c1b      	ldrb	r3, [r3, #16]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d138      	bne.n	8006902 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006890:	4b5e      	ldr	r3, [pc, #376]	; (8006a0c <USBD_CDC_Init+0x1e4>)
 8006892:	7819      	ldrb	r1, [r3, #0]
 8006894:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006898:	2202      	movs	r2, #2
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f002 fae9 	bl	8008e72 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80068a0:	4b5a      	ldr	r3, [pc, #360]	; (8006a0c <USBD_CDC_Init+0x1e4>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	f003 020f 	and.w	r2, r3, #15
 80068a8:	6879      	ldr	r1, [r7, #4]
 80068aa:	4613      	mov	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	440b      	add	r3, r1
 80068b4:	3324      	adds	r3, #36	; 0x24
 80068b6:	2201      	movs	r2, #1
 80068b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80068ba:	4b55      	ldr	r3, [pc, #340]	; (8006a10 <USBD_CDC_Init+0x1e8>)
 80068bc:	7819      	ldrb	r1, [r3, #0]
 80068be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068c2:	2202      	movs	r2, #2
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f002 fad4 	bl	8008e72 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80068ca:	4b51      	ldr	r3, [pc, #324]	; (8006a10 <USBD_CDC_Init+0x1e8>)
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	f003 020f 	and.w	r2, r3, #15
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	4613      	mov	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	440b      	add	r3, r1
 80068de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80068e2:	2201      	movs	r2, #1
 80068e4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80068e6:	4b4b      	ldr	r3, [pc, #300]	; (8006a14 <USBD_CDC_Init+0x1ec>)
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	f003 020f 	and.w	r2, r3, #15
 80068ee:	6879      	ldr	r1, [r7, #4]
 80068f0:	4613      	mov	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	440b      	add	r3, r1
 80068fa:	3326      	adds	r3, #38	; 0x26
 80068fc:	2210      	movs	r2, #16
 80068fe:	801a      	strh	r2, [r3, #0]
 8006900:	e035      	b.n	800696e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006902:	4b42      	ldr	r3, [pc, #264]	; (8006a0c <USBD_CDC_Init+0x1e4>)
 8006904:	7819      	ldrb	r1, [r3, #0]
 8006906:	2340      	movs	r3, #64	; 0x40
 8006908:	2202      	movs	r2, #2
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f002 fab1 	bl	8008e72 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006910:	4b3e      	ldr	r3, [pc, #248]	; (8006a0c <USBD_CDC_Init+0x1e4>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	f003 020f 	and.w	r2, r3, #15
 8006918:	6879      	ldr	r1, [r7, #4]
 800691a:	4613      	mov	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	440b      	add	r3, r1
 8006924:	3324      	adds	r3, #36	; 0x24
 8006926:	2201      	movs	r2, #1
 8006928:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800692a:	4b39      	ldr	r3, [pc, #228]	; (8006a10 <USBD_CDC_Init+0x1e8>)
 800692c:	7819      	ldrb	r1, [r3, #0]
 800692e:	2340      	movs	r3, #64	; 0x40
 8006930:	2202      	movs	r2, #2
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f002 fa9d 	bl	8008e72 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006938:	4b35      	ldr	r3, [pc, #212]	; (8006a10 <USBD_CDC_Init+0x1e8>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	f003 020f 	and.w	r2, r3, #15
 8006940:	6879      	ldr	r1, [r7, #4]
 8006942:	4613      	mov	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	440b      	add	r3, r1
 800694c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006950:	2201      	movs	r2, #1
 8006952:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006954:	4b2f      	ldr	r3, [pc, #188]	; (8006a14 <USBD_CDC_Init+0x1ec>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	f003 020f 	and.w	r2, r3, #15
 800695c:	6879      	ldr	r1, [r7, #4]
 800695e:	4613      	mov	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	440b      	add	r3, r1
 8006968:	3326      	adds	r3, #38	; 0x26
 800696a:	2210      	movs	r2, #16
 800696c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800696e:	4b29      	ldr	r3, [pc, #164]	; (8006a14 <USBD_CDC_Init+0x1ec>)
 8006970:	7819      	ldrb	r1, [r3, #0]
 8006972:	2308      	movs	r3, #8
 8006974:	2203      	movs	r2, #3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f002 fa7b 	bl	8008e72 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800697c:	4b25      	ldr	r3, [pc, #148]	; (8006a14 <USBD_CDC_Init+0x1ec>)
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	f003 020f 	and.w	r2, r3, #15
 8006984:	6879      	ldr	r1, [r7, #4]
 8006986:	4613      	mov	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	440b      	add	r3, r1
 8006990:	3324      	adds	r3, #36	; 0x24
 8006992:	2201      	movs	r2, #1
 8006994:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	33b0      	adds	r3, #176	; 0xb0
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80069cc:	2302      	movs	r3, #2
 80069ce:	e018      	b.n	8006a02 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	7c1b      	ldrb	r3, [r3, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10a      	bne.n	80069ee <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80069d8:	4b0d      	ldr	r3, [pc, #52]	; (8006a10 <USBD_CDC_Init+0x1e8>)
 80069da:	7819      	ldrb	r1, [r3, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f002 fb32 	bl	8009050 <USBD_LL_PrepareReceive>
 80069ec:	e008      	b.n	8006a00 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80069ee:	4b08      	ldr	r3, [pc, #32]	; (8006a10 <USBD_CDC_Init+0x1e8>)
 80069f0:	7819      	ldrb	r1, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069f8:	2340      	movs	r3, #64	; 0x40
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f002 fb28 	bl	8009050 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	20000093 	.word	0x20000093
 8006a10:	20000094 	.word	0x20000094
 8006a14:	20000095 	.word	0x20000095

08006a18 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006a24:	4b3a      	ldr	r3, [pc, #232]	; (8006b10 <USBD_CDC_DeInit+0xf8>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	4619      	mov	r1, r3
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f002 fa47 	bl	8008ebe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006a30:	4b37      	ldr	r3, [pc, #220]	; (8006b10 <USBD_CDC_DeInit+0xf8>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	f003 020f 	and.w	r2, r3, #15
 8006a38:	6879      	ldr	r1, [r7, #4]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	440b      	add	r3, r1
 8006a44:	3324      	adds	r3, #36	; 0x24
 8006a46:	2200      	movs	r2, #0
 8006a48:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006a4a:	4b32      	ldr	r3, [pc, #200]	; (8006b14 <USBD_CDC_DeInit+0xfc>)
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f002 fa34 	bl	8008ebe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006a56:	4b2f      	ldr	r3, [pc, #188]	; (8006b14 <USBD_CDC_DeInit+0xfc>)
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	f003 020f 	and.w	r2, r3, #15
 8006a5e:	6879      	ldr	r1, [r7, #4]
 8006a60:	4613      	mov	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	440b      	add	r3, r1
 8006a6a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a6e:	2200      	movs	r2, #0
 8006a70:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006a72:	4b29      	ldr	r3, [pc, #164]	; (8006b18 <USBD_CDC_DeInit+0x100>)
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f002 fa20 	bl	8008ebe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006a7e:	4b26      	ldr	r3, [pc, #152]	; (8006b18 <USBD_CDC_DeInit+0x100>)
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	f003 020f 	and.w	r2, r3, #15
 8006a86:	6879      	ldr	r1, [r7, #4]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	440b      	add	r3, r1
 8006a92:	3324      	adds	r3, #36	; 0x24
 8006a94:	2200      	movs	r2, #0
 8006a96:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006a98:	4b1f      	ldr	r3, [pc, #124]	; (8006b18 <USBD_CDC_DeInit+0x100>)
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	f003 020f 	and.w	r2, r3, #15
 8006aa0:	6879      	ldr	r1, [r7, #4]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	440b      	add	r3, r1
 8006aac:	3326      	adds	r3, #38	; 0x26
 8006aae:	2200      	movs	r2, #0
 8006ab0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	32b0      	adds	r2, #176	; 0xb0
 8006abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d01f      	beq.n	8006b04 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	33b0      	adds	r3, #176	; 0xb0
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	32b0      	adds	r2, #176	; 0xb0
 8006ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f002 faf4 	bl	80090d4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	32b0      	adds	r2, #176	; 0xb0
 8006af6:	2100      	movs	r1, #0
 8006af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	20000093 	.word	0x20000093
 8006b14:	20000094 	.word	0x20000094
 8006b18:	20000095 	.word	0x20000095

08006b1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	32b0      	adds	r2, #176	; 0xb0
 8006b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b34:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e0bf      	b.n	8006ccc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d050      	beq.n	8006bfa <USBD_CDC_Setup+0xde>
 8006b58:	2b20      	cmp	r3, #32
 8006b5a:	f040 80af 	bne.w	8006cbc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	88db      	ldrh	r3, [r3, #6]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d03a      	beq.n	8006bdc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	b25b      	sxtb	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	da1b      	bge.n	8006ba8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	33b0      	adds	r3, #176	; 0xb0
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006b86:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006b88:	683a      	ldr	r2, [r7, #0]
 8006b8a:	88d2      	ldrh	r2, [r2, #6]
 8006b8c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	88db      	ldrh	r3, [r3, #6]
 8006b92:	2b07      	cmp	r3, #7
 8006b94:	bf28      	it	cs
 8006b96:	2307      	movcs	r3, #7
 8006b98:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	89fa      	ldrh	r2, [r7, #14]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f001 fd43 	bl	800862c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006ba6:	e090      	b.n	8006cca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	785a      	ldrb	r2, [r3, #1]
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	88db      	ldrh	r3, [r3, #6]
 8006bb6:	2b3f      	cmp	r3, #63	; 0x3f
 8006bb8:	d803      	bhi.n	8006bc2 <USBD_CDC_Setup+0xa6>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	88db      	ldrh	r3, [r3, #6]
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	e000      	b.n	8006bc4 <USBD_CDC_Setup+0xa8>
 8006bc2:	2240      	movs	r2, #64	; 0x40
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006bca:	6939      	ldr	r1, [r7, #16]
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f001 fd55 	bl	8008684 <USBD_CtlPrepareRx>
      break;
 8006bda:	e076      	b.n	8006cca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	33b0      	adds	r3, #176	; 0xb0
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	7850      	ldrb	r0, [r2, #1]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	4798      	blx	r3
      break;
 8006bf8:	e067      	b.n	8006cca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	785b      	ldrb	r3, [r3, #1]
 8006bfe:	2b0b      	cmp	r3, #11
 8006c00:	d851      	bhi.n	8006ca6 <USBD_CDC_Setup+0x18a>
 8006c02:	a201      	add	r2, pc, #4	; (adr r2, 8006c08 <USBD_CDC_Setup+0xec>)
 8006c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c08:	08006c39 	.word	0x08006c39
 8006c0c:	08006cb5 	.word	0x08006cb5
 8006c10:	08006ca7 	.word	0x08006ca7
 8006c14:	08006ca7 	.word	0x08006ca7
 8006c18:	08006ca7 	.word	0x08006ca7
 8006c1c:	08006ca7 	.word	0x08006ca7
 8006c20:	08006ca7 	.word	0x08006ca7
 8006c24:	08006ca7 	.word	0x08006ca7
 8006c28:	08006ca7 	.word	0x08006ca7
 8006c2c:	08006ca7 	.word	0x08006ca7
 8006c30:	08006c63 	.word	0x08006c63
 8006c34:	08006c8d 	.word	0x08006c8d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b03      	cmp	r3, #3
 8006c42:	d107      	bne.n	8006c54 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006c44:	f107 030a 	add.w	r3, r7, #10
 8006c48:	2202      	movs	r2, #2
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f001 fced 	bl	800862c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c52:	e032      	b.n	8006cba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006c54:	6839      	ldr	r1, [r7, #0]
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f001 fc77 	bl	800854a <USBD_CtlError>
            ret = USBD_FAIL;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	75fb      	strb	r3, [r7, #23]
          break;
 8006c60:	e02b      	b.n	8006cba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b03      	cmp	r3, #3
 8006c6c:	d107      	bne.n	8006c7e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006c6e:	f107 030d 	add.w	r3, r7, #13
 8006c72:	2201      	movs	r2, #1
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f001 fcd8 	bl	800862c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c7c:	e01d      	b.n	8006cba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006c7e:	6839      	ldr	r1, [r7, #0]
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f001 fc62 	bl	800854a <USBD_CtlError>
            ret = USBD_FAIL;
 8006c86:	2303      	movs	r3, #3
 8006c88:	75fb      	strb	r3, [r7, #23]
          break;
 8006c8a:	e016      	b.n	8006cba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b03      	cmp	r3, #3
 8006c96:	d00f      	beq.n	8006cb8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f001 fc55 	bl	800854a <USBD_CtlError>
            ret = USBD_FAIL;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ca4:	e008      	b.n	8006cb8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f001 fc4e 	bl	800854a <USBD_CtlError>
          ret = USBD_FAIL;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	75fb      	strb	r3, [r7, #23]
          break;
 8006cb2:	e002      	b.n	8006cba <USBD_CDC_Setup+0x19e>
          break;
 8006cb4:	bf00      	nop
 8006cb6:	e008      	b.n	8006cca <USBD_CDC_Setup+0x1ae>
          break;
 8006cb8:	bf00      	nop
      }
      break;
 8006cba:	e006      	b.n	8006cca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f001 fc43 	bl	800854a <USBD_CtlError>
      ret = USBD_FAIL;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc8:	bf00      	nop
  }

  return (uint8_t)ret;
 8006cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3718      	adds	r7, #24
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ce6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	32b0      	adds	r2, #176	; 0xb0
 8006cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e065      	b.n	8006dca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	32b0      	adds	r2, #176	; 0xb0
 8006d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d0e:	78fb      	ldrb	r3, [r7, #3]
 8006d10:	f003 020f 	and.w	r2, r3, #15
 8006d14:	6879      	ldr	r1, [r7, #4]
 8006d16:	4613      	mov	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	440b      	add	r3, r1
 8006d20:	3318      	adds	r3, #24
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d02f      	beq.n	8006d88 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006d28:	78fb      	ldrb	r3, [r7, #3]
 8006d2a:	f003 020f 	and.w	r2, r3, #15
 8006d2e:	6879      	ldr	r1, [r7, #4]
 8006d30:	4613      	mov	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	440b      	add	r3, r1
 8006d3a:	3318      	adds	r3, #24
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	78fb      	ldrb	r3, [r7, #3]
 8006d40:	f003 010f 	and.w	r1, r3, #15
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	460b      	mov	r3, r1
 8006d48:	00db      	lsls	r3, r3, #3
 8006d4a:	440b      	add	r3, r1
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4403      	add	r3, r0
 8006d50:	3348      	adds	r3, #72	; 0x48
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	fbb2 f1f3 	udiv	r1, r2, r3
 8006d58:	fb01 f303 	mul.w	r3, r1, r3
 8006d5c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d112      	bne.n	8006d88 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006d62:	78fb      	ldrb	r3, [r7, #3]
 8006d64:	f003 020f 	and.w	r2, r3, #15
 8006d68:	6879      	ldr	r1, [r7, #4]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	440b      	add	r3, r1
 8006d74:	3318      	adds	r3, #24
 8006d76:	2200      	movs	r2, #0
 8006d78:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006d7a:	78f9      	ldrb	r1, [r7, #3]
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	2200      	movs	r2, #0
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f002 f944 	bl	800900e <USBD_LL_Transmit>
 8006d86:	e01f      	b.n	8006dc8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	33b0      	adds	r3, #176	; 0xb0
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d010      	beq.n	8006dc8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	33b0      	adds	r3, #176	; 0xb0
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006dc4:	78fa      	ldrb	r2, [r7, #3]
 8006dc6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b084      	sub	sp, #16
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	460b      	mov	r3, r1
 8006ddc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	32b0      	adds	r2, #176	; 0xb0
 8006de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	32b0      	adds	r2, #176	; 0xb0
 8006df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d101      	bne.n	8006e04 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e01a      	b.n	8006e3a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e04:	78fb      	ldrb	r3, [r7, #3]
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f002 f942 	bl	8009092 <USBD_LL_GetRxDataSize>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	33b0      	adds	r3, #176	; 0xb0
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006e34:	4611      	mov	r1, r2
 8006e36:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b084      	sub	sp, #16
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	32b0      	adds	r2, #176	; 0xb0
 8006e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e58:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e025      	b.n	8006eb0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	33b0      	adds	r3, #176	; 0xb0
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d01a      	beq.n	8006eae <USBD_CDC_EP0_RxReady+0x6c>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006e7e:	2bff      	cmp	r3, #255	; 0xff
 8006e80:	d015      	beq.n	8006eae <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	33b0      	adds	r3, #176	; 0xb0
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006e9a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006ea2:	b292      	uxth	r2, r2
 8006ea4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	22ff      	movs	r2, #255	; 0xff
 8006eaa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ec0:	2182      	movs	r1, #130	; 0x82
 8006ec2:	4818      	ldr	r0, [pc, #96]	; (8006f24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ec4:	f000 fd09 	bl	80078da <USBD_GetEpDesc>
 8006ec8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006eca:	2101      	movs	r1, #1
 8006ecc:	4815      	ldr	r0, [pc, #84]	; (8006f24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ece:	f000 fd04 	bl	80078da <USBD_GetEpDesc>
 8006ed2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ed4:	2181      	movs	r1, #129	; 0x81
 8006ed6:	4813      	ldr	r0, [pc, #76]	; (8006f24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ed8:	f000 fcff 	bl	80078da <USBD_GetEpDesc>
 8006edc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d002      	beq.n	8006eea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	2210      	movs	r2, #16
 8006ee8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d006      	beq.n	8006efe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ef8:	711a      	strb	r2, [r3, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d006      	beq.n	8006f12 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f0c:	711a      	strb	r2, [r3, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2243      	movs	r2, #67	; 0x43
 8006f16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f18:	4b02      	ldr	r3, [pc, #8]	; (8006f24 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	20000050 	.word	0x20000050

08006f28 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f30:	2182      	movs	r1, #130	; 0x82
 8006f32:	4818      	ldr	r0, [pc, #96]	; (8006f94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f34:	f000 fcd1 	bl	80078da <USBD_GetEpDesc>
 8006f38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f3a:	2101      	movs	r1, #1
 8006f3c:	4815      	ldr	r0, [pc, #84]	; (8006f94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f3e:	f000 fccc 	bl	80078da <USBD_GetEpDesc>
 8006f42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f44:	2181      	movs	r1, #129	; 0x81
 8006f46:	4813      	ldr	r0, [pc, #76]	; (8006f94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f48:	f000 fcc7 	bl	80078da <USBD_GetEpDesc>
 8006f4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d002      	beq.n	8006f5a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	2210      	movs	r2, #16
 8006f58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d006      	beq.n	8006f6e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	2200      	movs	r2, #0
 8006f64:	711a      	strb	r2, [r3, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f042 0202 	orr.w	r2, r2, #2
 8006f6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d006      	beq.n	8006f82 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	711a      	strb	r2, [r3, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f042 0202 	orr.w	r2, r2, #2
 8006f80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2243      	movs	r2, #67	; 0x43
 8006f86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f88:	4b02      	ldr	r3, [pc, #8]	; (8006f94 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3718      	adds	r7, #24
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	20000050 	.word	0x20000050

08006f98 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006fa0:	2182      	movs	r1, #130	; 0x82
 8006fa2:	4818      	ldr	r0, [pc, #96]	; (8007004 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006fa4:	f000 fc99 	bl	80078da <USBD_GetEpDesc>
 8006fa8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006faa:	2101      	movs	r1, #1
 8006fac:	4815      	ldr	r0, [pc, #84]	; (8007004 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006fae:	f000 fc94 	bl	80078da <USBD_GetEpDesc>
 8006fb2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006fb4:	2181      	movs	r1, #129	; 0x81
 8006fb6:	4813      	ldr	r0, [pc, #76]	; (8007004 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006fb8:	f000 fc8f 	bl	80078da <USBD_GetEpDesc>
 8006fbc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d002      	beq.n	8006fca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	2210      	movs	r2, #16
 8006fc8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d006      	beq.n	8006fde <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fd8:	711a      	strb	r2, [r3, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d006      	beq.n	8006ff2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fec:	711a      	strb	r2, [r3, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2243      	movs	r2, #67	; 0x43
 8006ff6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ff8:	4b02      	ldr	r3, [pc, #8]	; (8007004 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3718      	adds	r7, #24
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	20000050 	.word	0x20000050

08007008 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	220a      	movs	r2, #10
 8007014:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007016:	4b03      	ldr	r3, [pc, #12]	; (8007024 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007018:	4618      	mov	r0, r3
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	2000000c 	.word	0x2000000c

08007028 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007038:	2303      	movs	r3, #3
 800703a:	e009      	b.n	8007050 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	33b0      	adds	r3, #176	; 0xb0
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	32b0      	adds	r2, #176	; 0xb0
 8007072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007076:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800707e:	2303      	movs	r3, #3
 8007080:	e008      	b.n	8007094 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	371c      	adds	r7, #28
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	32b0      	adds	r2, #176	; 0xb0
 80070b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e004      	b.n	80070ce <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3714      	adds	r7, #20
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
	...

080070dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	32b0      	adds	r2, #176	; 0xb0
 80070ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	32b0      	adds	r2, #176	; 0xb0
 80070fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007106:	2303      	movs	r3, #3
 8007108:	e018      	b.n	800713c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	7c1b      	ldrb	r3, [r3, #16]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10a      	bne.n	8007128 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007112:	4b0c      	ldr	r3, [pc, #48]	; (8007144 <USBD_CDC_ReceivePacket+0x68>)
 8007114:	7819      	ldrb	r1, [r3, #0]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800711c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 ff95 	bl	8009050 <USBD_LL_PrepareReceive>
 8007126:	e008      	b.n	800713a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007128:	4b06      	ldr	r3, [pc, #24]	; (8007144 <USBD_CDC_ReceivePacket+0x68>)
 800712a:	7819      	ldrb	r1, [r3, #0]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007132:	2340      	movs	r3, #64	; 0x40
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f001 ff8b 	bl	8009050 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	20000094 	.word	0x20000094

08007148 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	4613      	mov	r3, r2
 8007154:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800715c:	2303      	movs	r3, #3
 800715e:	e01f      	b.n	80071a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	79fa      	ldrb	r2, [r7, #7]
 8007192:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f001 fe05 	bl	8008da4 <USBD_LL_Init>
 800719a:	4603      	mov	r3, r0
 800719c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800719e:	7dfb      	ldrb	r3, [r7, #23]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80071bc:	2303      	movs	r3, #3
 80071be:	e025      	b.n	800720c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	32ae      	adds	r2, #174	; 0xae
 80071d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00f      	beq.n	80071fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	32ae      	adds	r2, #174	; 0xae
 80071e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ec:	f107 020e 	add.w	r2, r7, #14
 80071f0:	4610      	mov	r0, r2
 80071f2:	4798      	blx	r3
 80071f4:	4602      	mov	r2, r0
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007202:	1c5a      	adds	r2, r3, #1
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f001 fe0d 	bl	8008e3c <USBD_LL_Start>
 8007222:	4603      	mov	r3, r0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007234:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007236:	4618      	mov	r0, r3
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	460b      	mov	r3, r1
 800724c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800724e:	2300      	movs	r3, #0
 8007250:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007258:	2b00      	cmp	r3, #0
 800725a:	d009      	beq.n	8007270 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	78fa      	ldrb	r2, [r7, #3]
 8007266:	4611      	mov	r1, r2
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	4798      	blx	r3
 800726c:	4603      	mov	r3, r0
 800726e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007270:	7bfb      	ldrb	r3, [r7, #15]
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b084      	sub	sp, #16
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
 8007282:	460b      	mov	r3, r1
 8007284:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	78fa      	ldrb	r2, [r7, #3]
 8007294:	4611      	mov	r1, r2
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	4798      	blx	r3
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d001      	beq.n	80072a4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80072a0:	2303      	movs	r3, #3
 80072a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b084      	sub	sp, #16
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
 80072b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	4618      	mov	r0, r3
 80072c2:	f001 f908 	bl	80084d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80072d4:	461a      	mov	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80072e2:	f003 031f 	and.w	r3, r3, #31
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d01a      	beq.n	8007320 <USBD_LL_SetupStage+0x72>
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d822      	bhi.n	8007334 <USBD_LL_SetupStage+0x86>
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d002      	beq.n	80072f8 <USBD_LL_SetupStage+0x4a>
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d00a      	beq.n	800730c <USBD_LL_SetupStage+0x5e>
 80072f6:	e01d      	b.n	8007334 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072fe:	4619      	mov	r1, r3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fb5f 	bl	80079c4 <USBD_StdDevReq>
 8007306:	4603      	mov	r3, r0
 8007308:	73fb      	strb	r3, [r7, #15]
      break;
 800730a:	e020      	b.n	800734e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fbc7 	bl	8007aa8 <USBD_StdItfReq>
 800731a:	4603      	mov	r3, r0
 800731c:	73fb      	strb	r3, [r7, #15]
      break;
 800731e:	e016      	b.n	800734e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007326:	4619      	mov	r1, r3
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fc29 	bl	8007b80 <USBD_StdEPReq>
 800732e:	4603      	mov	r3, r0
 8007330:	73fb      	strb	r3, [r7, #15]
      break;
 8007332:	e00c      	b.n	800734e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800733a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800733e:	b2db      	uxtb	r3, r3
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f001 fdda 	bl	8008efc <USBD_LL_StallEP>
 8007348:	4603      	mov	r3, r0
 800734a:	73fb      	strb	r3, [r7, #15]
      break;
 800734c:	bf00      	nop
  }

  return ret;
 800734e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	460b      	mov	r3, r1
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800736a:	7afb      	ldrb	r3, [r7, #11]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d16e      	bne.n	800744e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007376:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800737e:	2b03      	cmp	r3, #3
 8007380:	f040 8098 	bne.w	80074b4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	429a      	cmp	r2, r3
 800738e:	d913      	bls.n	80073b8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	689a      	ldr	r2, [r3, #8]
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	1ad2      	subs	r2, r2, r3
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	68da      	ldr	r2, [r3, #12]
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	4293      	cmp	r3, r2
 80073a8:	bf28      	it	cs
 80073aa:	4613      	movcs	r3, r2
 80073ac:	461a      	mov	r2, r3
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f001 f984 	bl	80086be <USBD_CtlContinueRx>
 80073b6:	e07d      	b.n	80074b4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80073be:	f003 031f 	and.w	r3, r3, #31
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d014      	beq.n	80073f0 <USBD_LL_DataOutStage+0x98>
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d81d      	bhi.n	8007406 <USBD_LL_DataOutStage+0xae>
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d002      	beq.n	80073d4 <USBD_LL_DataOutStage+0x7c>
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d003      	beq.n	80073da <USBD_LL_DataOutStage+0x82>
 80073d2:	e018      	b.n	8007406 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	75bb      	strb	r3, [r7, #22]
            break;
 80073d8:	e018      	b.n	800740c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	4619      	mov	r1, r3
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 fa5e 	bl	80078a6 <USBD_CoreFindIF>
 80073ea:	4603      	mov	r3, r0
 80073ec:	75bb      	strb	r3, [r7, #22]
            break;
 80073ee:	e00d      	b.n	800740c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	4619      	mov	r1, r3
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 fa60 	bl	80078c0 <USBD_CoreFindEP>
 8007400:	4603      	mov	r3, r0
 8007402:	75bb      	strb	r3, [r7, #22]
            break;
 8007404:	e002      	b.n	800740c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	75bb      	strb	r3, [r7, #22]
            break;
 800740a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800740c:	7dbb      	ldrb	r3, [r7, #22]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d119      	bne.n	8007446 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b03      	cmp	r3, #3
 800741c:	d113      	bne.n	8007446 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800741e:	7dba      	ldrb	r2, [r7, #22]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	32ae      	adds	r2, #174	; 0xae
 8007424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00b      	beq.n	8007446 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800742e:	7dba      	ldrb	r2, [r7, #22]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007436:	7dba      	ldrb	r2, [r7, #22]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	32ae      	adds	r2, #174	; 0xae
 800743c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f001 f94a 	bl	80086e0 <USBD_CtlSendStatus>
 800744c:	e032      	b.n	80074b4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800744e:	7afb      	ldrb	r3, [r7, #11]
 8007450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007454:	b2db      	uxtb	r3, r3
 8007456:	4619      	mov	r1, r3
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f000 fa31 	bl	80078c0 <USBD_CoreFindEP>
 800745e:	4603      	mov	r3, r0
 8007460:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007462:	7dbb      	ldrb	r3, [r7, #22]
 8007464:	2bff      	cmp	r3, #255	; 0xff
 8007466:	d025      	beq.n	80074b4 <USBD_LL_DataOutStage+0x15c>
 8007468:	7dbb      	ldrb	r3, [r7, #22]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d122      	bne.n	80074b4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b03      	cmp	r3, #3
 8007478:	d117      	bne.n	80074aa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800747a:	7dba      	ldrb	r2, [r7, #22]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	32ae      	adds	r2, #174	; 0xae
 8007480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00f      	beq.n	80074aa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800748a:	7dba      	ldrb	r2, [r7, #22]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007492:	7dba      	ldrb	r2, [r7, #22]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	32ae      	adds	r2, #174	; 0xae
 8007498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	7afa      	ldrb	r2, [r7, #11]
 80074a0:	4611      	mov	r1, r2
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	4798      	blx	r3
 80074a6:	4603      	mov	r3, r0
 80074a8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80074aa:	7dfb      	ldrb	r3, [r7, #23]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d001      	beq.n	80074b4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80074b0:	7dfb      	ldrb	r3, [r7, #23]
 80074b2:	e000      	b.n	80074b6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3718      	adds	r7, #24
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b086      	sub	sp, #24
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	60f8      	str	r0, [r7, #12]
 80074c6:	460b      	mov	r3, r1
 80074c8:	607a      	str	r2, [r7, #4]
 80074ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80074cc:	7afb      	ldrb	r3, [r7, #11]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d16f      	bne.n	80075b2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	3314      	adds	r3, #20
 80074d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d15a      	bne.n	8007598 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	689a      	ldr	r2, [r3, #8]
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d914      	bls.n	8007518 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	689a      	ldr	r2, [r3, #8]
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	1ad2      	subs	r2, r2, r3
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	461a      	mov	r2, r3
 8007502:	6879      	ldr	r1, [r7, #4]
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f001 f8ac 	bl	8008662 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800750a:	2300      	movs	r3, #0
 800750c:	2200      	movs	r2, #0
 800750e:	2100      	movs	r1, #0
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f001 fd9d 	bl	8009050 <USBD_LL_PrepareReceive>
 8007516:	e03f      	b.n	8007598 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	68da      	ldr	r2, [r3, #12]
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	429a      	cmp	r2, r3
 8007522:	d11c      	bne.n	800755e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800752c:	429a      	cmp	r2, r3
 800752e:	d316      	bcc.n	800755e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800753a:	429a      	cmp	r2, r3
 800753c:	d20f      	bcs.n	800755e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800753e:	2200      	movs	r2, #0
 8007540:	2100      	movs	r1, #0
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f001 f88d 	bl	8008662 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007550:	2300      	movs	r3, #0
 8007552:	2200      	movs	r2, #0
 8007554:	2100      	movs	r1, #0
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f001 fd7a 	bl	8009050 <USBD_LL_PrepareReceive>
 800755c:	e01c      	b.n	8007598 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b03      	cmp	r3, #3
 8007568:	d10f      	bne.n	800758a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d009      	beq.n	800758a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800758a:	2180      	movs	r1, #128	; 0x80
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f001 fcb5 	bl	8008efc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f001 f8b7 	bl	8008706 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d03a      	beq.n	8007618 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f7ff fe42 	bl	800722c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80075b0:	e032      	b.n	8007618 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80075b2:	7afb      	ldrb	r3, [r7, #11]
 80075b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	4619      	mov	r1, r3
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f000 f97f 	bl	80078c0 <USBD_CoreFindEP>
 80075c2:	4603      	mov	r3, r0
 80075c4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
 80075c8:	2bff      	cmp	r3, #255	; 0xff
 80075ca:	d025      	beq.n	8007618 <USBD_LL_DataInStage+0x15a>
 80075cc:	7dfb      	ldrb	r3, [r7, #23]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d122      	bne.n	8007618 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b03      	cmp	r3, #3
 80075dc:	d11c      	bne.n	8007618 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80075de:	7dfa      	ldrb	r2, [r7, #23]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	32ae      	adds	r2, #174	; 0xae
 80075e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d014      	beq.n	8007618 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80075ee:	7dfa      	ldrb	r2, [r7, #23]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80075f6:	7dfa      	ldrb	r2, [r7, #23]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	32ae      	adds	r2, #174	; 0xae
 80075fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	7afa      	ldrb	r2, [r7, #11]
 8007604:	4611      	mov	r1, r2
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	4798      	blx	r3
 800760a:	4603      	mov	r3, r0
 800760c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800760e:	7dbb      	ldrb	r3, [r7, #22]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d001      	beq.n	8007618 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007614:	7dbb      	ldrb	r3, [r7, #22]
 8007616:	e000      	b.n	800761a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b084      	sub	sp, #16
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800765a:	2b00      	cmp	r3, #0
 800765c:	d014      	beq.n	8007688 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00e      	beq.n	8007688 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	6852      	ldr	r2, [r2, #4]
 8007676:	b2d2      	uxtb	r2, r2
 8007678:	4611      	mov	r1, r2
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	4798      	blx	r3
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d001      	beq.n	8007688 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007684:	2303      	movs	r3, #3
 8007686:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007688:	2340      	movs	r3, #64	; 0x40
 800768a:	2200      	movs	r2, #0
 800768c:	2100      	movs	r1, #0
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f001 fbef 	bl	8008e72 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2240      	movs	r2, #64	; 0x40
 80076a0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076a4:	2340      	movs	r3, #64	; 0x40
 80076a6:	2200      	movs	r2, #0
 80076a8:	2180      	movs	r1, #128	; 0x80
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f001 fbe1 	bl	8008e72 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2240      	movs	r2, #64	; 0x40
 80076ba:	621a      	str	r2, [r3, #32]

  return ret;
 80076bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	460b      	mov	r3, r1
 80076d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	78fa      	ldrb	r2, [r7, #3]
 80076d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b083      	sub	sp, #12
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2204      	movs	r2, #4
 8007700:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007712:	b480      	push	{r7}
 8007714:	b083      	sub	sp, #12
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b04      	cmp	r3, #4
 8007724:	d106      	bne.n	8007734 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800772c:	b2da      	uxtb	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b082      	sub	sp, #8
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b03      	cmp	r3, #3
 8007754:	d110      	bne.n	8007778 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00b      	beq.n	8007778 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007766:	69db      	ldr	r3, [r3, #28]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d005      	beq.n	8007778 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007772:	69db      	ldr	r3, [r3, #28]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b082      	sub	sp, #8
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	460b      	mov	r3, r1
 800778c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	32ae      	adds	r2, #174	; 0xae
 8007798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d101      	bne.n	80077a4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e01c      	b.n	80077de <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b03      	cmp	r3, #3
 80077ae:	d115      	bne.n	80077dc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	32ae      	adds	r2, #174	; 0xae
 80077ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077be:	6a1b      	ldr	r3, [r3, #32]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00b      	beq.n	80077dc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	32ae      	adds	r2, #174	; 0xae
 80077ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d2:	6a1b      	ldr	r3, [r3, #32]
 80077d4:	78fa      	ldrb	r2, [r7, #3]
 80077d6:	4611      	mov	r1, r2
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b082      	sub	sp, #8
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	460b      	mov	r3, r1
 80077f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	32ae      	adds	r2, #174	; 0xae
 80077fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d101      	bne.n	8007808 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007804:	2303      	movs	r3, #3
 8007806:	e01c      	b.n	8007842 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b03      	cmp	r3, #3
 8007812:	d115      	bne.n	8007840 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	32ae      	adds	r2, #174	; 0xae
 800781e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00b      	beq.n	8007840 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	32ae      	adds	r2, #174	; 0xae
 8007832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007838:	78fa      	ldrb	r2, [r7, #3]
 800783a:	4611      	mov	r1, r2
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800784a:	b480      	push	{r7}
 800784c:	b083      	sub	sp, #12
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007868:	2300      	movs	r3, #0
 800786a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00e      	beq.n	800789c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	6852      	ldr	r2, [r2, #4]
 800788a:	b2d2      	uxtb	r2, r2
 800788c:	4611      	mov	r1, r2
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	4798      	blx	r3
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007898:	2303      	movs	r3, #3
 800789a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800789c:	7bfb      	ldrb	r3, [r7, #15]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b083      	sub	sp, #12
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	460b      	mov	r3, r1
 80078b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80078b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80078cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b086      	sub	sp, #24
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	460b      	mov	r3, r1
 80078e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80078ee:	2300      	movs	r3, #0
 80078f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	885b      	ldrh	r3, [r3, #2]
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	429a      	cmp	r2, r3
 8007900:	d920      	bls.n	8007944 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	b29b      	uxth	r3, r3
 8007908:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800790a:	e013      	b.n	8007934 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800790c:	f107 030a 	add.w	r3, r7, #10
 8007910:	4619      	mov	r1, r3
 8007912:	6978      	ldr	r0, [r7, #20]
 8007914:	f000 f81b 	bl	800794e <USBD_GetNextDesc>
 8007918:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	785b      	ldrb	r3, [r3, #1]
 800791e:	2b05      	cmp	r3, #5
 8007920:	d108      	bne.n	8007934 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	789b      	ldrb	r3, [r3, #2]
 800792a:	78fa      	ldrb	r2, [r7, #3]
 800792c:	429a      	cmp	r2, r3
 800792e:	d008      	beq.n	8007942 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007930:	2300      	movs	r3, #0
 8007932:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	885b      	ldrh	r3, [r3, #2]
 8007938:	b29a      	uxth	r2, r3
 800793a:	897b      	ldrh	r3, [r7, #10]
 800793c:	429a      	cmp	r2, r3
 800793e:	d8e5      	bhi.n	800790c <USBD_GetEpDesc+0x32>
 8007940:	e000      	b.n	8007944 <USBD_GetEpDesc+0x6a>
          break;
 8007942:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007944:	693b      	ldr	r3, [r7, #16]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3718      	adds	r7, #24
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800794e:	b480      	push	{r7}
 8007950:	b085      	sub	sp, #20
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	881a      	ldrh	r2, [r3, #0]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	b29b      	uxth	r3, r3
 8007966:	4413      	add	r3, r2
 8007968:	b29a      	uxth	r2, r3
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	461a      	mov	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4413      	add	r3, r2
 8007978:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800797a:	68fb      	ldr	r3, [r7, #12]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3714      	adds	r7, #20
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007988:	b480      	push	{r7}
 800798a:	b087      	sub	sp, #28
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	3301      	adds	r3, #1
 800799e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80079a6:	8a3b      	ldrh	r3, [r7, #16]
 80079a8:	021b      	lsls	r3, r3, #8
 80079aa:	b21a      	sxth	r2, r3
 80079ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	b21b      	sxth	r3, r3
 80079b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80079b6:	89fb      	ldrh	r3, [r7, #14]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	371c      	adds	r7, #28
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079da:	2b40      	cmp	r3, #64	; 0x40
 80079dc:	d005      	beq.n	80079ea <USBD_StdDevReq+0x26>
 80079de:	2b40      	cmp	r3, #64	; 0x40
 80079e0:	d857      	bhi.n	8007a92 <USBD_StdDevReq+0xce>
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00f      	beq.n	8007a06 <USBD_StdDevReq+0x42>
 80079e6:	2b20      	cmp	r3, #32
 80079e8:	d153      	bne.n	8007a92 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	32ae      	adds	r2, #174	; 0xae
 80079f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	4798      	blx	r3
 8007a00:	4603      	mov	r3, r0
 8007a02:	73fb      	strb	r3, [r7, #15]
      break;
 8007a04:	e04a      	b.n	8007a9c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	785b      	ldrb	r3, [r3, #1]
 8007a0a:	2b09      	cmp	r3, #9
 8007a0c:	d83b      	bhi.n	8007a86 <USBD_StdDevReq+0xc2>
 8007a0e:	a201      	add	r2, pc, #4	; (adr r2, 8007a14 <USBD_StdDevReq+0x50>)
 8007a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a14:	08007a69 	.word	0x08007a69
 8007a18:	08007a7d 	.word	0x08007a7d
 8007a1c:	08007a87 	.word	0x08007a87
 8007a20:	08007a73 	.word	0x08007a73
 8007a24:	08007a87 	.word	0x08007a87
 8007a28:	08007a47 	.word	0x08007a47
 8007a2c:	08007a3d 	.word	0x08007a3d
 8007a30:	08007a87 	.word	0x08007a87
 8007a34:	08007a5f 	.word	0x08007a5f
 8007a38:	08007a51 	.word	0x08007a51
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fa3c 	bl	8007ebc <USBD_GetDescriptor>
          break;
 8007a44:	e024      	b.n	8007a90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 fba1 	bl	8008190 <USBD_SetAddress>
          break;
 8007a4e:	e01f      	b.n	8007a90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007a50:	6839      	ldr	r1, [r7, #0]
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 fbe0 	bl	8008218 <USBD_SetConfig>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	73fb      	strb	r3, [r7, #15]
          break;
 8007a5c:	e018      	b.n	8007a90 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007a5e:	6839      	ldr	r1, [r7, #0]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fc83 	bl	800836c <USBD_GetConfig>
          break;
 8007a66:	e013      	b.n	8007a90 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007a68:	6839      	ldr	r1, [r7, #0]
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fcb4 	bl	80083d8 <USBD_GetStatus>
          break;
 8007a70:	e00e      	b.n	8007a90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fce3 	bl	8008440 <USBD_SetFeature>
          break;
 8007a7a:	e009      	b.n	8007a90 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fd07 	bl	8008492 <USBD_ClrFeature>
          break;
 8007a84:	e004      	b.n	8007a90 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fd5e 	bl	800854a <USBD_CtlError>
          break;
 8007a8e:	bf00      	nop
      }
      break;
 8007a90:	e004      	b.n	8007a9c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007a92:	6839      	ldr	r1, [r7, #0]
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fd58 	bl	800854a <USBD_CtlError>
      break;
 8007a9a:	bf00      	nop
  }

  return ret;
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop

08007aa8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007abe:	2b40      	cmp	r3, #64	; 0x40
 8007ac0:	d005      	beq.n	8007ace <USBD_StdItfReq+0x26>
 8007ac2:	2b40      	cmp	r3, #64	; 0x40
 8007ac4:	d852      	bhi.n	8007b6c <USBD_StdItfReq+0xc4>
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <USBD_StdItfReq+0x26>
 8007aca:	2b20      	cmp	r3, #32
 8007acc:	d14e      	bne.n	8007b6c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d840      	bhi.n	8007b5e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	889b      	ldrh	r3, [r3, #4]
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d836      	bhi.n	8007b54 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	889b      	ldrh	r3, [r3, #4]
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7ff fed9 	bl	80078a6 <USBD_CoreFindIF>
 8007af4:	4603      	mov	r3, r0
 8007af6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007af8:	7bbb      	ldrb	r3, [r7, #14]
 8007afa:	2bff      	cmp	r3, #255	; 0xff
 8007afc:	d01d      	beq.n	8007b3a <USBD_StdItfReq+0x92>
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d11a      	bne.n	8007b3a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007b04:	7bba      	ldrb	r2, [r7, #14]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	32ae      	adds	r2, #174	; 0xae
 8007b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00f      	beq.n	8007b34 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007b14:	7bba      	ldrb	r2, [r7, #14]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b1c:	7bba      	ldrb	r2, [r7, #14]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	32ae      	adds	r2, #174	; 0xae
 8007b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	6839      	ldr	r1, [r7, #0]
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	4798      	blx	r3
 8007b2e:	4603      	mov	r3, r0
 8007b30:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007b32:	e004      	b.n	8007b3e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007b34:	2303      	movs	r3, #3
 8007b36:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007b38:	e001      	b.n	8007b3e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	88db      	ldrh	r3, [r3, #6]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d110      	bne.n	8007b68 <USBD_StdItfReq+0xc0>
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10d      	bne.n	8007b68 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fdc7 	bl	80086e0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007b52:	e009      	b.n	8007b68 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007b54:	6839      	ldr	r1, [r7, #0]
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fcf7 	bl	800854a <USBD_CtlError>
          break;
 8007b5c:	e004      	b.n	8007b68 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fcf2 	bl	800854a <USBD_CtlError>
          break;
 8007b66:	e000      	b.n	8007b6a <USBD_StdItfReq+0xc2>
          break;
 8007b68:	bf00      	nop
      }
      break;
 8007b6a:	e004      	b.n	8007b76 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007b6c:	6839      	ldr	r1, [r7, #0]
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fceb 	bl	800854a <USBD_CtlError>
      break;
 8007b74:	bf00      	nop
  }

  return ret;
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	889b      	ldrh	r3, [r3, #4]
 8007b92:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b9c:	2b40      	cmp	r3, #64	; 0x40
 8007b9e:	d007      	beq.n	8007bb0 <USBD_StdEPReq+0x30>
 8007ba0:	2b40      	cmp	r3, #64	; 0x40
 8007ba2:	f200 817f 	bhi.w	8007ea4 <USBD_StdEPReq+0x324>
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d02a      	beq.n	8007c00 <USBD_StdEPReq+0x80>
 8007baa:	2b20      	cmp	r3, #32
 8007bac:	f040 817a 	bne.w	8007ea4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff fe83 	bl	80078c0 <USBD_CoreFindEP>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bbe:	7b7b      	ldrb	r3, [r7, #13]
 8007bc0:	2bff      	cmp	r3, #255	; 0xff
 8007bc2:	f000 8174 	beq.w	8007eae <USBD_StdEPReq+0x32e>
 8007bc6:	7b7b      	ldrb	r3, [r7, #13]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f040 8170 	bne.w	8007eae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007bce:	7b7a      	ldrb	r2, [r7, #13]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007bd6:	7b7a      	ldrb	r2, [r7, #13]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	32ae      	adds	r2, #174	; 0xae
 8007bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f000 8163 	beq.w	8007eae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007be8:	7b7a      	ldrb	r2, [r7, #13]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	32ae      	adds	r2, #174	; 0xae
 8007bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	4798      	blx	r3
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007bfe:	e156      	b.n	8007eae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	785b      	ldrb	r3, [r3, #1]
 8007c04:	2b03      	cmp	r3, #3
 8007c06:	d008      	beq.n	8007c1a <USBD_StdEPReq+0x9a>
 8007c08:	2b03      	cmp	r3, #3
 8007c0a:	f300 8145 	bgt.w	8007e98 <USBD_StdEPReq+0x318>
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 809b 	beq.w	8007d4a <USBD_StdEPReq+0x1ca>
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d03c      	beq.n	8007c92 <USBD_StdEPReq+0x112>
 8007c18:	e13e      	b.n	8007e98 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d002      	beq.n	8007c2c <USBD_StdEPReq+0xac>
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d016      	beq.n	8007c58 <USBD_StdEPReq+0xd8>
 8007c2a:	e02c      	b.n	8007c86 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00d      	beq.n	8007c4e <USBD_StdEPReq+0xce>
 8007c32:	7bbb      	ldrb	r3, [r7, #14]
 8007c34:	2b80      	cmp	r3, #128	; 0x80
 8007c36:	d00a      	beq.n	8007c4e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c38:	7bbb      	ldrb	r3, [r7, #14]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f001 f95d 	bl	8008efc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c42:	2180      	movs	r1, #128	; 0x80
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f001 f959 	bl	8008efc <USBD_LL_StallEP>
 8007c4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c4c:	e020      	b.n	8007c90 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007c4e:	6839      	ldr	r1, [r7, #0]
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fc7a 	bl	800854a <USBD_CtlError>
              break;
 8007c56:	e01b      	b.n	8007c90 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	885b      	ldrh	r3, [r3, #2]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10e      	bne.n	8007c7e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007c60:	7bbb      	ldrb	r3, [r7, #14]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00b      	beq.n	8007c7e <USBD_StdEPReq+0xfe>
 8007c66:	7bbb      	ldrb	r3, [r7, #14]
 8007c68:	2b80      	cmp	r3, #128	; 0x80
 8007c6a:	d008      	beq.n	8007c7e <USBD_StdEPReq+0xfe>
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	88db      	ldrh	r3, [r3, #6]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d104      	bne.n	8007c7e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c74:	7bbb      	ldrb	r3, [r7, #14]
 8007c76:	4619      	mov	r1, r3
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f001 f93f 	bl	8008efc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fd2e 	bl	80086e0 <USBD_CtlSendStatus>

              break;
 8007c84:	e004      	b.n	8007c90 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fc5e 	bl	800854a <USBD_CtlError>
              break;
 8007c8e:	bf00      	nop
          }
          break;
 8007c90:	e107      	b.n	8007ea2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d002      	beq.n	8007ca4 <USBD_StdEPReq+0x124>
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	d016      	beq.n	8007cd0 <USBD_StdEPReq+0x150>
 8007ca2:	e04b      	b.n	8007d3c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ca4:	7bbb      	ldrb	r3, [r7, #14]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00d      	beq.n	8007cc6 <USBD_StdEPReq+0x146>
 8007caa:	7bbb      	ldrb	r3, [r7, #14]
 8007cac:	2b80      	cmp	r3, #128	; 0x80
 8007cae:	d00a      	beq.n	8007cc6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cb0:	7bbb      	ldrb	r3, [r7, #14]
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f001 f921 	bl	8008efc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cba:	2180      	movs	r1, #128	; 0x80
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f001 f91d 	bl	8008efc <USBD_LL_StallEP>
 8007cc2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007cc4:	e040      	b.n	8007d48 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fc3e 	bl	800854a <USBD_CtlError>
              break;
 8007cce:	e03b      	b.n	8007d48 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	885b      	ldrh	r3, [r3, #2]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d136      	bne.n	8007d46 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007cd8:	7bbb      	ldrb	r3, [r7, #14]
 8007cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d004      	beq.n	8007cec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ce2:	7bbb      	ldrb	r3, [r7, #14]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f001 f927 	bl	8008f3a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fcf7 	bl	80086e0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007cf2:	7bbb      	ldrb	r3, [r7, #14]
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7ff fde2 	bl	80078c0 <USBD_CoreFindEP>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d00:	7b7b      	ldrb	r3, [r7, #13]
 8007d02:	2bff      	cmp	r3, #255	; 0xff
 8007d04:	d01f      	beq.n	8007d46 <USBD_StdEPReq+0x1c6>
 8007d06:	7b7b      	ldrb	r3, [r7, #13]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d11c      	bne.n	8007d46 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007d0c:	7b7a      	ldrb	r2, [r7, #13]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007d14:	7b7a      	ldrb	r2, [r7, #13]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	32ae      	adds	r2, #174	; 0xae
 8007d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d010      	beq.n	8007d46 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d24:	7b7a      	ldrb	r2, [r7, #13]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	32ae      	adds	r2, #174	; 0xae
 8007d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	4798      	blx	r3
 8007d36:	4603      	mov	r3, r0
 8007d38:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007d3a:	e004      	b.n	8007d46 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007d3c:	6839      	ldr	r1, [r7, #0]
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fc03 	bl	800854a <USBD_CtlError>
              break;
 8007d44:	e000      	b.n	8007d48 <USBD_StdEPReq+0x1c8>
              break;
 8007d46:	bf00      	nop
          }
          break;
 8007d48:	e0ab      	b.n	8007ea2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d002      	beq.n	8007d5c <USBD_StdEPReq+0x1dc>
 8007d56:	2b03      	cmp	r3, #3
 8007d58:	d032      	beq.n	8007dc0 <USBD_StdEPReq+0x240>
 8007d5a:	e097      	b.n	8007e8c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d5c:	7bbb      	ldrb	r3, [r7, #14]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d007      	beq.n	8007d72 <USBD_StdEPReq+0x1f2>
 8007d62:	7bbb      	ldrb	r3, [r7, #14]
 8007d64:	2b80      	cmp	r3, #128	; 0x80
 8007d66:	d004      	beq.n	8007d72 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fbed 	bl	800854a <USBD_CtlError>
                break;
 8007d70:	e091      	b.n	8007e96 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	da0b      	bge.n	8007d92 <USBD_StdEPReq+0x212>
 8007d7a:	7bbb      	ldrb	r3, [r7, #14]
 8007d7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d80:	4613      	mov	r3, r2
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4413      	add	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	3310      	adds	r3, #16
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	3304      	adds	r3, #4
 8007d90:	e00b      	b.n	8007daa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d92:	7bbb      	ldrb	r3, [r7, #14]
 8007d94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d98:	4613      	mov	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	4413      	add	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	4413      	add	r3, r2
 8007da8:	3304      	adds	r3, #4
 8007daa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	2200      	movs	r2, #0
 8007db0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	2202      	movs	r2, #2
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fc37 	bl	800862c <USBD_CtlSendData>
              break;
 8007dbe:	e06a      	b.n	8007e96 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007dc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	da11      	bge.n	8007dec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007dc8:	7bbb      	ldrb	r3, [r7, #14]
 8007dca:	f003 020f 	and.w	r2, r3, #15
 8007dce:	6879      	ldr	r1, [r7, #4]
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4413      	add	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	440b      	add	r3, r1
 8007dda:	3324      	adds	r3, #36	; 0x24
 8007ddc:	881b      	ldrh	r3, [r3, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d117      	bne.n	8007e12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007de2:	6839      	ldr	r1, [r7, #0]
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fbb0 	bl	800854a <USBD_CtlError>
                  break;
 8007dea:	e054      	b.n	8007e96 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007dec:	7bbb      	ldrb	r3, [r7, #14]
 8007dee:	f003 020f 	and.w	r2, r3, #15
 8007df2:	6879      	ldr	r1, [r7, #4]
 8007df4:	4613      	mov	r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	440b      	add	r3, r1
 8007dfe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e02:	881b      	ldrh	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d104      	bne.n	8007e12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fb9d 	bl	800854a <USBD_CtlError>
                  break;
 8007e10:	e041      	b.n	8007e96 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	da0b      	bge.n	8007e32 <USBD_StdEPReq+0x2b2>
 8007e1a:	7bbb      	ldrb	r3, [r7, #14]
 8007e1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e20:	4613      	mov	r3, r2
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4413      	add	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	3310      	adds	r3, #16
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	3304      	adds	r3, #4
 8007e30:	e00b      	b.n	8007e4a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e32:	7bbb      	ldrb	r3, [r7, #14]
 8007e34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e38:	4613      	mov	r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	4413      	add	r3, r2
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	4413      	add	r3, r2
 8007e48:	3304      	adds	r3, #4
 8007e4a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e4c:	7bbb      	ldrb	r3, [r7, #14]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d002      	beq.n	8007e58 <USBD_StdEPReq+0x2d8>
 8007e52:	7bbb      	ldrb	r3, [r7, #14]
 8007e54:	2b80      	cmp	r3, #128	; 0x80
 8007e56:	d103      	bne.n	8007e60 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	601a      	str	r2, [r3, #0]
 8007e5e:	e00e      	b.n	8007e7e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007e60:	7bbb      	ldrb	r3, [r7, #14]
 8007e62:	4619      	mov	r1, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f001 f887 	bl	8008f78 <USBD_LL_IsStallEP>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d003      	beq.n	8007e78 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2201      	movs	r2, #1
 8007e74:	601a      	str	r2, [r3, #0]
 8007e76:	e002      	b.n	8007e7e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	2202      	movs	r2, #2
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fbd1 	bl	800862c <USBD_CtlSendData>
              break;
 8007e8a:	e004      	b.n	8007e96 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fb5b 	bl	800854a <USBD_CtlError>
              break;
 8007e94:	bf00      	nop
          }
          break;
 8007e96:	e004      	b.n	8007ea2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fb55 	bl	800854a <USBD_CtlError>
          break;
 8007ea0:	bf00      	nop
      }
      break;
 8007ea2:	e005      	b.n	8007eb0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fb4f 	bl	800854a <USBD_CtlError>
      break;
 8007eac:	e000      	b.n	8007eb0 <USBD_StdEPReq+0x330>
      break;
 8007eae:	bf00      	nop
  }

  return ret;
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
	...

08007ebc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	885b      	ldrh	r3, [r3, #2]
 8007ed6:	0a1b      	lsrs	r3, r3, #8
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	3b01      	subs	r3, #1
 8007edc:	2b06      	cmp	r3, #6
 8007ede:	f200 8128 	bhi.w	8008132 <USBD_GetDescriptor+0x276>
 8007ee2:	a201      	add	r2, pc, #4	; (adr r2, 8007ee8 <USBD_GetDescriptor+0x2c>)
 8007ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee8:	08007f05 	.word	0x08007f05
 8007eec:	08007f1d 	.word	0x08007f1d
 8007ef0:	08007f5d 	.word	0x08007f5d
 8007ef4:	08008133 	.word	0x08008133
 8007ef8:	08008133 	.word	0x08008133
 8007efc:	080080d3 	.word	0x080080d3
 8007f00:	080080ff 	.word	0x080080ff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	7c12      	ldrb	r2, [r2, #16]
 8007f10:	f107 0108 	add.w	r1, r7, #8
 8007f14:	4610      	mov	r0, r2
 8007f16:	4798      	blx	r3
 8007f18:	60f8      	str	r0, [r7, #12]
      break;
 8007f1a:	e112      	b.n	8008142 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	7c1b      	ldrb	r3, [r3, #16]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10d      	bne.n	8007f40 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2c:	f107 0208 	add.w	r2, r7, #8
 8007f30:	4610      	mov	r0, r2
 8007f32:	4798      	blx	r3
 8007f34:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f3e:	e100      	b.n	8008142 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f48:	f107 0208 	add.w	r2, r7, #8
 8007f4c:	4610      	mov	r0, r2
 8007f4e:	4798      	blx	r3
 8007f50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	3301      	adds	r3, #1
 8007f56:	2202      	movs	r2, #2
 8007f58:	701a      	strb	r2, [r3, #0]
      break;
 8007f5a:	e0f2      	b.n	8008142 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	885b      	ldrh	r3, [r3, #2]
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b05      	cmp	r3, #5
 8007f64:	f200 80ac 	bhi.w	80080c0 <USBD_GetDescriptor+0x204>
 8007f68:	a201      	add	r2, pc, #4	; (adr r2, 8007f70 <USBD_GetDescriptor+0xb4>)
 8007f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6e:	bf00      	nop
 8007f70:	08007f89 	.word	0x08007f89
 8007f74:	08007fbd 	.word	0x08007fbd
 8007f78:	08007ff1 	.word	0x08007ff1
 8007f7c:	08008025 	.word	0x08008025
 8007f80:	08008059 	.word	0x08008059
 8007f84:	0800808d 	.word	0x0800808d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00b      	beq.n	8007fac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	7c12      	ldrb	r2, [r2, #16]
 8007fa0:	f107 0108 	add.w	r1, r7, #8
 8007fa4:	4610      	mov	r0, r2
 8007fa6:	4798      	blx	r3
 8007fa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007faa:	e091      	b.n	80080d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fac:	6839      	ldr	r1, [r7, #0]
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 facb 	bl	800854a <USBD_CtlError>
            err++;
 8007fb4:	7afb      	ldrb	r3, [r7, #11]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	72fb      	strb	r3, [r7, #11]
          break;
 8007fba:	e089      	b.n	80080d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00b      	beq.n	8007fe0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	7c12      	ldrb	r2, [r2, #16]
 8007fd4:	f107 0108 	add.w	r1, r7, #8
 8007fd8:	4610      	mov	r0, r2
 8007fda:	4798      	blx	r3
 8007fdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fde:	e077      	b.n	80080d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fab1 	bl	800854a <USBD_CtlError>
            err++;
 8007fe8:	7afb      	ldrb	r3, [r7, #11]
 8007fea:	3301      	adds	r3, #1
 8007fec:	72fb      	strb	r3, [r7, #11]
          break;
 8007fee:	e06f      	b.n	80080d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00b      	beq.n	8008014 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	7c12      	ldrb	r2, [r2, #16]
 8008008:	f107 0108 	add.w	r1, r7, #8
 800800c:	4610      	mov	r0, r2
 800800e:	4798      	blx	r3
 8008010:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008012:	e05d      	b.n	80080d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fa97 	bl	800854a <USBD_CtlError>
            err++;
 800801c:	7afb      	ldrb	r3, [r7, #11]
 800801e:	3301      	adds	r3, #1
 8008020:	72fb      	strb	r3, [r7, #11]
          break;
 8008022:	e055      	b.n	80080d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00b      	beq.n	8008048 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	7c12      	ldrb	r2, [r2, #16]
 800803c:	f107 0108 	add.w	r1, r7, #8
 8008040:	4610      	mov	r0, r2
 8008042:	4798      	blx	r3
 8008044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008046:	e043      	b.n	80080d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fa7d 	bl	800854a <USBD_CtlError>
            err++;
 8008050:	7afb      	ldrb	r3, [r7, #11]
 8008052:	3301      	adds	r3, #1
 8008054:	72fb      	strb	r3, [r7, #11]
          break;
 8008056:	e03b      	b.n	80080d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800805e:	695b      	ldr	r3, [r3, #20]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00b      	beq.n	800807c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800806a:	695b      	ldr	r3, [r3, #20]
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	7c12      	ldrb	r2, [r2, #16]
 8008070:	f107 0108 	add.w	r1, r7, #8
 8008074:	4610      	mov	r0, r2
 8008076:	4798      	blx	r3
 8008078:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800807a:	e029      	b.n	80080d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fa63 	bl	800854a <USBD_CtlError>
            err++;
 8008084:	7afb      	ldrb	r3, [r7, #11]
 8008086:	3301      	adds	r3, #1
 8008088:	72fb      	strb	r3, [r7, #11]
          break;
 800808a:	e021      	b.n	80080d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00b      	beq.n	80080b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	7c12      	ldrb	r2, [r2, #16]
 80080a4:	f107 0108 	add.w	r1, r7, #8
 80080a8:	4610      	mov	r0, r2
 80080aa:	4798      	blx	r3
 80080ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ae:	e00f      	b.n	80080d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fa49 	bl	800854a <USBD_CtlError>
            err++;
 80080b8:	7afb      	ldrb	r3, [r7, #11]
 80080ba:	3301      	adds	r3, #1
 80080bc:	72fb      	strb	r3, [r7, #11]
          break;
 80080be:	e007      	b.n	80080d0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fa41 	bl	800854a <USBD_CtlError>
          err++;
 80080c8:	7afb      	ldrb	r3, [r7, #11]
 80080ca:	3301      	adds	r3, #1
 80080cc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80080ce:	bf00      	nop
      }
      break;
 80080d0:	e037      	b.n	8008142 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	7c1b      	ldrb	r3, [r3, #16]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d109      	bne.n	80080ee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e2:	f107 0208 	add.w	r2, r7, #8
 80080e6:	4610      	mov	r0, r2
 80080e8:	4798      	blx	r3
 80080ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080ec:	e029      	b.n	8008142 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fa2a 	bl	800854a <USBD_CtlError>
        err++;
 80080f6:	7afb      	ldrb	r3, [r7, #11]
 80080f8:	3301      	adds	r3, #1
 80080fa:	72fb      	strb	r3, [r7, #11]
      break;
 80080fc:	e021      	b.n	8008142 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	7c1b      	ldrb	r3, [r3, #16]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10d      	bne.n	8008122 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800810c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810e:	f107 0208 	add.w	r2, r7, #8
 8008112:	4610      	mov	r0, r2
 8008114:	4798      	blx	r3
 8008116:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	3301      	adds	r3, #1
 800811c:	2207      	movs	r2, #7
 800811e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008120:	e00f      	b.n	8008142 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fa10 	bl	800854a <USBD_CtlError>
        err++;
 800812a:	7afb      	ldrb	r3, [r7, #11]
 800812c:	3301      	adds	r3, #1
 800812e:	72fb      	strb	r3, [r7, #11]
      break;
 8008130:	e007      	b.n	8008142 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fa08 	bl	800854a <USBD_CtlError>
      err++;
 800813a:	7afb      	ldrb	r3, [r7, #11]
 800813c:	3301      	adds	r3, #1
 800813e:	72fb      	strb	r3, [r7, #11]
      break;
 8008140:	bf00      	nop
  }

  if (err != 0U)
 8008142:	7afb      	ldrb	r3, [r7, #11]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d11e      	bne.n	8008186 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	88db      	ldrh	r3, [r3, #6]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d016      	beq.n	800817e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008150:	893b      	ldrh	r3, [r7, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00e      	beq.n	8008174 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	88da      	ldrh	r2, [r3, #6]
 800815a:	893b      	ldrh	r3, [r7, #8]
 800815c:	4293      	cmp	r3, r2
 800815e:	bf28      	it	cs
 8008160:	4613      	movcs	r3, r2
 8008162:	b29b      	uxth	r3, r3
 8008164:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008166:	893b      	ldrh	r3, [r7, #8]
 8008168:	461a      	mov	r2, r3
 800816a:	68f9      	ldr	r1, [r7, #12]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fa5d 	bl	800862c <USBD_CtlSendData>
 8008172:	e009      	b.n	8008188 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f9e7 	bl	800854a <USBD_CtlError>
 800817c:	e004      	b.n	8008188 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 faae 	bl	80086e0 <USBD_CtlSendStatus>
 8008184:	e000      	b.n	8008188 <USBD_GetDescriptor+0x2cc>
    return;
 8008186:	bf00      	nop
  }
}
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop

08008190 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	889b      	ldrh	r3, [r3, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d131      	bne.n	8008206 <USBD_SetAddress+0x76>
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	88db      	ldrh	r3, [r3, #6]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d12d      	bne.n	8008206 <USBD_SetAddress+0x76>
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	885b      	ldrh	r3, [r3, #2]
 80081ae:	2b7f      	cmp	r3, #127	; 0x7f
 80081b0:	d829      	bhi.n	8008206 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	885b      	ldrh	r3, [r3, #2]
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b03      	cmp	r3, #3
 80081c8:	d104      	bne.n	80081d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f9bc 	bl	800854a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081d2:	e01d      	b.n	8008210 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	7bfa      	ldrb	r2, [r7, #15]
 80081d8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fef5 	bl	8008fd0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fa7a 	bl	80086e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d004      	beq.n	80081fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2202      	movs	r2, #2
 80081f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081fa:	e009      	b.n	8008210 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008204:	e004      	b.n	8008210 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f99e 	bl	800854a <USBD_CtlError>
  }
}
 800820e:	bf00      	nop
 8008210:	bf00      	nop
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	885b      	ldrh	r3, [r3, #2]
 800822a:	b2da      	uxtb	r2, r3
 800822c:	4b4e      	ldr	r3, [pc, #312]	; (8008368 <USBD_SetConfig+0x150>)
 800822e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008230:	4b4d      	ldr	r3, [pc, #308]	; (8008368 <USBD_SetConfig+0x150>)
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d905      	bls.n	8008244 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f985 	bl	800854a <USBD_CtlError>
    return USBD_FAIL;
 8008240:	2303      	movs	r3, #3
 8008242:	e08c      	b.n	800835e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800824a:	b2db      	uxtb	r3, r3
 800824c:	2b02      	cmp	r3, #2
 800824e:	d002      	beq.n	8008256 <USBD_SetConfig+0x3e>
 8008250:	2b03      	cmp	r3, #3
 8008252:	d029      	beq.n	80082a8 <USBD_SetConfig+0x90>
 8008254:	e075      	b.n	8008342 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008256:	4b44      	ldr	r3, [pc, #272]	; (8008368 <USBD_SetConfig+0x150>)
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d020      	beq.n	80082a0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800825e:	4b42      	ldr	r3, [pc, #264]	; (8008368 <USBD_SetConfig+0x150>)
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	461a      	mov	r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008268:	4b3f      	ldr	r3, [pc, #252]	; (8008368 <USBD_SetConfig+0x150>)
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	4619      	mov	r1, r3
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f7fe ffe7 	bl	8007242 <USBD_SetClassConfig>
 8008274:	4603      	mov	r3, r0
 8008276:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008278:	7bfb      	ldrb	r3, [r7, #15]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d008      	beq.n	8008290 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f962 	bl	800854a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2202      	movs	r2, #2
 800828a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800828e:	e065      	b.n	800835c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fa25 	bl	80086e0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2203      	movs	r2, #3
 800829a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800829e:	e05d      	b.n	800835c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fa1d 	bl	80086e0 <USBD_CtlSendStatus>
      break;
 80082a6:	e059      	b.n	800835c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80082a8:	4b2f      	ldr	r3, [pc, #188]	; (8008368 <USBD_SetConfig+0x150>)
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d112      	bne.n	80082d6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2202      	movs	r2, #2
 80082b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80082b8:	4b2b      	ldr	r3, [pc, #172]	; (8008368 <USBD_SetConfig+0x150>)
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	461a      	mov	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80082c2:	4b29      	ldr	r3, [pc, #164]	; (8008368 <USBD_SetConfig+0x150>)
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	4619      	mov	r1, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7fe ffd6 	bl	800727a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fa06 	bl	80086e0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80082d4:	e042      	b.n	800835c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80082d6:	4b24      	ldr	r3, [pc, #144]	; (8008368 <USBD_SetConfig+0x150>)
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	461a      	mov	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d02a      	beq.n	800833a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	4619      	mov	r1, r3
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f7fe ffc4 	bl	800727a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80082f2:	4b1d      	ldr	r3, [pc, #116]	; (8008368 <USBD_SetConfig+0x150>)
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	461a      	mov	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80082fc:	4b1a      	ldr	r3, [pc, #104]	; (8008368 <USBD_SetConfig+0x150>)
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	4619      	mov	r1, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f7fe ff9d 	bl	8007242 <USBD_SetClassConfig>
 8008308:	4603      	mov	r3, r0
 800830a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800830c:	7bfb      	ldrb	r3, [r7, #15]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00f      	beq.n	8008332 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008312:	6839      	ldr	r1, [r7, #0]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f918 	bl	800854a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	b2db      	uxtb	r3, r3
 8008320:	4619      	mov	r1, r3
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f7fe ffa9 	bl	800727a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2202      	movs	r2, #2
 800832c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008330:	e014      	b.n	800835c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f9d4 	bl	80086e0 <USBD_CtlSendStatus>
      break;
 8008338:	e010      	b.n	800835c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f9d0 	bl	80086e0 <USBD_CtlSendStatus>
      break;
 8008340:	e00c      	b.n	800835c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 f900 	bl	800854a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800834a:	4b07      	ldr	r3, [pc, #28]	; (8008368 <USBD_SetConfig+0x150>)
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	4619      	mov	r1, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7fe ff92 	bl	800727a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008356:	2303      	movs	r3, #3
 8008358:	73fb      	strb	r3, [r7, #15]
      break;
 800835a:	bf00      	nop
  }

  return ret;
 800835c:	7bfb      	ldrb	r3, [r7, #15]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	20000248 	.word	0x20000248

0800836c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	88db      	ldrh	r3, [r3, #6]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d004      	beq.n	8008388 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800837e:	6839      	ldr	r1, [r7, #0]
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f8e2 	bl	800854a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008386:	e023      	b.n	80083d0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b02      	cmp	r3, #2
 8008392:	dc02      	bgt.n	800839a <USBD_GetConfig+0x2e>
 8008394:	2b00      	cmp	r3, #0
 8008396:	dc03      	bgt.n	80083a0 <USBD_GetConfig+0x34>
 8008398:	e015      	b.n	80083c6 <USBD_GetConfig+0x5a>
 800839a:	2b03      	cmp	r3, #3
 800839c:	d00b      	beq.n	80083b6 <USBD_GetConfig+0x4a>
 800839e:	e012      	b.n	80083c6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	3308      	adds	r3, #8
 80083aa:	2201      	movs	r2, #1
 80083ac:	4619      	mov	r1, r3
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f93c 	bl	800862c <USBD_CtlSendData>
        break;
 80083b4:	e00c      	b.n	80083d0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	3304      	adds	r3, #4
 80083ba:	2201      	movs	r2, #1
 80083bc:	4619      	mov	r1, r3
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f934 	bl	800862c <USBD_CtlSendData>
        break;
 80083c4:	e004      	b.n	80083d0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80083c6:	6839      	ldr	r1, [r7, #0]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 f8be 	bl	800854a <USBD_CtlError>
        break;
 80083ce:	bf00      	nop
}
 80083d0:	bf00      	nop
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	3b01      	subs	r3, #1
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d81e      	bhi.n	800842e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	88db      	ldrh	r3, [r3, #6]
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	d004      	beq.n	8008402 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f8a5 	bl	800854a <USBD_CtlError>
        break;
 8008400:	e01a      	b.n	8008438 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2201      	movs	r2, #1
 8008406:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800840e:	2b00      	cmp	r3, #0
 8008410:	d005      	beq.n	800841e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	f043 0202 	orr.w	r2, r3, #2
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	330c      	adds	r3, #12
 8008422:	2202      	movs	r2, #2
 8008424:	4619      	mov	r1, r3
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f900 	bl	800862c <USBD_CtlSendData>
      break;
 800842c:	e004      	b.n	8008438 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800842e:	6839      	ldr	r1, [r7, #0]
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f88a 	bl	800854a <USBD_CtlError>
      break;
 8008436:	bf00      	nop
  }
}
 8008438:	bf00      	nop
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	885b      	ldrh	r3, [r3, #2]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d107      	bne.n	8008462 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2201      	movs	r2, #1
 8008456:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f940 	bl	80086e0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008460:	e013      	b.n	800848a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	885b      	ldrh	r3, [r3, #2]
 8008466:	2b02      	cmp	r3, #2
 8008468:	d10b      	bne.n	8008482 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	889b      	ldrh	r3, [r3, #4]
 800846e:	0a1b      	lsrs	r3, r3, #8
 8008470:	b29b      	uxth	r3, r3
 8008472:	b2da      	uxtb	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f930 	bl	80086e0 <USBD_CtlSendStatus>
}
 8008480:	e003      	b.n	800848a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008482:	6839      	ldr	r1, [r7, #0]
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 f860 	bl	800854a <USBD_CtlError>
}
 800848a:	bf00      	nop
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b082      	sub	sp, #8
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
 800849a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	3b01      	subs	r3, #1
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d80b      	bhi.n	80084c2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	885b      	ldrh	r3, [r3, #2]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d10c      	bne.n	80084cc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f910 	bl	80086e0 <USBD_CtlSendStatus>
      }
      break;
 80084c0:	e004      	b.n	80084cc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f840 	bl	800854a <USBD_CtlError>
      break;
 80084ca:	e000      	b.n	80084ce <USBD_ClrFeature+0x3c>
      break;
 80084cc:	bf00      	nop
  }
}
 80084ce:	bf00      	nop
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b084      	sub	sp, #16
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	781a      	ldrb	r2, [r3, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	3301      	adds	r3, #1
 80084f0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	781a      	ldrb	r2, [r3, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	3301      	adds	r3, #1
 80084fe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f7ff fa41 	bl	8007988 <SWAPBYTE>
 8008506:	4603      	mov	r3, r0
 8008508:	461a      	mov	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3301      	adds	r3, #1
 8008512:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	3301      	adds	r3, #1
 8008518:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f7ff fa34 	bl	8007988 <SWAPBYTE>
 8008520:	4603      	mov	r3, r0
 8008522:	461a      	mov	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	3301      	adds	r3, #1
 800852c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	3301      	adds	r3, #1
 8008532:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f7ff fa27 	bl	8007988 <SWAPBYTE>
 800853a:	4603      	mov	r3, r0
 800853c:	461a      	mov	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	80da      	strh	r2, [r3, #6]
}
 8008542:	bf00      	nop
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b082      	sub	sp, #8
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008554:	2180      	movs	r1, #128	; 0x80
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fcd0 	bl	8008efc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800855c:	2100      	movs	r1, #0
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fccc 	bl	8008efc <USBD_LL_StallEP>
}
 8008564:	bf00      	nop
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b086      	sub	sp, #24
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008578:	2300      	movs	r3, #0
 800857a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d036      	beq.n	80085f0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008586:	6938      	ldr	r0, [r7, #16]
 8008588:	f000 f836 	bl	80085f8 <USBD_GetLen>
 800858c:	4603      	mov	r3, r0
 800858e:	3301      	adds	r3, #1
 8008590:	b29b      	uxth	r3, r3
 8008592:	005b      	lsls	r3, r3, #1
 8008594:	b29a      	uxth	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800859a:	7dfb      	ldrb	r3, [r7, #23]
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	4413      	add	r3, r2
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	7812      	ldrb	r2, [r2, #0]
 80085a4:	701a      	strb	r2, [r3, #0]
  idx++;
 80085a6:	7dfb      	ldrb	r3, [r7, #23]
 80085a8:	3301      	adds	r3, #1
 80085aa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80085ac:	7dfb      	ldrb	r3, [r7, #23]
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	4413      	add	r3, r2
 80085b2:	2203      	movs	r2, #3
 80085b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80085b6:	7dfb      	ldrb	r3, [r7, #23]
 80085b8:	3301      	adds	r3, #1
 80085ba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80085bc:	e013      	b.n	80085e6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80085be:	7dfb      	ldrb	r3, [r7, #23]
 80085c0:	68ba      	ldr	r2, [r7, #8]
 80085c2:	4413      	add	r3, r2
 80085c4:	693a      	ldr	r2, [r7, #16]
 80085c6:	7812      	ldrb	r2, [r2, #0]
 80085c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	3301      	adds	r3, #1
 80085ce:	613b      	str	r3, [r7, #16]
    idx++;
 80085d0:	7dfb      	ldrb	r3, [r7, #23]
 80085d2:	3301      	adds	r3, #1
 80085d4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80085d6:	7dfb      	ldrb	r3, [r7, #23]
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	4413      	add	r3, r2
 80085dc:	2200      	movs	r2, #0
 80085de:	701a      	strb	r2, [r3, #0]
    idx++;
 80085e0:	7dfb      	ldrb	r3, [r7, #23]
 80085e2:	3301      	adds	r3, #1
 80085e4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1e7      	bne.n	80085be <USBD_GetString+0x52>
 80085ee:	e000      	b.n	80085f2 <USBD_GetString+0x86>
    return;
 80085f0:	bf00      	nop
  }
}
 80085f2:	3718      	adds	r7, #24
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008600:	2300      	movs	r3, #0
 8008602:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008608:	e005      	b.n	8008616 <USBD_GetLen+0x1e>
  {
    len++;
 800860a:	7bfb      	ldrb	r3, [r7, #15]
 800860c:	3301      	adds	r3, #1
 800860e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	3301      	adds	r3, #1
 8008614:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1f5      	bne.n	800860a <USBD_GetLen+0x12>
  }

  return len;
 800861e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2202      	movs	r2, #2
 800863c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	68ba      	ldr	r2, [r7, #8]
 8008650:	2100      	movs	r1, #0
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f000 fcdb 	bl	800900e <USBD_LL_Transmit>

  return USBD_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b084      	sub	sp, #16
 8008666:	af00      	add	r7, sp, #0
 8008668:	60f8      	str	r0, [r7, #12]
 800866a:	60b9      	str	r1, [r7, #8]
 800866c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	2100      	movs	r1, #0
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f000 fcca 	bl	800900e <USBD_LL_Transmit>

  return USBD_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2203      	movs	r2, #3
 8008694:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	68ba      	ldr	r2, [r7, #8]
 80086ac:	2100      	movs	r1, #0
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f000 fcce 	bl	8009050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b084      	sub	sp, #16
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	60f8      	str	r0, [r7, #12]
 80086c6:	60b9      	str	r1, [r7, #8]
 80086c8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	2100      	movs	r1, #0
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 fcbd 	bl	8009050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2204      	movs	r2, #4
 80086ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80086f0:	2300      	movs	r3, #0
 80086f2:	2200      	movs	r2, #0
 80086f4:	2100      	movs	r1, #0
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 fc89 	bl	800900e <USBD_LL_Transmit>

  return USBD_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2205      	movs	r2, #5
 8008712:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008716:	2300      	movs	r3, #0
 8008718:	2200      	movs	r2, #0
 800871a:	2100      	movs	r1, #0
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fc97 	bl	8009050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3708      	adds	r7, #8
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008730:	2200      	movs	r2, #0
 8008732:	4912      	ldr	r1, [pc, #72]	; (800877c <MX_USB_DEVICE_Init+0x50>)
 8008734:	4812      	ldr	r0, [pc, #72]	; (8008780 <MX_USB_DEVICE_Init+0x54>)
 8008736:	f7fe fd07 	bl	8007148 <USBD_Init>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d001      	beq.n	8008744 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008740:	f7f8 fdea 	bl	8001318 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008744:	490f      	ldr	r1, [pc, #60]	; (8008784 <MX_USB_DEVICE_Init+0x58>)
 8008746:	480e      	ldr	r0, [pc, #56]	; (8008780 <MX_USB_DEVICE_Init+0x54>)
 8008748:	f7fe fd2e 	bl	80071a8 <USBD_RegisterClass>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008752:	f7f8 fde1 	bl	8001318 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008756:	490c      	ldr	r1, [pc, #48]	; (8008788 <MX_USB_DEVICE_Init+0x5c>)
 8008758:	4809      	ldr	r0, [pc, #36]	; (8008780 <MX_USB_DEVICE_Init+0x54>)
 800875a:	f7fe fc65 	bl	8007028 <USBD_CDC_RegisterInterface>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d001      	beq.n	8008768 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008764:	f7f8 fdd8 	bl	8001318 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008768:	4805      	ldr	r0, [pc, #20]	; (8008780 <MX_USB_DEVICE_Init+0x54>)
 800876a:	f7fe fd53 	bl	8007214 <USBD_Start>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d001      	beq.n	8008778 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008774:	f7f8 fdd0 	bl	8001318 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008778:	bf00      	nop
 800877a:	bd80      	pop	{r7, pc}
 800877c:	200000ac 	.word	0x200000ac
 8008780:	2000024c 	.word	0x2000024c
 8008784:	20000018 	.word	0x20000018
 8008788:	20000098 	.word	0x20000098

0800878c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008790:	2200      	movs	r2, #0
 8008792:	4905      	ldr	r1, [pc, #20]	; (80087a8 <CDC_Init_FS+0x1c>)
 8008794:	4805      	ldr	r0, [pc, #20]	; (80087ac <CDC_Init_FS+0x20>)
 8008796:	f7fe fc61 	bl	800705c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800879a:	4905      	ldr	r1, [pc, #20]	; (80087b0 <CDC_Init_FS+0x24>)
 800879c:	4803      	ldr	r0, [pc, #12]	; (80087ac <CDC_Init_FS+0x20>)
 800879e:	f7fe fc7f 	bl	80070a0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80087a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	20000d28 	.word	0x20000d28
 80087ac:	2000024c 	.word	0x2000024c
 80087b0:	20000528 	.word	0x20000528

080087b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80087b4:	b480      	push	{r7}
 80087b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80087b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	4603      	mov	r3, r0
 80087cc:	6039      	str	r1, [r7, #0]
 80087ce:	71fb      	strb	r3, [r7, #7]
 80087d0:	4613      	mov	r3, r2
 80087d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80087d4:	79fb      	ldrb	r3, [r7, #7]
 80087d6:	2b23      	cmp	r3, #35	; 0x23
 80087d8:	d84a      	bhi.n	8008870 <CDC_Control_FS+0xac>
 80087da:	a201      	add	r2, pc, #4	; (adr r2, 80087e0 <CDC_Control_FS+0x1c>)
 80087dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e0:	08008871 	.word	0x08008871
 80087e4:	08008871 	.word	0x08008871
 80087e8:	08008871 	.word	0x08008871
 80087ec:	08008871 	.word	0x08008871
 80087f0:	08008871 	.word	0x08008871
 80087f4:	08008871 	.word	0x08008871
 80087f8:	08008871 	.word	0x08008871
 80087fc:	08008871 	.word	0x08008871
 8008800:	08008871 	.word	0x08008871
 8008804:	08008871 	.word	0x08008871
 8008808:	08008871 	.word	0x08008871
 800880c:	08008871 	.word	0x08008871
 8008810:	08008871 	.word	0x08008871
 8008814:	08008871 	.word	0x08008871
 8008818:	08008871 	.word	0x08008871
 800881c:	08008871 	.word	0x08008871
 8008820:	08008871 	.word	0x08008871
 8008824:	08008871 	.word	0x08008871
 8008828:	08008871 	.word	0x08008871
 800882c:	08008871 	.word	0x08008871
 8008830:	08008871 	.word	0x08008871
 8008834:	08008871 	.word	0x08008871
 8008838:	08008871 	.word	0x08008871
 800883c:	08008871 	.word	0x08008871
 8008840:	08008871 	.word	0x08008871
 8008844:	08008871 	.word	0x08008871
 8008848:	08008871 	.word	0x08008871
 800884c:	08008871 	.word	0x08008871
 8008850:	08008871 	.word	0x08008871
 8008854:	08008871 	.word	0x08008871
 8008858:	08008871 	.word	0x08008871
 800885c:	08008871 	.word	0x08008871
 8008860:	08008871 	.word	0x08008871
 8008864:	08008871 	.word	0x08008871
 8008868:	08008871 	.word	0x08008871
 800886c:	08008871 	.word	0x08008871
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008870:	bf00      	nop
  }

  return (USBD_OK);
 8008872:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008874:	4618      	mov	r0, r3
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 /* USER CODE BEGIN 6 */
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800888a:	6879      	ldr	r1, [r7, #4]
 800888c:	480f      	ldr	r0, [pc, #60]	; (80088cc <CDC_Receive_FS+0x4c>)
 800888e:	f7fe fc07 	bl	80070a0 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008892:	480e      	ldr	r0, [pc, #56]	; (80088cc <CDC_Receive_FS+0x4c>)
 8008894:	f7fe fc22 	bl	80070dc <USBD_CDC_ReceivePacket>
	  memset (buffer, '\0', 3);  // clearing the buffer
 8008898:	2203      	movs	r2, #3
 800889a:	2100      	movs	r1, #0
 800889c:	480c      	ldr	r0, [pc, #48]	; (80088d0 <CDC_Receive_FS+0x50>)
 800889e:	f000 fc81 	bl	80091a4 <memset>
	  uint8_t len = (uint8_t)*Len;
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	73fb      	strb	r3, [r7, #15]
	  memcpy(buffer, Buf, len);  // copying the value that we sent
 80088a8:	7bfb      	ldrb	r3, [r7, #15]
 80088aa:	461a      	mov	r2, r3
 80088ac:	6879      	ldr	r1, [r7, #4]
 80088ae:	4808      	ldr	r0, [pc, #32]	; (80088d0 <CDC_Receive_FS+0x50>)
 80088b0:	f000 fc6a 	bl	8009188 <memcpy>
	  memset(Buf, '\0', len); //clearing
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
 80088b6:	461a      	mov	r2, r3
 80088b8:	2100      	movs	r1, #0
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 fc72 	bl	80091a4 <memset>
	  return (USBD_OK);
 80088c0:	2300      	movs	r3, #0
	  /* USER CODE END 6 */
  /* USER CODE END 6 */
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	2000024c 	.word	0x2000024c
 80088d0:	20000120 	.word	0x20000120

080088d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b087      	sub	sp, #28
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	4613      	mov	r3, r2
 80088e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80088e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	371c      	adds	r7, #28
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
	...

080088f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	4603      	mov	r3, r0
 8008900:	6039      	str	r1, [r7, #0]
 8008902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	2212      	movs	r2, #18
 8008908:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800890a:	4b03      	ldr	r3, [pc, #12]	; (8008918 <USBD_FS_DeviceDescriptor+0x20>)
}
 800890c:	4618      	mov	r0, r3
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	200000c8 	.word	0x200000c8

0800891c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	4603      	mov	r3, r0
 8008924:	6039      	str	r1, [r7, #0]
 8008926:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2204      	movs	r2, #4
 800892c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800892e:	4b03      	ldr	r3, [pc, #12]	; (800893c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008930:	4618      	mov	r0, r3
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr
 800893c:	200000dc 	.word	0x200000dc

08008940 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	4603      	mov	r3, r0
 8008948:	6039      	str	r1, [r7, #0]
 800894a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800894c:	79fb      	ldrb	r3, [r7, #7]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d105      	bne.n	800895e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008952:	683a      	ldr	r2, [r7, #0]
 8008954:	4907      	ldr	r1, [pc, #28]	; (8008974 <USBD_FS_ProductStrDescriptor+0x34>)
 8008956:	4808      	ldr	r0, [pc, #32]	; (8008978 <USBD_FS_ProductStrDescriptor+0x38>)
 8008958:	f7ff fe08 	bl	800856c <USBD_GetString>
 800895c:	e004      	b.n	8008968 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	4904      	ldr	r1, [pc, #16]	; (8008974 <USBD_FS_ProductStrDescriptor+0x34>)
 8008962:	4805      	ldr	r0, [pc, #20]	; (8008978 <USBD_FS_ProductStrDescriptor+0x38>)
 8008964:	f7ff fe02 	bl	800856c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008968:	4b02      	ldr	r3, [pc, #8]	; (8008974 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800896a:	4618      	mov	r0, r3
 800896c:	3708      	adds	r7, #8
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	20001528 	.word	0x20001528
 8008978:	08009210 	.word	0x08009210

0800897c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	4603      	mov	r3, r0
 8008984:	6039      	str	r1, [r7, #0]
 8008986:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008988:	683a      	ldr	r2, [r7, #0]
 800898a:	4904      	ldr	r1, [pc, #16]	; (800899c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800898c:	4804      	ldr	r0, [pc, #16]	; (80089a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800898e:	f7ff fded 	bl	800856c <USBD_GetString>
  return USBD_StrDesc;
 8008992:	4b02      	ldr	r3, [pc, #8]	; (800899c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008994:	4618      	mov	r0, r3
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	20001528 	.word	0x20001528
 80089a0:	08009228 	.word	0x08009228

080089a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	4603      	mov	r3, r0
 80089ac:	6039      	str	r1, [r7, #0]
 80089ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	221a      	movs	r2, #26
 80089b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80089b6:	f000 f843 	bl	8008a40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80089ba:	4b02      	ldr	r3, [pc, #8]	; (80089c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	200000e0 	.word	0x200000e0

080089c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	4603      	mov	r3, r0
 80089d0:	6039      	str	r1, [r7, #0]
 80089d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80089d4:	79fb      	ldrb	r3, [r7, #7]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d105      	bne.n	80089e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	4907      	ldr	r1, [pc, #28]	; (80089fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80089de:	4808      	ldr	r0, [pc, #32]	; (8008a00 <USBD_FS_ConfigStrDescriptor+0x38>)
 80089e0:	f7ff fdc4 	bl	800856c <USBD_GetString>
 80089e4:	e004      	b.n	80089f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80089e6:	683a      	ldr	r2, [r7, #0]
 80089e8:	4904      	ldr	r1, [pc, #16]	; (80089fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80089ea:	4805      	ldr	r0, [pc, #20]	; (8008a00 <USBD_FS_ConfigStrDescriptor+0x38>)
 80089ec:	f7ff fdbe 	bl	800856c <USBD_GetString>
  }
  return USBD_StrDesc;
 80089f0:	4b02      	ldr	r3, [pc, #8]	; (80089fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	20001528 	.word	0x20001528
 8008a00:	0800923c 	.word	0x0800923c

08008a04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	6039      	str	r1, [r7, #0]
 8008a0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a10:	79fb      	ldrb	r3, [r7, #7]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d105      	bne.n	8008a22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	4907      	ldr	r1, [pc, #28]	; (8008a38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a1a:	4808      	ldr	r0, [pc, #32]	; (8008a3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a1c:	f7ff fda6 	bl	800856c <USBD_GetString>
 8008a20:	e004      	b.n	8008a2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a22:	683a      	ldr	r2, [r7, #0]
 8008a24:	4904      	ldr	r1, [pc, #16]	; (8008a38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a26:	4805      	ldr	r0, [pc, #20]	; (8008a3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a28:	f7ff fda0 	bl	800856c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a2c:	4b02      	ldr	r3, [pc, #8]	; (8008a38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	20001528 	.word	0x20001528
 8008a3c:	08009248 	.word	0x08009248

08008a40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008a46:	4b0f      	ldr	r3, [pc, #60]	; (8008a84 <Get_SerialNum+0x44>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008a4c:	4b0e      	ldr	r3, [pc, #56]	; (8008a88 <Get_SerialNum+0x48>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008a52:	4b0e      	ldr	r3, [pc, #56]	; (8008a8c <Get_SerialNum+0x4c>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d009      	beq.n	8008a7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008a66:	2208      	movs	r2, #8
 8008a68:	4909      	ldr	r1, [pc, #36]	; (8008a90 <Get_SerialNum+0x50>)
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f000 f814 	bl	8008a98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008a70:	2204      	movs	r2, #4
 8008a72:	4908      	ldr	r1, [pc, #32]	; (8008a94 <Get_SerialNum+0x54>)
 8008a74:	68b8      	ldr	r0, [r7, #8]
 8008a76:	f000 f80f 	bl	8008a98 <IntToUnicode>
  }
}
 8008a7a:	bf00      	nop
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	1fff7a10 	.word	0x1fff7a10
 8008a88:	1fff7a14 	.word	0x1fff7a14
 8008a8c:	1fff7a18 	.word	0x1fff7a18
 8008a90:	200000e2 	.word	0x200000e2
 8008a94:	200000f2 	.word	0x200000f2

08008a98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b087      	sub	sp, #28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008aaa:	2300      	movs	r3, #0
 8008aac:	75fb      	strb	r3, [r7, #23]
 8008aae:	e027      	b.n	8008b00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	0f1b      	lsrs	r3, r3, #28
 8008ab4:	2b09      	cmp	r3, #9
 8008ab6:	d80b      	bhi.n	8008ad0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	0f1b      	lsrs	r3, r3, #28
 8008abc:	b2da      	uxtb	r2, r3
 8008abe:	7dfb      	ldrb	r3, [r7, #23]
 8008ac0:	005b      	lsls	r3, r3, #1
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	440b      	add	r3, r1
 8008ac8:	3230      	adds	r2, #48	; 0x30
 8008aca:	b2d2      	uxtb	r2, r2
 8008acc:	701a      	strb	r2, [r3, #0]
 8008ace:	e00a      	b.n	8008ae6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	0f1b      	lsrs	r3, r3, #28
 8008ad4:	b2da      	uxtb	r2, r3
 8008ad6:	7dfb      	ldrb	r3, [r7, #23]
 8008ad8:	005b      	lsls	r3, r3, #1
 8008ada:	4619      	mov	r1, r3
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	440b      	add	r3, r1
 8008ae0:	3237      	adds	r2, #55	; 0x37
 8008ae2:	b2d2      	uxtb	r2, r2
 8008ae4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	011b      	lsls	r3, r3, #4
 8008aea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008aec:	7dfb      	ldrb	r3, [r7, #23]
 8008aee:	005b      	lsls	r3, r3, #1
 8008af0:	3301      	adds	r3, #1
 8008af2:	68ba      	ldr	r2, [r7, #8]
 8008af4:	4413      	add	r3, r2
 8008af6:	2200      	movs	r2, #0
 8008af8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008afa:	7dfb      	ldrb	r3, [r7, #23]
 8008afc:	3301      	adds	r3, #1
 8008afe:	75fb      	strb	r3, [r7, #23]
 8008b00:	7dfa      	ldrb	r2, [r7, #23]
 8008b02:	79fb      	ldrb	r3, [r7, #7]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d3d3      	bcc.n	8008ab0 <IntToUnicode+0x18>
  }
}
 8008b08:	bf00      	nop
 8008b0a:	bf00      	nop
 8008b0c:	371c      	adds	r7, #28
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr
	...

08008b18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b08a      	sub	sp, #40	; 0x28
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b20:	f107 0314 	add.w	r3, r7, #20
 8008b24:	2200      	movs	r2, #0
 8008b26:	601a      	str	r2, [r3, #0]
 8008b28:	605a      	str	r2, [r3, #4]
 8008b2a:	609a      	str	r2, [r3, #8]
 8008b2c:	60da      	str	r2, [r3, #12]
 8008b2e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b38:	d13a      	bne.n	8008bb0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	613b      	str	r3, [r7, #16]
 8008b3e:	4b1e      	ldr	r3, [pc, #120]	; (8008bb8 <HAL_PCD_MspInit+0xa0>)
 8008b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b42:	4a1d      	ldr	r2, [pc, #116]	; (8008bb8 <HAL_PCD_MspInit+0xa0>)
 8008b44:	f043 0301 	orr.w	r3, r3, #1
 8008b48:	6313      	str	r3, [r2, #48]	; 0x30
 8008b4a:	4b1b      	ldr	r3, [pc, #108]	; (8008bb8 <HAL_PCD_MspInit+0xa0>)
 8008b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	613b      	str	r3, [r7, #16]
 8008b54:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008b56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b5c:	2302      	movs	r3, #2
 8008b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b60:	2300      	movs	r3, #0
 8008b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b64:	2303      	movs	r3, #3
 8008b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008b68:	230a      	movs	r3, #10
 8008b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b6c:	f107 0314 	add.w	r3, r7, #20
 8008b70:	4619      	mov	r1, r3
 8008b72:	4812      	ldr	r0, [pc, #72]	; (8008bbc <HAL_PCD_MspInit+0xa4>)
 8008b74:	f7f9 fafa 	bl	800216c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008b78:	4b0f      	ldr	r3, [pc, #60]	; (8008bb8 <HAL_PCD_MspInit+0xa0>)
 8008b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b7c:	4a0e      	ldr	r2, [pc, #56]	; (8008bb8 <HAL_PCD_MspInit+0xa0>)
 8008b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b82:	6353      	str	r3, [r2, #52]	; 0x34
 8008b84:	2300      	movs	r3, #0
 8008b86:	60fb      	str	r3, [r7, #12]
 8008b88:	4b0b      	ldr	r3, [pc, #44]	; (8008bb8 <HAL_PCD_MspInit+0xa0>)
 8008b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b8c:	4a0a      	ldr	r2, [pc, #40]	; (8008bb8 <HAL_PCD_MspInit+0xa0>)
 8008b8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b92:	6453      	str	r3, [r2, #68]	; 0x44
 8008b94:	4b08      	ldr	r3, [pc, #32]	; (8008bb8 <HAL_PCD_MspInit+0xa0>)
 8008b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b9c:	60fb      	str	r3, [r7, #12]
 8008b9e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	2043      	movs	r0, #67	; 0x43
 8008ba6:	f7f9 faaa 	bl	80020fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008baa:	2043      	movs	r0, #67	; 0x43
 8008bac:	f7f9 fac3 	bl	8002136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008bb0:	bf00      	nop
 8008bb2:	3728      	adds	r7, #40	; 0x28
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	40023800 	.word	0x40023800
 8008bbc:	40020000 	.word	0x40020000

08008bc0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	4610      	mov	r0, r2
 8008bd8:	f7fe fb69 	bl	80072ae <USBD_LL_SetupStage>
}
 8008bdc:	bf00      	nop
 8008bde:	3708      	adds	r7, #8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	460b      	mov	r3, r1
 8008bee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008bf6:	78fa      	ldrb	r2, [r7, #3]
 8008bf8:	6879      	ldr	r1, [r7, #4]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	00db      	lsls	r3, r3, #3
 8008bfe:	4413      	add	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	440b      	add	r3, r1
 8008c04:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	78fb      	ldrb	r3, [r7, #3]
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	f7fe fba3 	bl	8007358 <USBD_LL_DataOutStage>
}
 8008c12:	bf00      	nop
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b082      	sub	sp, #8
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
 8008c22:	460b      	mov	r3, r1
 8008c24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008c2c:	78fa      	ldrb	r2, [r7, #3]
 8008c2e:	6879      	ldr	r1, [r7, #4]
 8008c30:	4613      	mov	r3, r2
 8008c32:	00db      	lsls	r3, r3, #3
 8008c34:	4413      	add	r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	440b      	add	r3, r1
 8008c3a:	334c      	adds	r3, #76	; 0x4c
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	78fb      	ldrb	r3, [r7, #3]
 8008c40:	4619      	mov	r1, r3
 8008c42:	f7fe fc3c 	bl	80074be <USBD_LL_DataInStage>
}
 8008c46:	bf00      	nop
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b082      	sub	sp, #8
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7fe fd70 	bl	8007742 <USBD_LL_SOF>
}
 8008c62:	bf00      	nop
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b084      	sub	sp, #16
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008c72:	2301      	movs	r3, #1
 8008c74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d102      	bne.n	8008c84 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	73fb      	strb	r3, [r7, #15]
 8008c82:	e008      	b.n	8008c96 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d102      	bne.n	8008c92 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	73fb      	strb	r3, [r7, #15]
 8008c90:	e001      	b.n	8008c96 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008c92:	f7f8 fb41 	bl	8001318 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c9c:	7bfa      	ldrb	r2, [r7, #15]
 8008c9e:	4611      	mov	r1, r2
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7fe fd10 	bl	80076c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7fe fcb8 	bl	8007622 <USBD_LL_Reset>
}
 8008cb2:	bf00      	nop
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
	...

08008cbc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7fe fd0b 	bl	80076e6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	6812      	ldr	r2, [r2, #0]
 8008cde:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ce2:	f043 0301 	orr.w	r3, r3, #1
 8008ce6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a1b      	ldr	r3, [r3, #32]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d005      	beq.n	8008cfc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008cf0:	4b04      	ldr	r3, [pc, #16]	; (8008d04 <HAL_PCD_SuspendCallback+0x48>)
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	4a03      	ldr	r2, [pc, #12]	; (8008d04 <HAL_PCD_SuspendCallback+0x48>)
 8008cf6:	f043 0306 	orr.w	r3, r3, #6
 8008cfa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008cfc:	bf00      	nop
 8008cfe:	3708      	adds	r7, #8
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	e000ed00 	.word	0xe000ed00

08008d08 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7fe fcfb 	bl	8007712 <USBD_LL_Resume>
}
 8008d1c:	bf00      	nop
 8008d1e:	3708      	adds	r7, #8
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d36:	78fa      	ldrb	r2, [r7, #3]
 8008d38:	4611      	mov	r1, r2
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fe fd53 	bl	80077e6 <USBD_LL_IsoOUTIncomplete>
}
 8008d40:	bf00      	nop
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d5a:	78fa      	ldrb	r2, [r7, #3]
 8008d5c:	4611      	mov	r1, r2
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fe fd0f 	bl	8007782 <USBD_LL_IsoINIncomplete>
}
 8008d64:	bf00      	nop
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fe fd65 	bl	800784a <USBD_LL_DevConnected>
}
 8008d80:	bf00      	nop
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fe fd62 	bl	8007860 <USBD_LL_DevDisconnected>
}
 8008d9c:	bf00      	nop
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d13c      	bne.n	8008e2e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008db4:	4a20      	ldr	r2, [pc, #128]	; (8008e38 <USBD_LL_Init+0x94>)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a1e      	ldr	r2, [pc, #120]	; (8008e38 <USBD_LL_Init+0x94>)
 8008dc0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008dc4:	4b1c      	ldr	r3, [pc, #112]	; (8008e38 <USBD_LL_Init+0x94>)
 8008dc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008dca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008dcc:	4b1a      	ldr	r3, [pc, #104]	; (8008e38 <USBD_LL_Init+0x94>)
 8008dce:	2204      	movs	r2, #4
 8008dd0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008dd2:	4b19      	ldr	r3, [pc, #100]	; (8008e38 <USBD_LL_Init+0x94>)
 8008dd4:	2202      	movs	r2, #2
 8008dd6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008dd8:	4b17      	ldr	r3, [pc, #92]	; (8008e38 <USBD_LL_Init+0x94>)
 8008dda:	2200      	movs	r2, #0
 8008ddc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008dde:	4b16      	ldr	r3, [pc, #88]	; (8008e38 <USBD_LL_Init+0x94>)
 8008de0:	2202      	movs	r2, #2
 8008de2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008de4:	4b14      	ldr	r3, [pc, #80]	; (8008e38 <USBD_LL_Init+0x94>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008dea:	4b13      	ldr	r3, [pc, #76]	; (8008e38 <USBD_LL_Init+0x94>)
 8008dec:	2200      	movs	r2, #0
 8008dee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008df0:	4b11      	ldr	r3, [pc, #68]	; (8008e38 <USBD_LL_Init+0x94>)
 8008df2:	2200      	movs	r2, #0
 8008df4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008df6:	4b10      	ldr	r3, [pc, #64]	; (8008e38 <USBD_LL_Init+0x94>)
 8008df8:	2200      	movs	r2, #0
 8008dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008dfc:	4b0e      	ldr	r3, [pc, #56]	; (8008e38 <USBD_LL_Init+0x94>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008e02:	480d      	ldr	r0, [pc, #52]	; (8008e38 <USBD_LL_Init+0x94>)
 8008e04:	f7f9 fb4e 	bl	80024a4 <HAL_PCD_Init>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d001      	beq.n	8008e12 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008e0e:	f7f8 fa83 	bl	8001318 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008e12:	2180      	movs	r1, #128	; 0x80
 8008e14:	4808      	ldr	r0, [pc, #32]	; (8008e38 <USBD_LL_Init+0x94>)
 8008e16:	f7fa fda6 	bl	8003966 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008e1a:	2240      	movs	r2, #64	; 0x40
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	4806      	ldr	r0, [pc, #24]	; (8008e38 <USBD_LL_Init+0x94>)
 8008e20:	f7fa fd5a 	bl	80038d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008e24:	2280      	movs	r2, #128	; 0x80
 8008e26:	2101      	movs	r1, #1
 8008e28:	4803      	ldr	r0, [pc, #12]	; (8008e38 <USBD_LL_Init+0x94>)
 8008e2a:	f7fa fd55 	bl	80038d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	20001728 	.word	0x20001728

08008e3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7f9 fc43 	bl	80026de <HAL_PCD_Start>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 f942 	bl	80090e8 <USBD_Get_USB_Status>
 8008e64:	4603      	mov	r3, r0
 8008e66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e68:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	4608      	mov	r0, r1
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	461a      	mov	r2, r3
 8008e80:	4603      	mov	r3, r0
 8008e82:	70fb      	strb	r3, [r7, #3]
 8008e84:	460b      	mov	r3, r1
 8008e86:	70bb      	strb	r3, [r7, #2]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e90:	2300      	movs	r3, #0
 8008e92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e9a:	78bb      	ldrb	r3, [r7, #2]
 8008e9c:	883a      	ldrh	r2, [r7, #0]
 8008e9e:	78f9      	ldrb	r1, [r7, #3]
 8008ea0:	f7fa f914 	bl	80030cc <HAL_PCD_EP_Open>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ea8:	7bfb      	ldrb	r3, [r7, #15]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 f91c 	bl	80090e8 <USBD_Get_USB_Status>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008eb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b084      	sub	sp, #16
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ed8:	78fa      	ldrb	r2, [r7, #3]
 8008eda:	4611      	mov	r1, r2
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7fa f95d 	bl	800319c <HAL_PCD_EP_Close>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f000 f8fd 	bl	80090e8 <USBD_Get_USB_Status>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ef2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f16:	78fa      	ldrb	r2, [r7, #3]
 8008f18:	4611      	mov	r1, r2
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7fa fa35 	bl	800338a <HAL_PCD_EP_SetStall>
 8008f20:	4603      	mov	r3, r0
 8008f22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f24:	7bfb      	ldrb	r3, [r7, #15]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 f8de 	bl	80090e8 <USBD_Get_USB_Status>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f30:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b084      	sub	sp, #16
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	460b      	mov	r3, r1
 8008f44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f54:	78fa      	ldrb	r2, [r7, #3]
 8008f56:	4611      	mov	r1, r2
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7fa fa7a 	bl	8003452 <HAL_PCD_EP_ClrStall>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f62:	7bfb      	ldrb	r3, [r7, #15]
 8008f64:	4618      	mov	r0, r3
 8008f66:	f000 f8bf 	bl	80090e8 <USBD_Get_USB_Status>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	460b      	mov	r3, r1
 8008f82:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f8a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008f8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	da0b      	bge.n	8008fac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008f94:	78fb      	ldrb	r3, [r7, #3]
 8008f96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f9a:	68f9      	ldr	r1, [r7, #12]
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	00db      	lsls	r3, r3, #3
 8008fa0:	4413      	add	r3, r2
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	440b      	add	r3, r1
 8008fa6:	333e      	adds	r3, #62	; 0x3e
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	e00b      	b.n	8008fc4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008fac:	78fb      	ldrb	r3, [r7, #3]
 8008fae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fb2:	68f9      	ldr	r1, [r7, #12]
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	00db      	lsls	r3, r3, #3
 8008fb8:	4413      	add	r3, r2
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	440b      	add	r3, r1
 8008fbe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008fc2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	460b      	mov	r3, r1
 8008fda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008fea:	78fa      	ldrb	r2, [r7, #3]
 8008fec:	4611      	mov	r1, r2
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fa f847 	bl	8003082 <HAL_PCD_SetAddress>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ff8:	7bfb      	ldrb	r3, [r7, #15]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f000 f874 	bl	80090e8 <USBD_Get_USB_Status>
 8009000:	4603      	mov	r3, r0
 8009002:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009004:	7bbb      	ldrb	r3, [r7, #14]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b086      	sub	sp, #24
 8009012:	af00      	add	r7, sp, #0
 8009014:	60f8      	str	r0, [r7, #12]
 8009016:	607a      	str	r2, [r7, #4]
 8009018:	603b      	str	r3, [r7, #0]
 800901a:	460b      	mov	r3, r1
 800901c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800901e:	2300      	movs	r3, #0
 8009020:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009022:	2300      	movs	r3, #0
 8009024:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800902c:	7af9      	ldrb	r1, [r7, #11]
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	f7fa f960 	bl	80032f6 <HAL_PCD_EP_Transmit>
 8009036:	4603      	mov	r3, r0
 8009038:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800903a:	7dfb      	ldrb	r3, [r7, #23]
 800903c:	4618      	mov	r0, r3
 800903e:	f000 f853 	bl	80090e8 <USBD_Get_USB_Status>
 8009042:	4603      	mov	r3, r0
 8009044:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009046:	7dbb      	ldrb	r3, [r7, #22]
}
 8009048:	4618      	mov	r0, r3
 800904a:	3718      	adds	r7, #24
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	607a      	str	r2, [r7, #4]
 800905a:	603b      	str	r3, [r7, #0]
 800905c:	460b      	mov	r3, r1
 800905e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009060:	2300      	movs	r3, #0
 8009062:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009064:	2300      	movs	r3, #0
 8009066:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800906e:	7af9      	ldrb	r1, [r7, #11]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	f7fa f8dc 	bl	8003230 <HAL_PCD_EP_Receive>
 8009078:	4603      	mov	r3, r0
 800907a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800907c:	7dfb      	ldrb	r3, [r7, #23]
 800907e:	4618      	mov	r0, r3
 8009080:	f000 f832 	bl	80090e8 <USBD_Get_USB_Status>
 8009084:	4603      	mov	r3, r0
 8009086:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009088:	7dbb      	ldrb	r3, [r7, #22]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3718      	adds	r7, #24
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b082      	sub	sp, #8
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	460b      	mov	r3, r1
 800909c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090a4:	78fa      	ldrb	r2, [r7, #3]
 80090a6:	4611      	mov	r1, r2
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7fa f90c 	bl	80032c6 <HAL_PCD_EP_GetRxCount>
 80090ae:	4603      	mov	r3, r0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3708      	adds	r7, #8
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80090c0:	4b03      	ldr	r3, [pc, #12]	; (80090d0 <USBD_static_malloc+0x18>)
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	370c      	adds	r7, #12
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	20001c34 	.word	0x20001c34

080090d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]

}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	4603      	mov	r3, r0
 80090f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090f2:	2300      	movs	r3, #0
 80090f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80090f6:	79fb      	ldrb	r3, [r7, #7]
 80090f8:	2b03      	cmp	r3, #3
 80090fa:	d817      	bhi.n	800912c <USBD_Get_USB_Status+0x44>
 80090fc:	a201      	add	r2, pc, #4	; (adr r2, 8009104 <USBD_Get_USB_Status+0x1c>)
 80090fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009102:	bf00      	nop
 8009104:	08009115 	.word	0x08009115
 8009108:	0800911b 	.word	0x0800911b
 800910c:	08009121 	.word	0x08009121
 8009110:	08009127 	.word	0x08009127
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009114:	2300      	movs	r3, #0
 8009116:	73fb      	strb	r3, [r7, #15]
    break;
 8009118:	e00b      	b.n	8009132 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800911a:	2303      	movs	r3, #3
 800911c:	73fb      	strb	r3, [r7, #15]
    break;
 800911e:	e008      	b.n	8009132 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009120:	2301      	movs	r3, #1
 8009122:	73fb      	strb	r3, [r7, #15]
    break;
 8009124:	e005      	b.n	8009132 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009126:	2303      	movs	r3, #3
 8009128:	73fb      	strb	r3, [r7, #15]
    break;
 800912a:	e002      	b.n	8009132 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800912c:	2303      	movs	r3, #3
 800912e:	73fb      	strb	r3, [r7, #15]
    break;
 8009130:	bf00      	nop
  }
  return usb_status;
 8009132:	7bfb      	ldrb	r3, [r7, #15]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3714      	adds	r7, #20
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <__libc_init_array>:
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	4d0d      	ldr	r5, [pc, #52]	; (8009178 <__libc_init_array+0x38>)
 8009144:	4c0d      	ldr	r4, [pc, #52]	; (800917c <__libc_init_array+0x3c>)
 8009146:	1b64      	subs	r4, r4, r5
 8009148:	10a4      	asrs	r4, r4, #2
 800914a:	2600      	movs	r6, #0
 800914c:	42a6      	cmp	r6, r4
 800914e:	d109      	bne.n	8009164 <__libc_init_array+0x24>
 8009150:	4d0b      	ldr	r5, [pc, #44]	; (8009180 <__libc_init_array+0x40>)
 8009152:	4c0c      	ldr	r4, [pc, #48]	; (8009184 <__libc_init_array+0x44>)
 8009154:	f000 f82e 	bl	80091b4 <_init>
 8009158:	1b64      	subs	r4, r4, r5
 800915a:	10a4      	asrs	r4, r4, #2
 800915c:	2600      	movs	r6, #0
 800915e:	42a6      	cmp	r6, r4
 8009160:	d105      	bne.n	800916e <__libc_init_array+0x2e>
 8009162:	bd70      	pop	{r4, r5, r6, pc}
 8009164:	f855 3b04 	ldr.w	r3, [r5], #4
 8009168:	4798      	blx	r3
 800916a:	3601      	adds	r6, #1
 800916c:	e7ee      	b.n	800914c <__libc_init_array+0xc>
 800916e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009172:	4798      	blx	r3
 8009174:	3601      	adds	r6, #1
 8009176:	e7f2      	b.n	800915e <__libc_init_array+0x1e>
 8009178:	08009270 	.word	0x08009270
 800917c:	08009270 	.word	0x08009270
 8009180:	08009270 	.word	0x08009270
 8009184:	08009274 	.word	0x08009274

08009188 <memcpy>:
 8009188:	440a      	add	r2, r1
 800918a:	4291      	cmp	r1, r2
 800918c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009190:	d100      	bne.n	8009194 <memcpy+0xc>
 8009192:	4770      	bx	lr
 8009194:	b510      	push	{r4, lr}
 8009196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800919a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800919e:	4291      	cmp	r1, r2
 80091a0:	d1f9      	bne.n	8009196 <memcpy+0xe>
 80091a2:	bd10      	pop	{r4, pc}

080091a4 <memset>:
 80091a4:	4402      	add	r2, r0
 80091a6:	4603      	mov	r3, r0
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d100      	bne.n	80091ae <memset+0xa>
 80091ac:	4770      	bx	lr
 80091ae:	f803 1b01 	strb.w	r1, [r3], #1
 80091b2:	e7f9      	b.n	80091a8 <memset+0x4>

080091b4 <_init>:
 80091b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b6:	bf00      	nop
 80091b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ba:	bc08      	pop	{r3}
 80091bc:	469e      	mov	lr, r3
 80091be:	4770      	bx	lr

080091c0 <_fini>:
 80091c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c2:	bf00      	nop
 80091c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091c6:	bc08      	pop	{r3}
 80091c8:	469e      	mov	lr, r3
 80091ca:	4770      	bx	lr
