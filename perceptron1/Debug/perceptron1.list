
perceptron1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c378  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800c508  0800c508  0001c508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9cc  0800c9cc  000202d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9cc  0800c9cc  0001c9cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9d4  0800c9d4  000202d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9d4  0800c9d4  0001c9d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9d8  0800c9d8  0001c9d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0800c9dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202d0  2**0
                  CONTENTS
 10 .bss          00001d6c  200002d0  200002d0  000202d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000203c  2000203c  000202d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014eec  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003393  00000000  00000000  000351ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  00038580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010f0  00000000  00000000  000397f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e88  00000000  00000000  0003a8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016a33  00000000  00000000  00060770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da78e  00000000  00000000  000771a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00151931  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ec4  00000000  00000000  00151984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c4f0 	.word	0x0800c4f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	0800c4f0 	.word	0x0800c4f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b9aa 	b.w	8000ed8 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f83c 	bl	8000c08 <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_d2lz>:
 8000b9c:	b538      	push	{r3, r4, r5, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	460d      	mov	r5, r1
 8000ba6:	f7ff ff99 	bl	8000adc <__aeabi_dcmplt>
 8000baa:	b928      	cbnz	r0, 8000bb8 <__aeabi_d2lz+0x1c>
 8000bac:	4620      	mov	r0, r4
 8000bae:	4629      	mov	r1, r5
 8000bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bb4:	f000 b80a 	b.w	8000bcc <__aeabi_d2ulz>
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000bbe:	f000 f805 	bl	8000bcc <__aeabi_d2ulz>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	bd38      	pop	{r3, r4, r5, pc}
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2ulz>:
 8000bcc:	b5d0      	push	{r4, r6, r7, lr}
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <__aeabi_d2ulz+0x34>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4606      	mov	r6, r0
 8000bd4:	460f      	mov	r7, r1
 8000bd6:	f7ff fd0f 	bl	80005f8 <__aeabi_dmul>
 8000bda:	f7ff ffa7 	bl	8000b2c <__aeabi_d2uiz>
 8000bde:	4604      	mov	r4, r0
 8000be0:	f7ff fc90 	bl	8000504 <__aeabi_ui2d>
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <__aeabi_d2ulz+0x38>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	f7ff fd06 	bl	80005f8 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	4639      	mov	r1, r7
 8000bf4:	f7ff fb48 	bl	8000288 <__aeabi_dsub>
 8000bf8:	f7ff ff98 	bl	8000b2c <__aeabi_d2uiz>
 8000bfc:	4621      	mov	r1, r4
 8000bfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000c00:	3df00000 	.word	0x3df00000
 8000c04:	41f00000 	.word	0x41f00000

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <predict>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int predict(Perceptron* percep, double inputs[]) {
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
    double sum = percep->weights[0];
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 0; i < input_size; i++) {
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	e01b      	b.n	8000f2e <predict+0x52>

        sum += inputs[i] * percep->weights[i + 1];
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	4413      	add	r3, r2
 8000efe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	3301      	adds	r3, #1
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	4413      	add	r3, r2
 8000f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f10:	f7ff fb72 	bl	80005f8 <__aeabi_dmul>
 8000f14:	4602      	mov	r2, r0
 8000f16:	460b      	mov	r3, r1
 8000f18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f1c:	f7ff f9b6 	bl	800028c <__adddf3>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 0; i < input_size; i++) {
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	dde0      	ble.n	8000ef6 <predict+0x1a>
    }
    return (sum >= 0) ? 1 : 0;
 8000f34:	2301      	movs	r3, #1
 8000f36:	461c      	mov	r4, r3
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	f04f 0300 	mov.w	r3, #0
 8000f40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f44:	f7ff fdde 	bl	8000b04 <__aeabi_dcmpge>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <predict+0x76>
 8000f4e:	2300      	movs	r3, #0
 8000f50:	461c      	mov	r4, r3
 8000f52:	b2e3      	uxtb	r3, r4
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	371c      	adds	r7, #28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd90      	pop	{r4, r7, pc}

08000f5c <train>:
void train(Perceptron* percep, double inputs[][input_size], int labels[], double learning_rate, int epochs, int num_examples) {
 8000f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f5e:	b08f      	sub	sp, #60	; 0x3c
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6178      	str	r0, [r7, #20]
 8000f64:	6139      	str	r1, [r7, #16]
 8000f66:	60fa      	str	r2, [r7, #12]
 8000f68:	ed87 0b00 	vstr	d0, [r7]
 8000f6c:	60bb      	str	r3, [r7, #8]
    for (int epoch = 0; epoch < epochs; epoch++) {
 8000f6e:	2300      	movs	r3, #0
 8000f70:	637b      	str	r3, [r7, #52]	; 0x34
 8000f72:	e078      	b.n	8001066 <train+0x10a>
        for (int example = 0; example < num_examples; example++) {
 8000f74:	2300      	movs	r3, #0
 8000f76:	633b      	str	r3, [r7, #48]	; 0x30
 8000f78:	e06e      	b.n	8001058 <train+0xfc>
            double prediction = predict(percep, inputs[example]);
 8000f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f7c:	011b      	lsls	r3, r3, #4
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4413      	add	r3, r2
 8000f82:	4619      	mov	r1, r3
 8000f84:	6978      	ldr	r0, [r7, #20]
 8000f86:	f7ff ffa9 	bl	8000edc <predict>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fac9 	bl	8000524 <__aeabi_i2d>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	e9c7 2308 	strd	r2, r3, [r7, #32]
            double error = labels[example] - prediction;
 8000f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fabd 	bl	8000524 <__aeabi_i2d>
 8000faa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000fae:	f7ff f96b 	bl	8000288 <__aeabi_dsub>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	e9c7 2306 	strd	r2, r3, [r7, #24]
            percep->weights[0] += learning_rate * error;
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000fc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fc8:	f7ff fb16 	bl	80005f8 <__aeabi_dmul>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	4629      	mov	r1, r5
 8000fd4:	f7ff f95a 	bl	800028c <__adddf3>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	6979      	ldr	r1, [r7, #20]
 8000fde:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < input_size; i++) {
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fe6:	e031      	b.n	800104c <train+0xf0>
                percep->weights[i + 1] += learning_rate * error * inputs[example][i];
 8000fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fea:	3301      	adds	r3, #1
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	4413      	add	r3, r2
 8000ff2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000ff6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000ffa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ffe:	f7ff fafb 	bl	80005f8 <__aeabi_dmul>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4610      	mov	r0, r2
 8001008:	4619      	mov	r1, r3
 800100a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800100c:	011b      	lsls	r3, r3, #4
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	441a      	add	r2, r3
 8001012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	4413      	add	r3, r2
 8001018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101c:	f7ff faec 	bl	80005f8 <__aeabi_dmul>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4610      	mov	r0, r2
 8001026:	4619      	mov	r1, r3
 8001028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800102a:	1c5e      	adds	r6, r3, #1
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4620      	mov	r0, r4
 8001032:	4629      	mov	r1, r5
 8001034:	f7ff f92a 	bl	800028c <__adddf3>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	6978      	ldr	r0, [r7, #20]
 800103e:	00f1      	lsls	r1, r6, #3
 8001040:	4401      	add	r1, r0
 8001042:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < input_size; i++) {
 8001046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001048:	3301      	adds	r3, #1
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800104c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800104e:	2b01      	cmp	r3, #1
 8001050:	ddca      	ble.n	8000fe8 <train+0x8c>
        for (int example = 0; example < num_examples; example++) {
 8001052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001054:	3301      	adds	r3, #1
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
 8001058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800105a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800105c:	429a      	cmp	r2, r3
 800105e:	db8c      	blt.n	8000f7a <train+0x1e>
    for (int epoch = 0; epoch < epochs; epoch++) {
 8001060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001062:	3301      	adds	r3, #1
 8001064:	637b      	str	r3, [r7, #52]	; 0x34
 8001066:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	429a      	cmp	r2, r3
 800106c:	db82      	blt.n	8000f74 <train+0x18>
            }
        }
    }
}
 800106e:	bf00      	nop
 8001070:	bf00      	nop
 8001072:	373c      	adds	r7, #60	; 0x3c
 8001074:	46bd      	mov	sp, r7
 8001076:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001078:	b5b0      	push	{r4, r5, r7, lr}
 800107a:	b0ba      	sub	sp, #232	; 0xe8
 800107c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107e:	f000 fd49 	bl	8001b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001082:	f000 f907 	bl	8001294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001086:	f000 fad5 	bl	8001634 <MX_GPIO_Init>
  MX_ADC1_Init();
 800108a:	f000 f96b 	bl	8001364 <MX_ADC1_Init>
  MX_TIM2_Init();
 800108e:	f000 fa0d 	bl	80014ac <MX_TIM2_Init>
  MX_ADC2_Init();
 8001092:	f000 f9b9 	bl	8001408 <MX_ADC2_Init>
  MX_TIM5_Init();
 8001096:	f000 fa55 	bl	8001544 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 800109a:	f007 fe09 	bl	8008cb0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  Perceptron percep;
  int count=0;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80010a4:	2100      	movs	r1, #0
 80010a6:	4872      	ldr	r0, [pc, #456]	; (8001270 <main+0x1f8>)
 80010a8:	f003 fc0e 	bl	80048c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_3);
 80010ac:	2108      	movs	r1, #8
 80010ae:	4871      	ldr	r0, [pc, #452]	; (8001274 <main+0x1fc>)
 80010b0:	f003 fc0a 	bl	80048c8 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  double received_value_1= atof((char*)buffer); //trying to adjust buffer values to weights
 80010b4:	4870      	ldr	r0, [pc, #448]	; (8001278 <main+0x200>)
 80010b6:	f008 fb2b 	bl	8009710 <atof>
 80010ba:	ed87 0b34 	vstr	d0, [r7, #208]	; 0xd0
	  percep.weights[1]= received_value_1;
 80010be:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80010c2:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	  double received_value_2 =atof((char*)buffer);
 80010c6:	486c      	ldr	r0, [pc, #432]	; (8001278 <main+0x200>)
 80010c8:	f008 fb22 	bl	8009710 <atof>
 80010cc:	ed87 0b32 	vstr	d0, [r7, #200]	; 0xc8
	  percep.weights[2]= received_value_2;
 80010d0:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80010d4:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	  CDC_Transmit_FS(buffer,strlen(buffer));
 80010d8:	4867      	ldr	r0, [pc, #412]	; (8001278 <main+0x200>)
 80010da:	f7ff f879 	bl	80001d0 <strlen>
 80010de:	4603      	mov	r3, r0
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	4619      	mov	r1, r3
 80010e4:	4864      	ldr	r0, [pc, #400]	; (8001278 <main+0x200>)
 80010e6:	f007 feb7 	bl	8008e58 <CDC_Transmit_FS>
	  HAL_ADC_Start(&hadc1);
 80010ea:	4864      	ldr	r0, [pc, #400]	; (800127c <main+0x204>)
 80010ec:	f000 fdec 	bl	8001cc8 <HAL_ADC_Start>
      HAL_ADC_Start(&hadc2);
 80010f0:	4863      	ldr	r0, [pc, #396]	; (8001280 <main+0x208>)
 80010f2:	f000 fde9 	bl	8001cc8 <HAL_ADC_Start>
	  if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 80010f6:	210a      	movs	r1, #10
 80010f8:	4860      	ldr	r0, [pc, #384]	; (800127c <main+0x204>)
 80010fa:	f000 feea 	bl	8001ed2 <HAL_ADC_PollForConversion>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d110      	bne.n	8001126 <main+0xae>
	 	  			 voltage_1 = HAL_ADC_GetValue(&hadc1)/ (float)res_12bit;
 8001104:	485d      	ldr	r0, [pc, #372]	; (800127c <main+0x204>)
 8001106:	f000 ff6f 	bl	8001fe8 <HAL_ADC_GetValue>
 800110a:	ee07 0a90 	vmov	s15, r0
 800110e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001112:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8001284 <main+0x20c>
 8001116:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800111a:	4b5b      	ldr	r3, [pc, #364]	; (8001288 <main+0x210>)
 800111c:	edc3 7a00 	vstr	s15, [r3]
	 	  			 HAL_Delay(100);
 8001120:	2064      	movs	r0, #100	; 0x64
 8001122:	f000 fd69 	bl	8001bf8 <HAL_Delay>
	 	  }
	  if (HAL_ADC_PollForConversion(&hadc2, 10) == HAL_OK) {
 8001126:	210a      	movs	r1, #10
 8001128:	4855      	ldr	r0, [pc, #340]	; (8001280 <main+0x208>)
 800112a:	f000 fed2 	bl	8001ed2 <HAL_ADC_PollForConversion>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d111      	bne.n	8001158 <main+0xe0>
	  				 voltage_2 = HAL_ADC_GetValue(&hadc2)/ (float)res_12bit;
 8001134:	4852      	ldr	r0, [pc, #328]	; (8001280 <main+0x208>)
 8001136:	f000 ff57 	bl	8001fe8 <HAL_ADC_GetValue>
 800113a:	ee07 0a90 	vmov	s15, r0
 800113e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001142:	eddf 6a50 	vldr	s13, [pc, #320]	; 8001284 <main+0x20c>
 8001146:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114a:	4b50      	ldr	r3, [pc, #320]	; (800128c <main+0x214>)
 800114c:	edc3 7a00 	vstr	s15, [r3]
	  				 HAL_Delay(1000);
 8001150:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001154:	f000 fd50 	bl	8001bf8 <HAL_Delay>

	  }
	  HAL_ADC_Stop(&hadc1);
 8001158:	4848      	ldr	r0, [pc, #288]	; (800127c <main+0x204>)
 800115a:	f000 fe87 	bl	8001e6c <HAL_ADC_Stop>
	  HAL_ADC_Stop(&hadc2);
 800115e:	4848      	ldr	r0, [pc, #288]	; (8001280 <main+0x208>)
 8001160:	f000 fe84 	bl	8001e6c <HAL_ADC_Stop>

	  if(count ==0)
 8001164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1a3      	bne.n	80010b4 <main+0x3c>
	  {
      percep.weights[0]=voltage_1; //adjusting weights by pwm
 800116c:	4b46      	ldr	r3, [pc, #280]	; (8001288 <main+0x210>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f9e9 	bl	8000548 <__aeabi_f2d>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	  percep.weights[1]=voltage_2;
 800117e:	4b43      	ldr	r3, [pc, #268]	; (800128c <main+0x214>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f9e0 	bl	8000548 <__aeabi_f2d>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
double inputs[][input_size] = {
 8001190:	4b3f      	ldr	r3, [pc, #252]	; (8001290 <main+0x218>)
 8001192:	463c      	mov	r4, r7
 8001194:	461d      	mov	r5, r3
 8001196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001198:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          {0, 0},
          {0, 1},
          {1, 0},
          {1, 1}
      };
      int labels_and[] = {0, 0, 0, 1};
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80011bc:	2301      	movs	r3, #1
 80011be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      int num_examples = sizeof(inputs) / sizeof(inputs[0]);
 80011c2:	2304      	movs	r3, #4
 80011c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      double learning_rate = 0.1;
 80011c8:	a327      	add	r3, pc, #156	; (adr r3, 8001268 <main+0x1f0>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
      int epochs = 10;
 80011d2:	230a      	movs	r3, #10
 80011d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      train(&percep, inputs, labels_and, learning_rate, epochs, num_examples);
 80011d8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80011dc:	4639      	mov	r1, r7
 80011de:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80011e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011ec:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 80011f0:	f7ff feb4 	bl	8000f5c <train>

      // Testing the perceptron
      double test_inputs[][input_size] = {
 80011f4:	4b26      	ldr	r3, [pc, #152]	; (8001290 <main+0x218>)
 80011f6:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80011fa:	461d      	mov	r5, r3
 80011fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001208:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800120c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          {0, 0},
          {0, 1},
          {1, 0},
          {1, 1}
      };
      int num_test_examples = sizeof(test_inputs) / sizeof(test_inputs[0]);
 8001210:	2304      	movs	r3, #4
 8001212:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      for (int i = 0; i < num_test_examples; i++) {
 8001216:	2300      	movs	r3, #0
 8001218:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800121c:	e01b      	b.n	8001256 <main+0x1de>
          int prediction = predict(&percep, test_inputs[i]);
 800121e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001222:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	441a      	add	r2, r3
 800122a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fe53 	bl	8000edc <predict>
 8001236:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
          if(prediction==1)
 800123a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800123e:	2b01      	cmp	r3, #1
 8001240:	d104      	bne.n	800124c <main+0x1d4>
        	  count++;
 8001242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001246:	3301      	adds	r3, #1
 8001248:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      for (int i = 0; i < num_test_examples; i++) {
 800124c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001250:	3301      	adds	r3, #1
 8001252:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001256:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800125a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800125e:	429a      	cmp	r2, r3
 8001260:	dbdd      	blt.n	800121e <main+0x1a6>
  {
 8001262:	e727      	b.n	80010b4 <main+0x3c>
 8001264:	f3af 8000 	nop.w
 8001268:	9999999a 	.word	0x9999999a
 800126c:	3fb99999 	.word	0x3fb99999
 8001270:	20000388 	.word	0x20000388
 8001274:	200003d0 	.word	0x200003d0
 8001278:	200002f4 	.word	0x200002f4
 800127c:	200002f8 	.word	0x200002f8
 8001280:	20000340 	.word	0x20000340
 8001284:	45800000 	.word	0x45800000
 8001288:	200002ec 	.word	0x200002ec
 800128c:	200002f0 	.word	0x200002f0
 8001290:	0800c508 	.word	0x0800c508

08001294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b094      	sub	sp, #80	; 0x50
 8001298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129a:	f107 0320 	add.w	r3, r7, #32
 800129e:	2230      	movs	r2, #48	; 0x30
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f008 fa70 	bl	8009788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	4b27      	ldr	r3, [pc, #156]	; (800135c <SystemClock_Config+0xc8>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	4a26      	ldr	r2, [pc, #152]	; (800135c <SystemClock_Config+0xc8>)
 80012c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c6:	6413      	str	r3, [r2, #64]	; 0x40
 80012c8:	4b24      	ldr	r3, [pc, #144]	; (800135c <SystemClock_Config+0xc8>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d4:	2300      	movs	r3, #0
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <SystemClock_Config+0xcc>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a20      	ldr	r2, [pc, #128]	; (8001360 <SystemClock_Config+0xcc>)
 80012de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <SystemClock_Config+0xcc>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012f0:	2301      	movs	r3, #1
 80012f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012fa:	2302      	movs	r3, #2
 80012fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001302:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001304:	2304      	movs	r3, #4
 8001306:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001308:	2348      	movs	r3, #72	; 0x48
 800130a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800130c:	2302      	movs	r3, #2
 800130e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001310:	2303      	movs	r3, #3
 8001312:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001314:	f107 0320 	add.w	r3, r7, #32
 8001318:	4618      	mov	r0, r3
 800131a:	f002 fdbd 	bl	8003e98 <HAL_RCC_OscConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001324:	f000 f9ae 	bl	8001684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001328:	230f      	movs	r3, #15
 800132a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800132c:	2302      	movs	r3, #2
 800132e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001338:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	2102      	movs	r1, #2
 8001344:	4618      	mov	r0, r3
 8001346:	f003 f81f 	bl	8004388 <HAL_RCC_ClockConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001350:	f000 f998 	bl	8001684 <Error_Handler>
  }
}
 8001354:	bf00      	nop
 8001356:	3750      	adds	r7, #80	; 0x50
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	40007000 	.word	0x40007000

08001364 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800136a:	463b      	mov	r3, r7
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001376:	4b21      	ldr	r3, [pc, #132]	; (80013fc <MX_ADC1_Init+0x98>)
 8001378:	4a21      	ldr	r2, [pc, #132]	; (8001400 <MX_ADC1_Init+0x9c>)
 800137a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800137c:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <MX_ADC1_Init+0x98>)
 800137e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001382:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <MX_ADC1_Init+0x98>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800138a:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <MX_ADC1_Init+0x98>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001390:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <MX_ADC1_Init+0x98>)
 8001392:	2201      	movs	r2, #1
 8001394:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001396:	4b19      	ldr	r3, [pc, #100]	; (80013fc <MX_ADC1_Init+0x98>)
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <MX_ADC1_Init+0x98>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <MX_ADC1_Init+0x98>)
 80013a6:	4a17      	ldr	r2, [pc, #92]	; (8001404 <MX_ADC1_Init+0xa0>)
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <MX_ADC1_Init+0x98>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <MX_ADC1_Init+0x98>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <MX_ADC1_Init+0x98>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <MX_ADC1_Init+0x98>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013c4:	480d      	ldr	r0, [pc, #52]	; (80013fc <MX_ADC1_Init+0x98>)
 80013c6:	f000 fc3b 	bl	8001c40 <HAL_ADC_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013d0:	f000 f958 	bl	8001684 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013d8:	2301      	movs	r3, #1
 80013da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e0:	463b      	mov	r3, r7
 80013e2:	4619      	mov	r1, r3
 80013e4:	4805      	ldr	r0, [pc, #20]	; (80013fc <MX_ADC1_Init+0x98>)
 80013e6:	f000 fe0d 	bl	8002004 <HAL_ADC_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013f0:	f000 f948 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	200002f8 	.word	0x200002f8
 8001400:	40012000 	.word	0x40012000
 8001404:	0f000001 	.word	0x0f000001

08001408 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800140e:	463b      	mov	r3, r7
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800141a:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <MX_ADC2_Init+0x98>)
 800141c:	4a21      	ldr	r2, [pc, #132]	; (80014a4 <MX_ADC2_Init+0x9c>)
 800141e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001420:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <MX_ADC2_Init+0x98>)
 8001422:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001426:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001428:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <MX_ADC2_Init+0x98>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800142e:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <MX_ADC2_Init+0x98>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001434:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <MX_ADC2_Init+0x98>)
 8001436:	2200      	movs	r2, #0
 8001438:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800143a:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <MX_ADC2_Init+0x98>)
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <MX_ADC2_Init+0x98>)
 8001444:	2200      	movs	r2, #0
 8001446:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <MX_ADC2_Init+0x98>)
 800144a:	4a17      	ldr	r2, [pc, #92]	; (80014a8 <MX_ADC2_Init+0xa0>)
 800144c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <MX_ADC2_Init+0x98>)
 8001450:	2200      	movs	r2, #0
 8001452:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <MX_ADC2_Init+0x98>)
 8001456:	2201      	movs	r2, #1
 8001458:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_ADC2_Init+0x98>)
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_ADC2_Init+0x98>)
 8001464:	2201      	movs	r2, #1
 8001466:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001468:	480d      	ldr	r0, [pc, #52]	; (80014a0 <MX_ADC2_Init+0x98>)
 800146a:	f000 fbe9 	bl	8001c40 <HAL_ADC_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001474:	f000 f906 	bl	8001684 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001478:	2303      	movs	r3, #3
 800147a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800147c:	2301      	movs	r3, #1
 800147e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001484:	463b      	mov	r3, r7
 8001486:	4619      	mov	r1, r3
 8001488:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_ADC2_Init+0x98>)
 800148a:	f000 fdbb 	bl	8002004 <HAL_ADC_ConfigChannel>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001494:	f000 f8f6 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001498:	bf00      	nop
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000340 	.word	0x20000340
 80014a4:	40012100 	.word	0x40012100
 80014a8:	0f000001 	.word	0x0f000001

080014ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b2:	f107 0308 	add.w	r3, r7, #8
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c0:	463b      	mov	r3, r7
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <MX_TIM2_Init+0x94>)
 80014ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <MX_TIM2_Init+0x94>)
 80014d2:	2247      	movs	r2, #71	; 0x47
 80014d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d6:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <MX_TIM2_Init+0x94>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80014dc:	4b18      	ldr	r3, [pc, #96]	; (8001540 <MX_TIM2_Init+0x94>)
 80014de:	f242 720f 	movw	r2, #9999	; 0x270f
 80014e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e4:	4b16      	ldr	r3, [pc, #88]	; (8001540 <MX_TIM2_Init+0x94>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <MX_TIM2_Init+0x94>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014f0:	4813      	ldr	r0, [pc, #76]	; (8001540 <MX_TIM2_Init+0x94>)
 80014f2:	f003 f941 	bl	8004778 <HAL_TIM_Base_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014fc:	f000 f8c2 	bl	8001684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001504:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	4619      	mov	r1, r3
 800150c:	480c      	ldr	r0, [pc, #48]	; (8001540 <MX_TIM2_Init+0x94>)
 800150e:	f003 fb65 	bl	8004bdc <HAL_TIM_ConfigClockSource>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001518:	f000 f8b4 	bl	8001684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151c:	2300      	movs	r3, #0
 800151e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001524:	463b      	mov	r3, r7
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_TIM2_Init+0x94>)
 800152a:	f003 ff2f 	bl	800538c <HAL_TIMEx_MasterConfigSynchronization>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001534:	f000 f8a6 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000388 	.word	0x20000388

08001544 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08e      	sub	sp, #56	; 0x38
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	f107 0320 	add.w	r3, r7, #32
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
 8001570:	615a      	str	r2, [r3, #20]
 8001572:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001574:	4b2d      	ldr	r3, [pc, #180]	; (800162c <MX_TIM5_Init+0xe8>)
 8001576:	4a2e      	ldr	r2, [pc, #184]	; (8001630 <MX_TIM5_Init+0xec>)
 8001578:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 72-1;
 800157a:	4b2c      	ldr	r3, [pc, #176]	; (800162c <MX_TIM5_Init+0xe8>)
 800157c:	2247      	movs	r2, #71	; 0x47
 800157e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001580:	4b2a      	ldr	r3, [pc, #168]	; (800162c <MX_TIM5_Init+0xe8>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 8001586:	4b29      	ldr	r3, [pc, #164]	; (800162c <MX_TIM5_Init+0xe8>)
 8001588:	f242 720f 	movw	r2, #9999	; 0x270f
 800158c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158e:	4b27      	ldr	r3, [pc, #156]	; (800162c <MX_TIM5_Init+0xe8>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001594:	4b25      	ldr	r3, [pc, #148]	; (800162c <MX_TIM5_Init+0xe8>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800159a:	4824      	ldr	r0, [pc, #144]	; (800162c <MX_TIM5_Init+0xe8>)
 800159c:	f003 f8ec 	bl	8004778 <HAL_TIM_Base_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80015a6:	f000 f86d 	bl	8001684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80015b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015b4:	4619      	mov	r1, r3
 80015b6:	481d      	ldr	r0, [pc, #116]	; (800162c <MX_TIM5_Init+0xe8>)
 80015b8:	f003 fb10 	bl	8004bdc <HAL_TIM_ConfigClockSource>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80015c2:	f000 f85f 	bl	8001684 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80015c6:	4819      	ldr	r0, [pc, #100]	; (800162c <MX_TIM5_Init+0xe8>)
 80015c8:	f003 f925 	bl	8004816 <HAL_TIM_PWM_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80015d2:	f000 f857 	bl	8001684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015de:	f107 0320 	add.w	r3, r7, #32
 80015e2:	4619      	mov	r1, r3
 80015e4:	4811      	ldr	r0, [pc, #68]	; (800162c <MX_TIM5_Init+0xe8>)
 80015e6:	f003 fed1 	bl	800538c <HAL_TIMEx_MasterConfigSynchronization>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80015f0:	f000 f848 	bl	8001684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015f4:	2360      	movs	r3, #96	; 0x60
 80015f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 8000-1;
 80015f8:	f641 733f 	movw	r3, #7999	; 0x1f3f
 80015fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	2208      	movs	r2, #8
 800160a:	4619      	mov	r1, r3
 800160c:	4807      	ldr	r0, [pc, #28]	; (800162c <MX_TIM5_Init+0xe8>)
 800160e:	f003 fa23 	bl	8004a58 <HAL_TIM_PWM_ConfigChannel>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001618:	f000 f834 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800161c:	4803      	ldr	r0, [pc, #12]	; (800162c <MX_TIM5_Init+0xe8>)
 800161e:	f000 f909 	bl	8001834 <HAL_TIM_MspPostInit>

}
 8001622:	bf00      	nop
 8001624:	3738      	adds	r7, #56	; 0x38
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200003d0 	.word	0x200003d0
 8001630:	40000c00 	.word	0x40000c00

08001634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <MX_GPIO_Init+0x4c>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a0f      	ldr	r2, [pc, #60]	; (8001680 <MX_GPIO_Init+0x4c>)
 8001644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <MX_GPIO_Init+0x4c>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	603b      	str	r3, [r7, #0]
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <MX_GPIO_Init+0x4c>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a08      	ldr	r2, [pc, #32]	; (8001680 <MX_GPIO_Init+0x4c>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <MX_GPIO_Init+0x4c>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800

08001684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001688:	b672      	cpsid	i
}
 800168a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800168c:	e7fe      	b.n	800168c <Error_Handler+0x8>
	...

08001690 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <HAL_MspInit+0x4c>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	4a0f      	ldr	r2, [pc, #60]	; (80016dc <HAL_MspInit+0x4c>)
 80016a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a4:	6453      	str	r3, [r2, #68]	; 0x44
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <HAL_MspInit+0x4c>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	603b      	str	r3, [r7, #0]
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_MspInit+0x4c>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	4a08      	ldr	r2, [pc, #32]	; (80016dc <HAL_MspInit+0x4c>)
 80016bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c0:	6413      	str	r3, [r2, #64]	; 0x40
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_MspInit+0x4c>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800

080016e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08c      	sub	sp, #48	; 0x30
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 031c 	add.w	r3, r7, #28
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a2e      	ldr	r2, [pc, #184]	; (80017b8 <HAL_ADC_MspInit+0xd8>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d128      	bne.n	8001754 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	61bb      	str	r3, [r7, #24]
 8001706:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <HAL_ADC_MspInit+0xdc>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	4a2c      	ldr	r2, [pc, #176]	; (80017bc <HAL_ADC_MspInit+0xdc>)
 800170c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001710:	6453      	str	r3, [r2, #68]	; 0x44
 8001712:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <HAL_ADC_MspInit+0xdc>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171a:	61bb      	str	r3, [r7, #24]
 800171c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	4b26      	ldr	r3, [pc, #152]	; (80017bc <HAL_ADC_MspInit+0xdc>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a25      	ldr	r2, [pc, #148]	; (80017bc <HAL_ADC_MspInit+0xdc>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b23      	ldr	r3, [pc, #140]	; (80017bc <HAL_ADC_MspInit+0xdc>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800173a:	2301      	movs	r3, #1
 800173c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800173e:	2303      	movs	r3, #3
 8001740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f107 031c 	add.w	r3, r7, #28
 800174a:	4619      	mov	r1, r3
 800174c:	481c      	ldr	r0, [pc, #112]	; (80017c0 <HAL_ADC_MspInit+0xe0>)
 800174e:	f000 ff89 	bl	8002664 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001752:	e02c      	b.n	80017ae <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a1a      	ldr	r2, [pc, #104]	; (80017c4 <HAL_ADC_MspInit+0xe4>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d127      	bne.n	80017ae <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <HAL_ADC_MspInit+0xdc>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	4a15      	ldr	r2, [pc, #84]	; (80017bc <HAL_ADC_MspInit+0xdc>)
 8001768:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800176c:	6453      	str	r3, [r2, #68]	; 0x44
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <HAL_ADC_MspInit+0xdc>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <HAL_ADC_MspInit+0xdc>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a0e      	ldr	r2, [pc, #56]	; (80017bc <HAL_ADC_MspInit+0xdc>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <HAL_ADC_MspInit+0xdc>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001796:	2308      	movs	r3, #8
 8001798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800179a:	2303      	movs	r3, #3
 800179c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	4619      	mov	r1, r3
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <HAL_ADC_MspInit+0xe0>)
 80017aa:	f000 ff5b 	bl	8002664 <HAL_GPIO_Init>
}
 80017ae:	bf00      	nop
 80017b0:	3730      	adds	r7, #48	; 0x30
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40012000 	.word	0x40012000
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40020000 	.word	0x40020000
 80017c4:	40012100 	.word	0x40012100

080017c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d8:	d10e      	bne.n	80017f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b13      	ldr	r3, [pc, #76]	; (800182c <HAL_TIM_Base_MspInit+0x64>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	4a12      	ldr	r2, [pc, #72]	; (800182c <HAL_TIM_Base_MspInit+0x64>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <HAL_TIM_Base_MspInit+0x64>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80017f6:	e012      	b.n	800181e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0c      	ldr	r2, [pc, #48]	; (8001830 <HAL_TIM_Base_MspInit+0x68>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d10d      	bne.n	800181e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_TIM_Base_MspInit+0x64>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a08      	ldr	r2, [pc, #32]	; (800182c <HAL_TIM_Base_MspInit+0x64>)
 800180c:	f043 0308 	orr.w	r3, r3, #8
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_TIM_Base_MspInit+0x64>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800
 8001830:	40000c00 	.word	0x40000c00

08001834 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a12      	ldr	r2, [pc, #72]	; (800189c <HAL_TIM_MspPostInit+0x68>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d11d      	bne.n	8001892 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <HAL_TIM_MspPostInit+0x6c>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a10      	ldr	r2, [pc, #64]	; (80018a0 <HAL_TIM_MspPostInit+0x6c>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <HAL_TIM_MspPostInit+0x6c>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA2     ------> TIM5_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001872:	2304      	movs	r3, #4
 8001874:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001882:	2302      	movs	r3, #2
 8001884:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 030c 	add.w	r3, r7, #12
 800188a:	4619      	mov	r1, r3
 800188c:	4805      	ldr	r0, [pc, #20]	; (80018a4 <HAL_TIM_MspPostInit+0x70>)
 800188e:	f000 fee9 	bl	8002664 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001892:	bf00      	nop
 8001894:	3720      	adds	r7, #32
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40000c00 	.word	0x40000c00
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020000 	.word	0x40020000

080018a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <NMI_Handler+0x4>

080018ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <HardFault_Handler+0x4>

080018b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <MemManage_Handler+0x4>

080018ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018be:	e7fe      	b.n	80018be <BusFault_Handler+0x4>

080018c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <UsageFault_Handler+0x4>

080018c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f4:	f000 f960 	bl	8001bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}

080018fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001900:	4802      	ldr	r0, [pc, #8]	; (800190c <OTG_FS_IRQHandler+0x10>)
 8001902:	f001 f99b 	bl	8002c3c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20001900 	.word	0x20001900

08001910 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return 1;
 8001914:	2301      	movs	r3, #1
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <_kill>:

int _kill(int pid, int sig)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800192a:	f007 fef5 	bl	8009718 <__errno>
 800192e:	4603      	mov	r3, r0
 8001930:	2216      	movs	r2, #22
 8001932:	601a      	str	r2, [r3, #0]
  return -1;
 8001934:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <_exit>:

void _exit (int status)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001948:	f04f 31ff 	mov.w	r1, #4294967295
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ffe7 	bl	8001920 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001952:	e7fe      	b.n	8001952 <_exit+0x12>

08001954 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	e00a      	b.n	800197c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001966:	f3af 8000 	nop.w
 800196a:	4601      	mov	r1, r0
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	60ba      	str	r2, [r7, #8]
 8001972:	b2ca      	uxtb	r2, r1
 8001974:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3301      	adds	r3, #1
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	429a      	cmp	r2, r3
 8001982:	dbf0      	blt.n	8001966 <_read+0x12>
  }

  return len;
 8001984:	687b      	ldr	r3, [r7, #4]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	e009      	b.n	80019b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	1c5a      	adds	r2, r3, #1
 80019a4:	60ba      	str	r2, [r7, #8]
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	3301      	adds	r3, #1
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	dbf1      	blt.n	80019a0 <_write+0x12>
  }
  return len;
 80019bc:	687b      	ldr	r3, [r7, #4]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <_close>:

int _close(int file)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ee:	605a      	str	r2, [r3, #4]
  return 0;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <_isatty>:

int _isatty(int file)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a06:	2301      	movs	r3, #1
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a38:	4a14      	ldr	r2, [pc, #80]	; (8001a8c <_sbrk+0x5c>)
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <_sbrk+0x60>)
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <_sbrk+0x64>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d102      	bne.n	8001a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <_sbrk+0x64>)
 8001a4e:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <_sbrk+0x68>)
 8001a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <_sbrk+0x64>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d207      	bcs.n	8001a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a60:	f007 fe5a 	bl	8009718 <__errno>
 8001a64:	4603      	mov	r3, r0
 8001a66:	220c      	movs	r2, #12
 8001a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6e:	e009      	b.n	8001a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <_sbrk+0x64>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <_sbrk+0x64>)
 8001a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a82:	68fb      	ldr	r3, [r7, #12]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20020000 	.word	0x20020000
 8001a90:	00000400 	.word	0x00000400
 8001a94:	20000418 	.word	0x20000418
 8001a98:	20002040 	.word	0x20002040

08001a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <SystemInit+0x20>)
 8001aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aa6:	4a05      	ldr	r2, [pc, #20]	; (8001abc <SystemInit+0x20>)
 8001aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001af8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ac4:	480d      	ldr	r0, [pc, #52]	; (8001afc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ac6:	490e      	ldr	r1, [pc, #56]	; (8001b00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ac8:	4a0e      	ldr	r2, [pc, #56]	; (8001b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001acc:	e002      	b.n	8001ad4 <LoopCopyDataInit>

08001ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad2:	3304      	adds	r3, #4

08001ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad8:	d3f9      	bcc.n	8001ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ada:	4a0b      	ldr	r2, [pc, #44]	; (8001b08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001adc:	4c0b      	ldr	r4, [pc, #44]	; (8001b0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae0:	e001      	b.n	8001ae6 <LoopFillZerobss>

08001ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae4:	3204      	adds	r2, #4

08001ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae8:	d3fb      	bcc.n	8001ae2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aea:	f7ff ffd7 	bl	8001a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aee:	f007 fe19 	bl	8009724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001af2:	f7ff fac1 	bl	8001078 <main>
  bx  lr    
 8001af6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001af8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b00:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8001b04:	0800c9dc 	.word	0x0800c9dc
  ldr r2, =_sbss
 8001b08:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8001b0c:	2000203c 	.word	0x2000203c

08001b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b10:	e7fe      	b.n	8001b10 <ADC_IRQHandler>
	...

08001b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b18:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <HAL_Init+0x40>)
 8001b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <HAL_Init+0x40>)
 8001b2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_Init+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <HAL_Init+0x40>)
 8001b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f000 fd4f 	bl	80025e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b42:	200f      	movs	r0, #15
 8001b44:	f000 f808 	bl	8001b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b48:	f7ff fda2 	bl	8001690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023c00 	.word	0x40023c00

08001b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_InitTick+0x54>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_InitTick+0x58>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 fd67 	bl	800264a <HAL_SYSTICK_Config>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00e      	b.n	8001ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b0f      	cmp	r3, #15
 8001b8a:	d80a      	bhi.n	8001ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f000 fd2f 	bl	80025f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b98:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <HAL_InitTick+0x5c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	20000008 	.word	0x20000008
 8001bb4:	20000004 	.word	0x20000004

08001bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x20>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x24>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <HAL_IncTick+0x24>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	2000041c 	.word	0x2000041c

08001be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_GetTick+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	2000041c 	.word	0x2000041c

08001bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff ffee 	bl	8001be0 <HAL_GetTick>
 8001c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d005      	beq.n	8001c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_Delay+0x44>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c1e:	bf00      	nop
 8001c20:	f7ff ffde 	bl	8001be0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d8f7      	bhi.n	8001c20 <HAL_Delay+0x28>
  {
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000008 	.word	0x20000008

08001c40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e033      	b.n	8001cbe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff fd3e 	bl	80016e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d118      	bne.n	8001cb0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c86:	f023 0302 	bic.w	r3, r3, #2
 8001c8a:	f043 0202 	orr.w	r2, r3, #2
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 fad8 	bl	8002248 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f023 0303 	bic.w	r3, r3, #3
 8001ca6:	f043 0201 	orr.w	r2, r3, #1
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	641a      	str	r2, [r3, #64]	; 0x40
 8001cae:	e001      	b.n	8001cb4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ADC_Start+0x1a>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e0b2      	b.n	8001e48 <HAL_ADC_Start+0x180>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d018      	beq.n	8001d2a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0201 	orr.w	r2, r2, #1
 8001d06:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d08:	4b52      	ldr	r3, [pc, #328]	; (8001e54 <HAL_ADC_Start+0x18c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a52      	ldr	r2, [pc, #328]	; (8001e58 <HAL_ADC_Start+0x190>)
 8001d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d12:	0c9a      	lsrs	r2, r3, #18
 8001d14:	4613      	mov	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4413      	add	r3, r2
 8001d1a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d1c:	e002      	b.n	8001d24 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f9      	bne.n	8001d1e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d17a      	bne.n	8001e2e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d40:	f023 0301 	bic.w	r3, r3, #1
 8001d44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d007      	beq.n	8001d6a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d76:	d106      	bne.n	8001d86 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7c:	f023 0206 	bic.w	r2, r3, #6
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	645a      	str	r2, [r3, #68]	; 0x44
 8001d84:	e002      	b.n	8001d8c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d94:	4b31      	ldr	r3, [pc, #196]	; (8001e5c <HAL_ADC_Start+0x194>)
 8001d96:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001da0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 031f 	and.w	r3, r3, #31
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d12a      	bne.n	8001e04 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a2b      	ldr	r2, [pc, #172]	; (8001e60 <HAL_ADC_Start+0x198>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d015      	beq.n	8001de4 <HAL_ADC_Start+0x11c>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a29      	ldr	r2, [pc, #164]	; (8001e64 <HAL_ADC_Start+0x19c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d105      	bne.n	8001dce <HAL_ADC_Start+0x106>
 8001dc2:	4b26      	ldr	r3, [pc, #152]	; (8001e5c <HAL_ADC_Start+0x194>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 031f 	and.w	r3, r3, #31
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00a      	beq.n	8001de4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a25      	ldr	r2, [pc, #148]	; (8001e68 <HAL_ADC_Start+0x1a0>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d136      	bne.n	8001e46 <HAL_ADC_Start+0x17e>
 8001dd8:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <HAL_ADC_Start+0x194>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d130      	bne.n	8001e46 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d129      	bne.n	8001e46 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	e020      	b.n	8001e46 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a15      	ldr	r2, [pc, #84]	; (8001e60 <HAL_ADC_Start+0x198>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d11b      	bne.n	8001e46 <HAL_ADC_Start+0x17e>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d114      	bne.n	8001e46 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	e00b      	b.n	8001e46 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f043 0210 	orr.w	r2, r3, #16
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f043 0201 	orr.w	r2, r3, #1
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	20000000 	.word	0x20000000
 8001e58:	431bde83 	.word	0x431bde83
 8001e5c:	40012300 	.word	0x40012300
 8001e60:	40012000 	.word	0x40012000
 8001e64:	40012100 	.word	0x40012100
 8001e68:	40012200 	.word	0x40012200

08001e6c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <HAL_ADC_Stop+0x16>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e021      	b.n	8001ec6 <HAL_ADC_Stop+0x5a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0201 	bic.w	r2, r2, #1
 8001e98:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d109      	bne.n	8001ebc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	f043 0201 	orr.w	r2, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eee:	d113      	bne.n	8001f18 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001efe:	d10b      	bne.n	8001f18 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f043 0220 	orr.w	r2, r3, #32
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e063      	b.n	8001fe0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001f18:	f7ff fe62 	bl	8001be0 <HAL_GetTick>
 8001f1c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f1e:	e021      	b.n	8001f64 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f26:	d01d      	beq.n	8001f64 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d007      	beq.n	8001f3e <HAL_ADC_PollForConversion+0x6c>
 8001f2e:	f7ff fe57 	bl	8001be0 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d212      	bcs.n	8001f64 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d00b      	beq.n	8001f64 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	f043 0204 	orr.w	r2, r3, #4
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e03d      	b.n	8001fe0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d1d6      	bne.n	8001f20 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f06f 0212 	mvn.w	r2, #18
 8001f7a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d123      	bne.n	8001fde <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d11f      	bne.n	8001fde <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d006      	beq.n	8001fba <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d111      	bne.n	8001fde <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d105      	bne.n	8001fde <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f043 0201 	orr.w	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x1c>
 800201c:	2302      	movs	r3, #2
 800201e:	e105      	b.n	800222c <HAL_ADC_ConfigChannel+0x228>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b09      	cmp	r3, #9
 800202e:	d925      	bls.n	800207c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68d9      	ldr	r1, [r3, #12]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	461a      	mov	r2, r3
 800203e:	4613      	mov	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4413      	add	r3, r2
 8002044:	3b1e      	subs	r3, #30
 8002046:	2207      	movs	r2, #7
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43da      	mvns	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	400a      	ands	r2, r1
 8002054:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68d9      	ldr	r1, [r3, #12]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	b29b      	uxth	r3, r3
 8002066:	4618      	mov	r0, r3
 8002068:	4603      	mov	r3, r0
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4403      	add	r3, r0
 800206e:	3b1e      	subs	r3, #30
 8002070:	409a      	lsls	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	e022      	b.n	80020c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6919      	ldr	r1, [r3, #16]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	b29b      	uxth	r3, r3
 8002088:	461a      	mov	r2, r3
 800208a:	4613      	mov	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4413      	add	r3, r2
 8002090:	2207      	movs	r2, #7
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43da      	mvns	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	400a      	ands	r2, r1
 800209e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6919      	ldr	r1, [r3, #16]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	4618      	mov	r0, r3
 80020b2:	4603      	mov	r3, r0
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4403      	add	r3, r0
 80020b8:	409a      	lsls	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	d824      	bhi.n	8002114 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	3b05      	subs	r3, #5
 80020dc:	221f      	movs	r2, #31
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43da      	mvns	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	400a      	ands	r2, r1
 80020ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	4618      	mov	r0, r3
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	3b05      	subs	r3, #5
 8002106:	fa00 f203 	lsl.w	r2, r0, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	635a      	str	r2, [r3, #52]	; 0x34
 8002112:	e04c      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b0c      	cmp	r3, #12
 800211a:	d824      	bhi.n	8002166 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	3b23      	subs	r3, #35	; 0x23
 800212e:	221f      	movs	r2, #31
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43da      	mvns	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	400a      	ands	r2, r1
 800213c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	b29b      	uxth	r3, r3
 800214a:	4618      	mov	r0, r3
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	3b23      	subs	r3, #35	; 0x23
 8002158:	fa00 f203 	lsl.w	r2, r0, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
 8002164:	e023      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	3b41      	subs	r3, #65	; 0x41
 8002178:	221f      	movs	r2, #31
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43da      	mvns	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	400a      	ands	r2, r1
 8002186:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	b29b      	uxth	r3, r3
 8002194:	4618      	mov	r0, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	3b41      	subs	r3, #65	; 0x41
 80021a2:	fa00 f203 	lsl.w	r2, r0, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021ae:	4b22      	ldr	r3, [pc, #136]	; (8002238 <HAL_ADC_ConfigChannel+0x234>)
 80021b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a21      	ldr	r2, [pc, #132]	; (800223c <HAL_ADC_ConfigChannel+0x238>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d109      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x1cc>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b12      	cmp	r3, #18
 80021c2:	d105      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a19      	ldr	r2, [pc, #100]	; (800223c <HAL_ADC_ConfigChannel+0x238>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d123      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x21e>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b10      	cmp	r3, #16
 80021e0:	d003      	beq.n	80021ea <HAL_ADC_ConfigChannel+0x1e6>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b11      	cmp	r3, #17
 80021e8:	d11b      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b10      	cmp	r3, #16
 80021fc:	d111      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <HAL_ADC_ConfigChannel+0x23c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a10      	ldr	r2, [pc, #64]	; (8002244 <HAL_ADC_ConfigChannel+0x240>)
 8002204:	fba2 2303 	umull	r2, r3, r2, r3
 8002208:	0c9a      	lsrs	r2, r3, #18
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002214:	e002      	b.n	800221c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	3b01      	subs	r3, #1
 800221a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f9      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	40012300 	.word	0x40012300
 800223c:	40012000 	.word	0x40012000
 8002240:	20000000 	.word	0x20000000
 8002244:	431bde83 	.word	0x431bde83

08002248 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002250:	4b79      	ldr	r3, [pc, #484]	; (8002438 <ADC_Init+0x1f0>)
 8002252:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	431a      	orrs	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800227c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6859      	ldr	r1, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	021a      	lsls	r2, r3, #8
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6859      	ldr	r1, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6899      	ldr	r1, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	4a58      	ldr	r2, [pc, #352]	; (800243c <ADC_Init+0x1f4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d022      	beq.n	8002326 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6899      	ldr	r1, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002310:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6899      	ldr	r1, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	e00f      	b.n	8002346 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002334:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002344:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0202 	bic.w	r2, r2, #2
 8002354:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6899      	ldr	r1, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	7e1b      	ldrb	r3, [r3, #24]
 8002360:	005a      	lsls	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d01b      	beq.n	80023ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002382:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002392:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6859      	ldr	r1, [r3, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	3b01      	subs	r3, #1
 80023a0:	035a      	lsls	r2, r3, #13
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	e007      	b.n	80023bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	051a      	lsls	r2, r3, #20
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6899      	ldr	r1, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023fe:	025a      	lsls	r2, r3, #9
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002416:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6899      	ldr	r1, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	029a      	lsls	r2, r3, #10
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	609a      	str	r2, [r3, #8]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	40012300 	.word	0x40012300
 800243c:	0f000001 	.word	0x0f000001

08002440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <__NVIC_SetPriorityGrouping+0x44>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800245c:	4013      	ands	r3, r2
 800245e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800246c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002472:	4a04      	ldr	r2, [pc, #16]	; (8002484 <__NVIC_SetPriorityGrouping+0x44>)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	60d3      	str	r3, [r2, #12]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <__NVIC_GetPriorityGrouping+0x18>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	f003 0307 	and.w	r3, r3, #7
}
 8002496:	4618      	mov	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	db0b      	blt.n	80024ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	f003 021f 	and.w	r2, r3, #31
 80024bc:	4907      	ldr	r1, [pc, #28]	; (80024dc <__NVIC_EnableIRQ+0x38>)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	2001      	movs	r0, #1
 80024c6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000e100 	.word	0xe000e100

080024e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	6039      	str	r1, [r7, #0]
 80024ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	db0a      	blt.n	800250a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	490c      	ldr	r1, [pc, #48]	; (800252c <__NVIC_SetPriority+0x4c>)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	0112      	lsls	r2, r2, #4
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	440b      	add	r3, r1
 8002504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002508:	e00a      	b.n	8002520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4908      	ldr	r1, [pc, #32]	; (8002530 <__NVIC_SetPriority+0x50>)
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	3b04      	subs	r3, #4
 8002518:	0112      	lsls	r2, r2, #4
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	440b      	add	r3, r1
 800251e:	761a      	strb	r2, [r3, #24]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000e100 	.word	0xe000e100
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	; 0x24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f1c3 0307 	rsb	r3, r3, #7
 800254e:	2b04      	cmp	r3, #4
 8002550:	bf28      	it	cs
 8002552:	2304      	movcs	r3, #4
 8002554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3304      	adds	r3, #4
 800255a:	2b06      	cmp	r3, #6
 800255c:	d902      	bls.n	8002564 <NVIC_EncodePriority+0x30>
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3b03      	subs	r3, #3
 8002562:	e000      	b.n	8002566 <NVIC_EncodePriority+0x32>
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	f04f 32ff 	mov.w	r2, #4294967295
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43da      	mvns	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	401a      	ands	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800257c:	f04f 31ff 	mov.w	r1, #4294967295
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	43d9      	mvns	r1, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800258c:	4313      	orrs	r3, r2
         );
}
 800258e:	4618      	mov	r0, r3
 8002590:	3724      	adds	r7, #36	; 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ac:	d301      	bcc.n	80025b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ae:	2301      	movs	r3, #1
 80025b0:	e00f      	b.n	80025d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025b2:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <SysTick_Config+0x40>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ba:	210f      	movs	r1, #15
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295
 80025c0:	f7ff ff8e 	bl	80024e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <SysTick_Config+0x40>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ca:	4b04      	ldr	r3, [pc, #16]	; (80025dc <SysTick_Config+0x40>)
 80025cc:	2207      	movs	r2, #7
 80025ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	e000e010 	.word	0xe000e010

080025e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff ff29 	bl	8002440 <__NVIC_SetPriorityGrouping>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b086      	sub	sp, #24
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	4603      	mov	r3, r0
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002608:	f7ff ff3e 	bl	8002488 <__NVIC_GetPriorityGrouping>
 800260c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	6978      	ldr	r0, [r7, #20]
 8002614:	f7ff ff8e 	bl	8002534 <NVIC_EncodePriority>
 8002618:	4602      	mov	r2, r0
 800261a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff ff5d 	bl	80024e0 <__NVIC_SetPriority>
}
 8002626:	bf00      	nop
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff ff31 	bl	80024a4 <__NVIC_EnableIRQ>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff ffa2 	bl	800259c <SysTick_Config>
 8002658:	4603      	mov	r3, r0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	; 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002676:	2300      	movs	r3, #0
 8002678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	e16b      	b.n	8002958 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002680:	2201      	movs	r2, #1
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	429a      	cmp	r2, r3
 800269a:	f040 815a 	bne.w	8002952 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d005      	beq.n	80026b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d130      	bne.n	8002718 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	2203      	movs	r2, #3
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026ec:	2201      	movs	r2, #1
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 0201 	and.w	r2, r3, #1
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	2b03      	cmp	r3, #3
 8002722:	d017      	beq.n	8002754 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	2203      	movs	r2, #3
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d123      	bne.n	80027a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	08da      	lsrs	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3208      	adds	r2, #8
 8002768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	220f      	movs	r2, #15
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	08da      	lsrs	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3208      	adds	r2, #8
 80027a2:	69b9      	ldr	r1, [r7, #24]
 80027a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	2203      	movs	r2, #3
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0203 	and.w	r2, r3, #3
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80b4 	beq.w	8002952 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	4b60      	ldr	r3, [pc, #384]	; (8002970 <HAL_GPIO_Init+0x30c>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	4a5f      	ldr	r2, [pc, #380]	; (8002970 <HAL_GPIO_Init+0x30c>)
 80027f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f8:	6453      	str	r3, [r2, #68]	; 0x44
 80027fa:	4b5d      	ldr	r3, [pc, #372]	; (8002970 <HAL_GPIO_Init+0x30c>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002806:	4a5b      	ldr	r2, [pc, #364]	; (8002974 <HAL_GPIO_Init+0x310>)
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	089b      	lsrs	r3, r3, #2
 800280c:	3302      	adds	r3, #2
 800280e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	220f      	movs	r2, #15
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a52      	ldr	r2, [pc, #328]	; (8002978 <HAL_GPIO_Init+0x314>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d02b      	beq.n	800288a <HAL_GPIO_Init+0x226>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a51      	ldr	r2, [pc, #324]	; (800297c <HAL_GPIO_Init+0x318>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d025      	beq.n	8002886 <HAL_GPIO_Init+0x222>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a50      	ldr	r2, [pc, #320]	; (8002980 <HAL_GPIO_Init+0x31c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d01f      	beq.n	8002882 <HAL_GPIO_Init+0x21e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a4f      	ldr	r2, [pc, #316]	; (8002984 <HAL_GPIO_Init+0x320>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d019      	beq.n	800287e <HAL_GPIO_Init+0x21a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a4e      	ldr	r2, [pc, #312]	; (8002988 <HAL_GPIO_Init+0x324>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d013      	beq.n	800287a <HAL_GPIO_Init+0x216>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a4d      	ldr	r2, [pc, #308]	; (800298c <HAL_GPIO_Init+0x328>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00d      	beq.n	8002876 <HAL_GPIO_Init+0x212>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a4c      	ldr	r2, [pc, #304]	; (8002990 <HAL_GPIO_Init+0x32c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d007      	beq.n	8002872 <HAL_GPIO_Init+0x20e>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a4b      	ldr	r2, [pc, #300]	; (8002994 <HAL_GPIO_Init+0x330>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d101      	bne.n	800286e <HAL_GPIO_Init+0x20a>
 800286a:	2307      	movs	r3, #7
 800286c:	e00e      	b.n	800288c <HAL_GPIO_Init+0x228>
 800286e:	2308      	movs	r3, #8
 8002870:	e00c      	b.n	800288c <HAL_GPIO_Init+0x228>
 8002872:	2306      	movs	r3, #6
 8002874:	e00a      	b.n	800288c <HAL_GPIO_Init+0x228>
 8002876:	2305      	movs	r3, #5
 8002878:	e008      	b.n	800288c <HAL_GPIO_Init+0x228>
 800287a:	2304      	movs	r3, #4
 800287c:	e006      	b.n	800288c <HAL_GPIO_Init+0x228>
 800287e:	2303      	movs	r3, #3
 8002880:	e004      	b.n	800288c <HAL_GPIO_Init+0x228>
 8002882:	2302      	movs	r3, #2
 8002884:	e002      	b.n	800288c <HAL_GPIO_Init+0x228>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <HAL_GPIO_Init+0x228>
 800288a:	2300      	movs	r3, #0
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	f002 0203 	and.w	r2, r2, #3
 8002892:	0092      	lsls	r2, r2, #2
 8002894:	4093      	lsls	r3, r2
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800289c:	4935      	ldr	r1, [pc, #212]	; (8002974 <HAL_GPIO_Init+0x310>)
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	3302      	adds	r3, #2
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028aa:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <HAL_GPIO_Init+0x334>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ce:	4a32      	ldr	r2, [pc, #200]	; (8002998 <HAL_GPIO_Init+0x334>)
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028d4:	4b30      	ldr	r3, [pc, #192]	; (8002998 <HAL_GPIO_Init+0x334>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028f8:	4a27      	ldr	r2, [pc, #156]	; (8002998 <HAL_GPIO_Init+0x334>)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028fe:	4b26      	ldr	r3, [pc, #152]	; (8002998 <HAL_GPIO_Init+0x334>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	43db      	mvns	r3, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4013      	ands	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002922:	4a1d      	ldr	r2, [pc, #116]	; (8002998 <HAL_GPIO_Init+0x334>)
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002928:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <HAL_GPIO_Init+0x334>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800294c:	4a12      	ldr	r2, [pc, #72]	; (8002998 <HAL_GPIO_Init+0x334>)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3301      	adds	r3, #1
 8002956:	61fb      	str	r3, [r7, #28]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	2b0f      	cmp	r3, #15
 800295c:	f67f ae90 	bls.w	8002680 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	3724      	adds	r7, #36	; 0x24
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800
 8002974:	40013800 	.word	0x40013800
 8002978:	40020000 	.word	0x40020000
 800297c:	40020400 	.word	0x40020400
 8002980:	40020800 	.word	0x40020800
 8002984:	40020c00 	.word	0x40020c00
 8002988:	40021000 	.word	0x40021000
 800298c:	40021400 	.word	0x40021400
 8002990:	40021800 	.word	0x40021800
 8002994:	40021c00 	.word	0x40021c00
 8002998:	40013c00 	.word	0x40013c00

0800299c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800299c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800299e:	b08f      	sub	sp, #60	; 0x3c
 80029a0:	af0a      	add	r7, sp, #40	; 0x28
 80029a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e10f      	b.n	8002bce <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d106      	bne.n	80029ce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f006 fb8d 	bl	80090e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2203      	movs	r2, #3
 80029d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d102      	bne.n	80029e8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f002 fe5e 	bl	80056ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	687e      	ldr	r6, [r7, #4]
 80029fa:	466d      	mov	r5, sp
 80029fc:	f106 0410 	add.w	r4, r6, #16
 8002a00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a10:	1d33      	adds	r3, r6, #4
 8002a12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a14:	6838      	ldr	r0, [r7, #0]
 8002a16:	f002 fd35 	bl	8005484 <USB_CoreInit>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0d0      	b.n	8002bce <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2100      	movs	r1, #0
 8002a32:	4618      	mov	r0, r3
 8002a34:	f002 fe4c 	bl	80056d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a38:	2300      	movs	r3, #0
 8002a3a:	73fb      	strb	r3, [r7, #15]
 8002a3c:	e04a      	b.n	8002ad4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a3e:	7bfa      	ldrb	r2, [r7, #15]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4413      	add	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	333d      	adds	r3, #61	; 0x3d
 8002a4e:	2201      	movs	r2, #1
 8002a50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a52:	7bfa      	ldrb	r2, [r7, #15]
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	440b      	add	r3, r1
 8002a60:	333c      	adds	r3, #60	; 0x3c
 8002a62:	7bfa      	ldrb	r2, [r7, #15]
 8002a64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a66:	7bfa      	ldrb	r2, [r7, #15]
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
 8002a6a:	b298      	uxth	r0, r3
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	3344      	adds	r3, #68	; 0x44
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a7e:	7bfa      	ldrb	r2, [r7, #15]
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3340      	adds	r3, #64	; 0x40
 8002a8e:	2200      	movs	r2, #0
 8002a90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a92:	7bfa      	ldrb	r2, [r7, #15]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	3348      	adds	r3, #72	; 0x48
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002aa6:	7bfa      	ldrb	r2, [r7, #15]
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	334c      	adds	r3, #76	; 0x4c
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	3354      	adds	r3, #84	; 0x54
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	73fb      	strb	r3, [r7, #15]
 8002ad4:	7bfa      	ldrb	r2, [r7, #15]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d3af      	bcc.n	8002a3e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ade:	2300      	movs	r3, #0
 8002ae0:	73fb      	strb	r3, [r7, #15]
 8002ae2:	e044      	b.n	8002b6e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ae4:	7bfa      	ldrb	r2, [r7, #15]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002afa:	7bfa      	ldrb	r2, [r7, #15]
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002b0c:	7bfa      	ldrb	r2, [r7, #15]
 8002b0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b26:	7bfa      	ldrb	r2, [r7, #15]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b3c:	7bfa      	ldrb	r2, [r7, #15]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b52:	7bfa      	ldrb	r2, [r7, #15]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d3b5      	bcc.n	8002ae4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	603b      	str	r3, [r7, #0]
 8002b7e:	687e      	ldr	r6, [r7, #4]
 8002b80:	466d      	mov	r5, sp
 8002b82:	f106 0410 	add.w	r4, r6, #16
 8002b86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b92:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b96:	1d33      	adds	r3, r6, #4
 8002b98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b9a:	6838      	ldr	r0, [r7, #0]
 8002b9c:	f002 fde4 	bl	8005768 <USB_DevInit>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d005      	beq.n	8002bb2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e00d      	b.n	8002bce <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f003 ff33 	bl	8006a32 <USB_DevDisconnect>

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bd6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <HAL_PCD_Start+0x1c>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e020      	b.n	8002c34 <HAL_PCD_Start+0x5e>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d109      	bne.n	8002c16 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d005      	beq.n	8002c16 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f002 fd36 	bl	800568c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f003 fee3 	bl	80069f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c3c:	b590      	push	{r4, r7, lr}
 8002c3e:	b08d      	sub	sp, #52	; 0x34
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f003 ffa1 	bl	8006b9a <USB_GetMode>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f040 848a 	bne.w	8003574 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f003 ff05 	bl	8006a74 <USB_ReadInterrupts>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 8480 	beq.w	8003572 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	0a1b      	lsrs	r3, r3, #8
 8002c7c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f003 fef2 	bl	8006a74 <USB_ReadInterrupts>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d107      	bne.n	8002caa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695a      	ldr	r2, [r3, #20]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f002 0202 	and.w	r2, r2, #2
 8002ca8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f003 fee0 	bl	8006a74 <USB_ReadInterrupts>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	f003 0310 	and.w	r3, r3, #16
 8002cba:	2b10      	cmp	r3, #16
 8002cbc:	d161      	bne.n	8002d82 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699a      	ldr	r2, [r3, #24]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0210 	bic.w	r2, r2, #16
 8002ccc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	f003 020f 	and.w	r2, r3, #15
 8002cda:	4613      	mov	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	4413      	add	r3, r2
 8002cea:	3304      	adds	r3, #4
 8002cec:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	0c5b      	lsrs	r3, r3, #17
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d124      	bne.n	8002d44 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d035      	beq.n	8002d72 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	6a38      	ldr	r0, [r7, #32]
 8002d1a:	f003 fd17 	bl	800674c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	691a      	ldr	r2, [r3, #16]
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	091b      	lsrs	r3, r3, #4
 8002d26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d2a:	441a      	add	r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	6a1a      	ldr	r2, [r3, #32]
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	091b      	lsrs	r3, r3, #4
 8002d38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d3c:	441a      	add	r2, r3
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	621a      	str	r2, [r3, #32]
 8002d42:	e016      	b.n	8002d72 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	0c5b      	lsrs	r3, r3, #17
 8002d48:	f003 030f 	and.w	r3, r3, #15
 8002d4c:	2b06      	cmp	r3, #6
 8002d4e:	d110      	bne.n	8002d72 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d56:	2208      	movs	r2, #8
 8002d58:	4619      	mov	r1, r3
 8002d5a:	6a38      	ldr	r0, [r7, #32]
 8002d5c:	f003 fcf6 	bl	800674c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	6a1a      	ldr	r2, [r3, #32]
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	091b      	lsrs	r3, r3, #4
 8002d68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d6c:	441a      	add	r2, r3
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	699a      	ldr	r2, [r3, #24]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f042 0210 	orr.w	r2, r2, #16
 8002d80:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f003 fe74 	bl	8006a74 <USB_ReadInterrupts>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d92:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d96:	f040 80a7 	bne.w	8002ee8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f003 fe79 	bl	8006a9a <USB_ReadDevAllOutEpInterrupt>
 8002da8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002daa:	e099      	b.n	8002ee0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 808e 	beq.w	8002ed4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f003 fe9d 	bl	8006b02 <USB_ReadDevOutEPInterrupt>
 8002dc8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00c      	beq.n	8002dee <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	015a      	lsls	r2, r3, #5
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de0:	461a      	mov	r2, r3
 8002de2:	2301      	movs	r3, #1
 8002de4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002de6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 fec3 	bl	8003b74 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00c      	beq.n	8002e12 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e04:	461a      	mov	r2, r3
 8002e06:	2308      	movs	r3, #8
 8002e08:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 ff99 	bl	8003d44 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e28:	461a      	mov	r2, r3
 8002e2a:	2310      	movs	r3, #16
 8002e2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d030      	beq.n	8002e9a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e40:	2b80      	cmp	r3, #128	; 0x80
 8002e42:	d109      	bne.n	8002e58 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	69fa      	ldr	r2, [r7, #28]
 8002e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e56:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	78db      	ldrb	r3, [r3, #3]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d108      	bne.n	8002e88 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	4619      	mov	r1, r3
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f006 fa36 	bl	80092f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e94:	461a      	mov	r2, r3
 8002e96:	2302      	movs	r3, #2
 8002e98:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f003 0320 	and.w	r3, r3, #32
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	2320      	movs	r3, #32
 8002eb4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d009      	beq.n	8002ed4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ed2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002edc:	085b      	lsrs	r3, r3, #1
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f47f af62 	bne.w	8002dac <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f003 fdc1 	bl	8006a74 <USB_ReadInterrupts>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002efc:	f040 80db 	bne.w	80030b6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f003 fde2 	bl	8006ace <USB_ReadDevAllInEpInterrupt>
 8002f0a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002f10:	e0cd      	b.n	80030ae <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80c2 	beq.w	80030a2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f003 fe08 	bl	8006b3e <USB_ReadDevInEPInterrupt>
 8002f2e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d057      	beq.n	8002fea <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	f003 030f 	and.w	r3, r3, #15
 8002f40:	2201      	movs	r2, #1
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69f9      	ldr	r1, [r7, #28]
 8002f56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	015a      	lsls	r2, r3, #5
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d132      	bne.n	8002fde <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	334c      	adds	r3, #76	; 0x4c
 8002f88:	6819      	ldr	r1, [r3, #0]
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4403      	add	r3, r0
 8002f98:	3348      	adds	r3, #72	; 0x48
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4419      	add	r1, r3
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4403      	add	r3, r0
 8002fac:	334c      	adds	r3, #76	; 0x4c
 8002fae:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d113      	bne.n	8002fde <HAL_PCD_IRQHandler+0x3a2>
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fba:	4613      	mov	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3354      	adds	r3, #84	; 0x54
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d108      	bne.n	8002fde <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2101      	movs	r1, #1
 8002fda:	f003 fe0f 	bl	8006bfc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f006 f900 	bl	80091ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d008      	beq.n	8003006 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003000:	461a      	mov	r2, r3
 8003002:	2308      	movs	r3, #8
 8003004:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	4413      	add	r3, r2
 8003018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800301c:	461a      	mov	r2, r3
 800301e:	2310      	movs	r3, #16
 8003020:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	4413      	add	r3, r2
 8003034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003038:	461a      	mov	r2, r3
 800303a:	2340      	movs	r3, #64	; 0x40
 800303c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d023      	beq.n	8003090 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003048:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800304a:	6a38      	ldr	r0, [r7, #32]
 800304c:	f002 fcf0 	bl	8005a30 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003052:	4613      	mov	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	3338      	adds	r3, #56	; 0x38
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	4413      	add	r3, r2
 8003060:	3304      	adds	r3, #4
 8003062:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	78db      	ldrb	r3, [r3, #3]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d108      	bne.n	800307e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2200      	movs	r2, #0
 8003070:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	b2db      	uxtb	r3, r3
 8003076:	4619      	mov	r1, r3
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f006 f94d 	bl	8009318 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	4413      	add	r3, r2
 8003086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800308a:	461a      	mov	r2, r3
 800308c:	2302      	movs	r3, #2
 800308e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800309a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 fcdb 	bl	8003a58 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	3301      	adds	r3, #1
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030aa:	085b      	lsrs	r3, r3, #1
 80030ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f47f af2e 	bne.w	8002f12 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f003 fcda 	bl	8006a74 <USB_ReadInterrupts>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030ca:	d122      	bne.n	8003112 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	69fa      	ldr	r2, [r7, #28]
 80030d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030da:	f023 0301 	bic.w	r3, r3, #1
 80030de:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d108      	bne.n	80030fc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80030f2:	2100      	movs	r1, #0
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 fec3 	bl	8003e80 <HAL_PCDEx_LPM_Callback>
 80030fa:	e002      	b.n	8003102 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f006 f8eb 	bl	80092d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695a      	ldr	r2, [r3, #20]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003110:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f003 fcac 	bl	8006a74 <USB_ReadInterrupts>
 800311c:	4603      	mov	r3, r0
 800311e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003126:	d112      	bne.n	800314e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b01      	cmp	r3, #1
 8003136:	d102      	bne.n	800313e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f006 f8a7 	bl	800928c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695a      	ldr	r2, [r3, #20]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800314c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f003 fc8e 	bl	8006a74 <USB_ReadInterrupts>
 8003158:	4603      	mov	r3, r0
 800315a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800315e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003162:	f040 80b7 	bne.w	80032d4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	69fa      	ldr	r2, [r7, #28]
 8003170:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003174:	f023 0301 	bic.w	r3, r3, #1
 8003178:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2110      	movs	r1, #16
 8003180:	4618      	mov	r0, r3
 8003182:	f002 fc55 	bl	8005a30 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003186:	2300      	movs	r3, #0
 8003188:	62fb      	str	r3, [r7, #44]	; 0x2c
 800318a:	e046      	b.n	800321a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800318c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	4413      	add	r3, r2
 8003194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003198:	461a      	mov	r2, r3
 800319a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800319e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80031a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031b0:	0151      	lsls	r1, r2, #5
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	440a      	add	r2, r1
 80031b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031be:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80031c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031cc:	461a      	mov	r2, r3
 80031ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031d2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80031d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031e4:	0151      	lsls	r1, r2, #5
 80031e6:	69fa      	ldr	r2, [r7, #28]
 80031e8:	440a      	add	r2, r1
 80031ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80031f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f6:	015a      	lsls	r2, r3, #5
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003204:	0151      	lsls	r1, r2, #5
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	440a      	add	r2, r1
 800320a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800320e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003212:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003216:	3301      	adds	r3, #1
 8003218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003220:	429a      	cmp	r2, r3
 8003222:	d3b3      	bcc.n	800318c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	69fa      	ldr	r2, [r7, #28]
 800322e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003232:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003236:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	2b00      	cmp	r3, #0
 800323e:	d016      	beq.n	800326e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800324a:	69fa      	ldr	r2, [r7, #28]
 800324c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003250:	f043 030b 	orr.w	r3, r3, #11
 8003254:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800325e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003260:	69fa      	ldr	r2, [r7, #28]
 8003262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003266:	f043 030b 	orr.w	r3, r3, #11
 800326a:	6453      	str	r3, [r2, #68]	; 0x44
 800326c:	e015      	b.n	800329a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	69fa      	ldr	r2, [r7, #28]
 8003278:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800327c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003280:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003284:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	69fa      	ldr	r2, [r7, #28]
 8003290:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003294:	f043 030b 	orr.w	r3, r3, #11
 8003298:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032a8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80032ac:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032be:	461a      	mov	r2, r3
 80032c0:	f003 fc9c 	bl	8006bfc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80032d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f003 fbcb 	bl	8006a74 <USB_ReadInterrupts>
 80032de:	4603      	mov	r3, r0
 80032e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e8:	d124      	bne.n	8003334 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f003 fc61 	bl	8006bb6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f002 fc16 	bl	8005b2a <USB_GetDevSpeed>
 80032fe:	4603      	mov	r3, r0
 8003300:	461a      	mov	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681c      	ldr	r4, [r3, #0]
 800330a:	f001 fa29 	bl	8004760 <HAL_RCC_GetHCLKFreq>
 800330e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003314:	b2db      	uxtb	r3, r3
 8003316:	461a      	mov	r2, r3
 8003318:	4620      	mov	r0, r4
 800331a:	f002 f915 	bl	8005548 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f005 ff8b 	bl	800923a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003332:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f003 fb9b 	bl	8006a74 <USB_ReadInterrupts>
 800333e:	4603      	mov	r3, r0
 8003340:	f003 0308 	and.w	r3, r3, #8
 8003344:	2b08      	cmp	r3, #8
 8003346:	d10a      	bne.n	800335e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f005 ff68 	bl	800921e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695a      	ldr	r2, [r3, #20]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f002 0208 	and.w	r2, r2, #8
 800335c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f003 fb86 	bl	8006a74 <USB_ReadInterrupts>
 8003368:	4603      	mov	r3, r0
 800336a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336e:	2b80      	cmp	r3, #128	; 0x80
 8003370:	d122      	bne.n	80033b8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800337e:	2301      	movs	r3, #1
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
 8003382:	e014      	b.n	80033ae <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003388:	4613      	mov	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d105      	bne.n	80033a8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	4619      	mov	r1, r3
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fb27 	bl	80039f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	3301      	adds	r3, #1
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d3e5      	bcc.n	8003384 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f003 fb59 	bl	8006a74 <USB_ReadInterrupts>
 80033c2:	4603      	mov	r3, r0
 80033c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033cc:	d13b      	bne.n	8003446 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033ce:	2301      	movs	r3, #1
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
 80033d2:	e02b      	b.n	800342c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e8:	4613      	mov	r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	4413      	add	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	3340      	adds	r3, #64	; 0x40
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d115      	bne.n	8003426 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80033fa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	da12      	bge.n	8003426 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4413      	add	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	333f      	adds	r3, #63	; 0x3f
 8003410:	2201      	movs	r2, #1
 8003412:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	b2db      	uxtb	r3, r3
 8003418:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800341c:	b2db      	uxtb	r3, r3
 800341e:	4619      	mov	r1, r3
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 fae8 	bl	80039f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	3301      	adds	r3, #1
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003432:	429a      	cmp	r2, r3
 8003434:	d3ce      	bcc.n	80033d4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695a      	ldr	r2, [r3, #20]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003444:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f003 fb12 	bl	8006a74 <USB_ReadInterrupts>
 8003450:	4603      	mov	r3, r0
 8003452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003456:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800345a:	d155      	bne.n	8003508 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800345c:	2301      	movs	r3, #1
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
 8003460:	e045      	b.n	80034ee <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	4413      	add	r3, r2
 800346a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003476:	4613      	mov	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	4413      	add	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d12e      	bne.n	80034e8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800348a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800348c:	2b00      	cmp	r3, #0
 800348e:	da2b      	bge.n	80034e8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800349c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d121      	bne.n	80034e8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a8:	4613      	mov	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80034b6:	2201      	movs	r2, #1
 80034b8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10a      	bne.n	80034e8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034e4:	6053      	str	r3, [r2, #4]
            break;
 80034e6:	e007      	b.n	80034f8 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	3301      	adds	r3, #1
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d3b4      	bcc.n	8003462 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003506:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f003 fab1 	bl	8006a74 <USB_ReadInterrupts>
 8003512:	4603      	mov	r3, r0
 8003514:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800351c:	d10a      	bne.n	8003534 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f005 ff0c 	bl	800933c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695a      	ldr	r2, [r3, #20]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003532:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f003 fa9b 	bl	8006a74 <USB_ReadInterrupts>
 800353e:	4603      	mov	r3, r0
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b04      	cmp	r3, #4
 8003546:	d115      	bne.n	8003574 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f005 fefc 	bl	8009358 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6859      	ldr	r1, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	430a      	orrs	r2, r1
 800356e:	605a      	str	r2, [r3, #4]
 8003570:	e000      	b.n	8003574 <HAL_PCD_IRQHandler+0x938>
      return;
 8003572:	bf00      	nop
    }
  }
}
 8003574:	3734      	adds	r7, #52	; 0x34
 8003576:	46bd      	mov	sp, r7
 8003578:	bd90      	pop	{r4, r7, pc}

0800357a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	460b      	mov	r3, r1
 8003584:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <HAL_PCD_SetAddress+0x1a>
 8003590:	2302      	movs	r3, #2
 8003592:	e013      	b.n	80035bc <HAL_PCD_SetAddress+0x42>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	78fa      	ldrb	r2, [r7, #3]
 80035a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	78fa      	ldrb	r2, [r7, #3]
 80035aa:	4611      	mov	r1, r2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f003 f9f9 	bl	80069a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	4608      	mov	r0, r1
 80035ce:	4611      	mov	r1, r2
 80035d0:	461a      	mov	r2, r3
 80035d2:	4603      	mov	r3, r0
 80035d4:	70fb      	strb	r3, [r7, #3]
 80035d6:	460b      	mov	r3, r1
 80035d8:	803b      	strh	r3, [r7, #0]
 80035da:	4613      	mov	r3, r2
 80035dc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	da0f      	bge.n	800360a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ea:	78fb      	ldrb	r3, [r7, #3]
 80035ec:	f003 020f 	and.w	r2, r3, #15
 80035f0:	4613      	mov	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	3338      	adds	r3, #56	; 0x38
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	4413      	add	r3, r2
 80035fe:	3304      	adds	r3, #4
 8003600:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	705a      	strb	r2, [r3, #1]
 8003608:	e00f      	b.n	800362a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800360a:	78fb      	ldrb	r3, [r7, #3]
 800360c:	f003 020f 	and.w	r2, r3, #15
 8003610:	4613      	mov	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	4413      	add	r3, r2
 8003620:	3304      	adds	r3, #4
 8003622:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800362a:	78fb      	ldrb	r3, [r7, #3]
 800362c:	f003 030f 	and.w	r3, r3, #15
 8003630:	b2da      	uxtb	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003636:	883a      	ldrh	r2, [r7, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	78ba      	ldrb	r2, [r7, #2]
 8003640:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	785b      	ldrb	r3, [r3, #1]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d004      	beq.n	8003654 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003654:	78bb      	ldrb	r3, [r7, #2]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d102      	bne.n	8003660 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_PCD_EP_Open+0xaa>
 800366a:	2302      	movs	r3, #2
 800366c:	e00e      	b.n	800368c <HAL_PCD_EP_Open+0xc8>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68f9      	ldr	r1, [r7, #12]
 800367c:	4618      	mov	r0, r3
 800367e:	f002 fa79 	bl	8005b74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800368a:	7afb      	ldrb	r3, [r7, #11]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	da0f      	bge.n	80036c8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	f003 020f 	and.w	r2, r3, #15
 80036ae:	4613      	mov	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	3338      	adds	r3, #56	; 0x38
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	4413      	add	r3, r2
 80036bc:	3304      	adds	r3, #4
 80036be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2201      	movs	r2, #1
 80036c4:	705a      	strb	r2, [r3, #1]
 80036c6:	e00f      	b.n	80036e8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	f003 020f 	and.w	r2, r3, #15
 80036ce:	4613      	mov	r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	4413      	add	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	4413      	add	r3, r2
 80036de:	3304      	adds	r3, #4
 80036e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d101      	bne.n	8003702 <HAL_PCD_EP_Close+0x6e>
 80036fe:	2302      	movs	r3, #2
 8003700:	e00e      	b.n	8003720 <HAL_PCD_EP_Close+0x8c>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68f9      	ldr	r1, [r7, #12]
 8003710:	4618      	mov	r0, r3
 8003712:	f002 fab7 	bl	8005c84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	607a      	str	r2, [r7, #4]
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	460b      	mov	r3, r1
 8003736:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003738:	7afb      	ldrb	r3, [r7, #11]
 800373a:	f003 020f 	and.w	r2, r3, #15
 800373e:	4613      	mov	r3, r2
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	4413      	add	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4413      	add	r3, r2
 800374e:	3304      	adds	r3, #4
 8003750:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2200      	movs	r2, #0
 8003762:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2200      	movs	r2, #0
 8003768:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800376a:	7afb      	ldrb	r3, [r7, #11]
 800376c:	f003 030f 	and.w	r3, r3, #15
 8003770:	b2da      	uxtb	r2, r3
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d102      	bne.n	8003784 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003784:	7afb      	ldrb	r3, [r7, #11]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	2b00      	cmp	r3, #0
 800378c:	d109      	bne.n	80037a2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	b2db      	uxtb	r3, r3
 8003798:	461a      	mov	r2, r3
 800379a:	6979      	ldr	r1, [r7, #20]
 800379c:	f002 fd96 	bl	80062cc <USB_EP0StartXfer>
 80037a0:	e008      	b.n	80037b4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	461a      	mov	r2, r3
 80037ae:	6979      	ldr	r1, [r7, #20]
 80037b0:	f002 fb44 	bl	8005e3c <USB_EPStartXfer>
  }

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	460b      	mov	r3, r1
 80037c8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80037ca:	78fb      	ldrb	r3, [r7, #3]
 80037cc:	f003 020f 	and.w	r2, r3, #15
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80037e0:	681b      	ldr	r3, [r3, #0]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b086      	sub	sp, #24
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	603b      	str	r3, [r7, #0]
 80037fa:	460b      	mov	r3, r1
 80037fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037fe:	7afb      	ldrb	r3, [r7, #11]
 8003800:	f003 020f 	and.w	r2, r3, #15
 8003804:	4613      	mov	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	3338      	adds	r3, #56	; 0x38
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4413      	add	r3, r2
 8003812:	3304      	adds	r3, #4
 8003814:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2200      	movs	r2, #0
 8003826:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	2201      	movs	r2, #1
 800382c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800382e:	7afb      	ldrb	r3, [r7, #11]
 8003830:	f003 030f 	and.w	r3, r3, #15
 8003834:	b2da      	uxtb	r2, r3
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d102      	bne.n	8003848 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003848:	7afb      	ldrb	r3, [r7, #11]
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	b2db      	uxtb	r3, r3
 800385c:	461a      	mov	r2, r3
 800385e:	6979      	ldr	r1, [r7, #20]
 8003860:	f002 fd34 	bl	80062cc <USB_EP0StartXfer>
 8003864:	e008      	b.n	8003878 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	461a      	mov	r2, r3
 8003872:	6979      	ldr	r1, [r7, #20]
 8003874:	f002 fae2 	bl	8005e3c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b084      	sub	sp, #16
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	460b      	mov	r3, r1
 800388c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	f003 020f 	and.w	r2, r3, #15
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	429a      	cmp	r2, r3
 800389a:	d901      	bls.n	80038a0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e050      	b.n	8003942 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	da0f      	bge.n	80038c8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038a8:	78fb      	ldrb	r3, [r7, #3]
 80038aa:	f003 020f 	and.w	r2, r3, #15
 80038ae:	4613      	mov	r3, r2
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	4413      	add	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	3338      	adds	r3, #56	; 0x38
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	4413      	add	r3, r2
 80038bc:	3304      	adds	r3, #4
 80038be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	705a      	strb	r2, [r3, #1]
 80038c6:	e00d      	b.n	80038e4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	4613      	mov	r3, r2
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	3304      	adds	r3, #4
 80038dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2201      	movs	r2, #1
 80038e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038ea:	78fb      	ldrb	r3, [r7, #3]
 80038ec:	f003 030f 	and.w	r3, r3, #15
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_PCD_EP_SetStall+0x82>
 8003900:	2302      	movs	r3, #2
 8003902:	e01e      	b.n	8003942 <HAL_PCD_EP_SetStall+0xc0>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68f9      	ldr	r1, [r7, #12]
 8003912:	4618      	mov	r0, r3
 8003914:	f002 ff72 	bl	80067fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10a      	bne.n	8003938 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	b2d9      	uxtb	r1, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003932:	461a      	mov	r2, r3
 8003934:	f003 f962 	bl	8006bfc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	460b      	mov	r3, r1
 8003954:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003956:	78fb      	ldrb	r3, [r7, #3]
 8003958:	f003 020f 	and.w	r2, r3, #15
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	429a      	cmp	r2, r3
 8003962:	d901      	bls.n	8003968 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e042      	b.n	80039ee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003968:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800396c:	2b00      	cmp	r3, #0
 800396e:	da0f      	bge.n	8003990 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	f003 020f 	and.w	r2, r3, #15
 8003976:	4613      	mov	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	3338      	adds	r3, #56	; 0x38
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	4413      	add	r3, r2
 8003984:	3304      	adds	r3, #4
 8003986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2201      	movs	r2, #1
 800398c:	705a      	strb	r2, [r3, #1]
 800398e:	e00f      	b.n	80039b0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003990:	78fb      	ldrb	r3, [r7, #3]
 8003992:	f003 020f 	and.w	r2, r3, #15
 8003996:	4613      	mov	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	3304      	adds	r3, #4
 80039a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039b6:	78fb      	ldrb	r3, [r7, #3]
 80039b8:	f003 030f 	and.w	r3, r3, #15
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_PCD_EP_ClrStall+0x86>
 80039cc:	2302      	movs	r3, #2
 80039ce:	e00e      	b.n	80039ee <HAL_PCD_EP_ClrStall+0xa4>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68f9      	ldr	r1, [r7, #12]
 80039de:	4618      	mov	r0, r3
 80039e0:	f002 ff7a 	bl	80068d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	460b      	mov	r3, r1
 8003a00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003a02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	da0c      	bge.n	8003a24 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a0a:	78fb      	ldrb	r3, [r7, #3]
 8003a0c:	f003 020f 	and.w	r2, r3, #15
 8003a10:	4613      	mov	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	3338      	adds	r3, #56	; 0x38
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3304      	adds	r3, #4
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	e00c      	b.n	8003a3e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	f003 020f 	and.w	r2, r3, #15
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	4413      	add	r3, r2
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68f9      	ldr	r1, [r7, #12]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f002 fd99 	bl	800657c <USB_EPStopXfer>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003a4e:	7afb      	ldrb	r3, [r7, #11]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08a      	sub	sp, #40	; 0x28
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	4413      	add	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	3338      	adds	r3, #56	; 0x38
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a1a      	ldr	r2, [r3, #32]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d901      	bls.n	8003a90 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e06c      	b.n	8003b6a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	699a      	ldr	r2, [r3, #24]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	69fa      	ldr	r2, [r7, #28]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d902      	bls.n	8003aac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	3303      	adds	r3, #3
 8003ab0:	089b      	lsrs	r3, r3, #2
 8003ab2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ab4:	e02b      	b.n	8003b0e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	699a      	ldr	r2, [r3, #24]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	69fa      	ldr	r2, [r7, #28]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d902      	bls.n	8003ad2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	3303      	adds	r3, #3
 8003ad6:	089b      	lsrs	r3, r3, #2
 8003ad8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6919      	ldr	r1, [r3, #16]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	4603      	mov	r3, r0
 8003af0:	6978      	ldr	r0, [r7, #20]
 8003af2:	f002 fded 	bl	80066d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	691a      	ldr	r2, [r3, #16]
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	441a      	add	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a1a      	ldr	r2, [r3, #32]
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	441a      	add	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d809      	bhi.n	8003b38 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a1a      	ldr	r2, [r3, #32]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d203      	bcs.n	8003b38 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1be      	bne.n	8003ab6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	699a      	ldr	r2, [r3, #24]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d811      	bhi.n	8003b68 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	6939      	ldr	r1, [r7, #16]
 8003b60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b64:	4013      	ands	r3, r2
 8003b66:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3720      	adds	r7, #32
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	333c      	adds	r3, #60	; 0x3c
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d17b      	bne.n	8003ca2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d015      	beq.n	8003be0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	4a61      	ldr	r2, [pc, #388]	; (8003d3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	f240 80b9 	bls.w	8003d30 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 80b3 	beq.w	8003d30 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bdc:	6093      	str	r3, [r2, #8]
 8003bde:	e0a7      	b.n	8003d30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d009      	beq.n	8003bfe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	2320      	movs	r3, #32
 8003bfa:	6093      	str	r3, [r2, #8]
 8003bfc:	e098      	b.n	8003d30 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f040 8093 	bne.w	8003d30 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	4a4b      	ldr	r2, [pc, #300]	; (8003d3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d90f      	bls.n	8003c32 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c28:	461a      	mov	r2, r3
 8003c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c2e:	6093      	str	r3, [r2, #8]
 8003c30:	e07e      	b.n	8003d30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	4613      	mov	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	4413      	add	r3, r2
 8003c44:	3304      	adds	r3, #4
 8003c46:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	69da      	ldr	r2, [r3, #28]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	0159      	lsls	r1, r3, #5
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	440b      	add	r3, r1
 8003c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c5e:	1ad2      	subs	r2, r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d114      	bne.n	8003c94 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d109      	bne.n	8003c86 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6818      	ldr	r0, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	2101      	movs	r1, #1
 8003c80:	f002 ffbc 	bl	8006bfc <USB_EP0_OutStart>
 8003c84:	e006      	b.n	8003c94 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	691a      	ldr	r2, [r3, #16]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	441a      	add	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	4619      	mov	r1, r3
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f005 fa8a 	bl	80091b4 <HAL_PCD_DataOutStageCallback>
 8003ca0:	e046      	b.n	8003d30 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	4a26      	ldr	r2, [pc, #152]	; (8003d40 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d124      	bne.n	8003cf4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cc6:	6093      	str	r3, [r2, #8]
 8003cc8:	e032      	b.n	8003d30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d008      	beq.n	8003ce6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	2320      	movs	r3, #32
 8003ce4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	4619      	mov	r1, r3
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f005 fa61 	bl	80091b4 <HAL_PCD_DataOutStageCallback>
 8003cf2:	e01d      	b.n	8003d30 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d114      	bne.n	8003d24 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d108      	bne.n	8003d24 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	2100      	movs	r1, #0
 8003d20:	f002 ff6c 	bl	8006bfc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	4619      	mov	r1, r3
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f005 fa42 	bl	80091b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3720      	adds	r7, #32
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	4f54300a 	.word	0x4f54300a
 8003d40:	4f54310a 	.word	0x4f54310a

08003d44 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	333c      	adds	r3, #60	; 0x3c
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	015a      	lsls	r2, r3, #5
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4a15      	ldr	r2, [pc, #84]	; (8003dcc <PCD_EP_OutSetupPacket_int+0x88>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d90e      	bls.n	8003d98 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d009      	beq.n	8003d98 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d90:	461a      	mov	r2, r3
 8003d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d96:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f005 f9f9 	bl	8009190 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4a0a      	ldr	r2, [pc, #40]	; (8003dcc <PCD_EP_OutSetupPacket_int+0x88>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d90c      	bls.n	8003dc0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d108      	bne.n	8003dc0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6818      	ldr	r0, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003db8:	461a      	mov	r2, r3
 8003dba:	2101      	movs	r1, #1
 8003dbc:	f002 ff1e 	bl	8006bfc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	4f54300a 	.word	0x4f54300a

08003dd0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	70fb      	strb	r3, [r7, #3]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d107      	bne.n	8003dfe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003dee:	883b      	ldrh	r3, [r7, #0]
 8003df0:	0419      	lsls	r1, r3, #16
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	629a      	str	r2, [r3, #40]	; 0x28
 8003dfc:	e028      	b.n	8003e50 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e04:	0c1b      	lsrs	r3, r3, #16
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	4413      	add	r3, r2
 8003e0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	73fb      	strb	r3, [r7, #15]
 8003e10:	e00d      	b.n	8003e2e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	3340      	adds	r3, #64	; 0x40
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	0c1b      	lsrs	r3, r3, #16
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	4413      	add	r3, r2
 8003e26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	73fb      	strb	r3, [r7, #15]
 8003e2e:	7bfa      	ldrb	r2, [r7, #15]
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d3ec      	bcc.n	8003e12 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e38:	883b      	ldrh	r3, [r7, #0]
 8003e3a:	0418      	lsls	r0, r3, #16
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6819      	ldr	r1, [r3, #0]
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	4302      	orrs	r2, r0
 8003e48:	3340      	adds	r3, #64	; 0x40
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	460b      	mov	r3, r1
 8003e68:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	887a      	ldrh	r2, [r7, #2]
 8003e70:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e267      	b.n	800437a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d075      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eb6:	4b88      	ldr	r3, [pc, #544]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d00c      	beq.n	8003edc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ec2:	4b85      	ldr	r3, [pc, #532]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d112      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ece:	4b82      	ldr	r3, [pc, #520]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eda:	d10b      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003edc:	4b7e      	ldr	r3, [pc, #504]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d05b      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x108>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d157      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e242      	b.n	800437a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003efc:	d106      	bne.n	8003f0c <HAL_RCC_OscConfig+0x74>
 8003efe:	4b76      	ldr	r3, [pc, #472]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a75      	ldr	r2, [pc, #468]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 8003f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	e01d      	b.n	8003f48 <HAL_RCC_OscConfig+0xb0>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f14:	d10c      	bne.n	8003f30 <HAL_RCC_OscConfig+0x98>
 8003f16:	4b70      	ldr	r3, [pc, #448]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a6f      	ldr	r2, [pc, #444]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 8003f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	4b6d      	ldr	r3, [pc, #436]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a6c      	ldr	r2, [pc, #432]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 8003f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	e00b      	b.n	8003f48 <HAL_RCC_OscConfig+0xb0>
 8003f30:	4b69      	ldr	r3, [pc, #420]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a68      	ldr	r2, [pc, #416]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 8003f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	4b66      	ldr	r3, [pc, #408]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a65      	ldr	r2, [pc, #404]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 8003f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d013      	beq.n	8003f78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f50:	f7fd fe46 	bl	8001be0 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f58:	f7fd fe42 	bl	8001be0 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b64      	cmp	r3, #100	; 0x64
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e207      	b.n	800437a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f6a:	4b5b      	ldr	r3, [pc, #364]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCC_OscConfig+0xc0>
 8003f76:	e014      	b.n	8003fa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f78:	f7fd fe32 	bl	8001be0 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f80:	f7fd fe2e 	bl	8001be0 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b64      	cmp	r3, #100	; 0x64
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e1f3      	b.n	800437a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f92:	4b51      	ldr	r3, [pc, #324]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0xe8>
 8003f9e:	e000      	b.n	8003fa2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d063      	beq.n	8004076 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fae:	4b4a      	ldr	r3, [pc, #296]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 030c 	and.w	r3, r3, #12
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00b      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fba:	4b47      	ldr	r3, [pc, #284]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	d11c      	bne.n	8004000 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fc6:	4b44      	ldr	r3, [pc, #272]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d116      	bne.n	8004000 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fd2:	4b41      	ldr	r3, [pc, #260]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d005      	beq.n	8003fea <HAL_RCC_OscConfig+0x152>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d001      	beq.n	8003fea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e1c7      	b.n	800437a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fea:	4b3b      	ldr	r3, [pc, #236]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4937      	ldr	r1, [pc, #220]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ffe:	e03a      	b.n	8004076 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d020      	beq.n	800404a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004008:	4b34      	ldr	r3, [pc, #208]	; (80040dc <HAL_RCC_OscConfig+0x244>)
 800400a:	2201      	movs	r2, #1
 800400c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400e:	f7fd fde7 	bl	8001be0 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004016:	f7fd fde3 	bl	8001be0 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e1a8      	b.n	800437a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004028:	4b2b      	ldr	r3, [pc, #172]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0f0      	beq.n	8004016 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004034:	4b28      	ldr	r3, [pc, #160]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	4925      	ldr	r1, [pc, #148]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 8004044:	4313      	orrs	r3, r2
 8004046:	600b      	str	r3, [r1, #0]
 8004048:	e015      	b.n	8004076 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800404a:	4b24      	ldr	r3, [pc, #144]	; (80040dc <HAL_RCC_OscConfig+0x244>)
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004050:	f7fd fdc6 	bl	8001be0 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004058:	f7fd fdc2 	bl	8001be0 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e187      	b.n	800437a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800406a:	4b1b      	ldr	r3, [pc, #108]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f0      	bne.n	8004058 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b00      	cmp	r3, #0
 8004080:	d036      	beq.n	80040f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d016      	beq.n	80040b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800408a:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <HAL_RCC_OscConfig+0x248>)
 800408c:	2201      	movs	r2, #1
 800408e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004090:	f7fd fda6 	bl	8001be0 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004098:	f7fd fda2 	bl	8001be0 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e167      	b.n	800437a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040aa:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <HAL_RCC_OscConfig+0x240>)
 80040ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCC_OscConfig+0x200>
 80040b6:	e01b      	b.n	80040f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040b8:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <HAL_RCC_OscConfig+0x248>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040be:	f7fd fd8f 	bl	8001be0 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c4:	e00e      	b.n	80040e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040c6:	f7fd fd8b 	bl	8001be0 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d907      	bls.n	80040e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e150      	b.n	800437a <HAL_RCC_OscConfig+0x4e2>
 80040d8:	40023800 	.word	0x40023800
 80040dc:	42470000 	.word	0x42470000
 80040e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e4:	4b88      	ldr	r3, [pc, #544]	; (8004308 <HAL_RCC_OscConfig+0x470>)
 80040e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1ea      	bne.n	80040c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 8097 	beq.w	800422c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040fe:	2300      	movs	r3, #0
 8004100:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004102:	4b81      	ldr	r3, [pc, #516]	; (8004308 <HAL_RCC_OscConfig+0x470>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10f      	bne.n	800412e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800410e:	2300      	movs	r3, #0
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	4b7d      	ldr	r3, [pc, #500]	; (8004308 <HAL_RCC_OscConfig+0x470>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	4a7c      	ldr	r2, [pc, #496]	; (8004308 <HAL_RCC_OscConfig+0x470>)
 8004118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411c:	6413      	str	r3, [r2, #64]	; 0x40
 800411e:	4b7a      	ldr	r3, [pc, #488]	; (8004308 <HAL_RCC_OscConfig+0x470>)
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004126:	60bb      	str	r3, [r7, #8]
 8004128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800412a:	2301      	movs	r3, #1
 800412c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412e:	4b77      	ldr	r3, [pc, #476]	; (800430c <HAL_RCC_OscConfig+0x474>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004136:	2b00      	cmp	r3, #0
 8004138:	d118      	bne.n	800416c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800413a:	4b74      	ldr	r3, [pc, #464]	; (800430c <HAL_RCC_OscConfig+0x474>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a73      	ldr	r2, [pc, #460]	; (800430c <HAL_RCC_OscConfig+0x474>)
 8004140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004146:	f7fd fd4b 	bl	8001be0 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800414e:	f7fd fd47 	bl	8001be0 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e10c      	b.n	800437a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004160:	4b6a      	ldr	r3, [pc, #424]	; (800430c <HAL_RCC_OscConfig+0x474>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0f0      	beq.n	800414e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d106      	bne.n	8004182 <HAL_RCC_OscConfig+0x2ea>
 8004174:	4b64      	ldr	r3, [pc, #400]	; (8004308 <HAL_RCC_OscConfig+0x470>)
 8004176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004178:	4a63      	ldr	r2, [pc, #396]	; (8004308 <HAL_RCC_OscConfig+0x470>)
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	6713      	str	r3, [r2, #112]	; 0x70
 8004180:	e01c      	b.n	80041bc <HAL_RCC_OscConfig+0x324>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	2b05      	cmp	r3, #5
 8004188:	d10c      	bne.n	80041a4 <HAL_RCC_OscConfig+0x30c>
 800418a:	4b5f      	ldr	r3, [pc, #380]	; (8004308 <HAL_RCC_OscConfig+0x470>)
 800418c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418e:	4a5e      	ldr	r2, [pc, #376]	; (8004308 <HAL_RCC_OscConfig+0x470>)
 8004190:	f043 0304 	orr.w	r3, r3, #4
 8004194:	6713      	str	r3, [r2, #112]	; 0x70
 8004196:	4b5c      	ldr	r3, [pc, #368]	; (8004308 <HAL_RCC_OscConfig+0x470>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419a:	4a5b      	ldr	r2, [pc, #364]	; (8004308 <HAL_RCC_OscConfig+0x470>)
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	6713      	str	r3, [r2, #112]	; 0x70
 80041a2:	e00b      	b.n	80041bc <HAL_RCC_OscConfig+0x324>
 80041a4:	4b58      	ldr	r3, [pc, #352]	; (8004308 <HAL_RCC_OscConfig+0x470>)
 80041a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a8:	4a57      	ldr	r2, [pc, #348]	; (8004308 <HAL_RCC_OscConfig+0x470>)
 80041aa:	f023 0301 	bic.w	r3, r3, #1
 80041ae:	6713      	str	r3, [r2, #112]	; 0x70
 80041b0:	4b55      	ldr	r3, [pc, #340]	; (8004308 <HAL_RCC_OscConfig+0x470>)
 80041b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b4:	4a54      	ldr	r2, [pc, #336]	; (8004308 <HAL_RCC_OscConfig+0x470>)
 80041b6:	f023 0304 	bic.w	r3, r3, #4
 80041ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d015      	beq.n	80041f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c4:	f7fd fd0c 	bl	8001be0 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ca:	e00a      	b.n	80041e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041cc:	f7fd fd08 	bl	8001be0 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041da:	4293      	cmp	r3, r2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e0cb      	b.n	800437a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e2:	4b49      	ldr	r3, [pc, #292]	; (8004308 <HAL_RCC_OscConfig+0x470>)
 80041e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0ee      	beq.n	80041cc <HAL_RCC_OscConfig+0x334>
 80041ee:	e014      	b.n	800421a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f0:	f7fd fcf6 	bl	8001be0 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041f6:	e00a      	b.n	800420e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041f8:	f7fd fcf2 	bl	8001be0 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	f241 3288 	movw	r2, #5000	; 0x1388
 8004206:	4293      	cmp	r3, r2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e0b5      	b.n	800437a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800420e:	4b3e      	ldr	r3, [pc, #248]	; (8004308 <HAL_RCC_OscConfig+0x470>)
 8004210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1ee      	bne.n	80041f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800421a:	7dfb      	ldrb	r3, [r7, #23]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d105      	bne.n	800422c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004220:	4b39      	ldr	r3, [pc, #228]	; (8004308 <HAL_RCC_OscConfig+0x470>)
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	4a38      	ldr	r2, [pc, #224]	; (8004308 <HAL_RCC_OscConfig+0x470>)
 8004226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800422a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 80a1 	beq.w	8004378 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004236:	4b34      	ldr	r3, [pc, #208]	; (8004308 <HAL_RCC_OscConfig+0x470>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
 800423e:	2b08      	cmp	r3, #8
 8004240:	d05c      	beq.n	80042fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d141      	bne.n	80042ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800424a:	4b31      	ldr	r3, [pc, #196]	; (8004310 <HAL_RCC_OscConfig+0x478>)
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004250:	f7fd fcc6 	bl	8001be0 <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004258:	f7fd fcc2 	bl	8001be0 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e087      	b.n	800437a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426a:	4b27      	ldr	r3, [pc, #156]	; (8004308 <HAL_RCC_OscConfig+0x470>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f0      	bne.n	8004258 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69da      	ldr	r2, [r3, #28]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	019b      	lsls	r3, r3, #6
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	085b      	lsrs	r3, r3, #1
 800428e:	3b01      	subs	r3, #1
 8004290:	041b      	lsls	r3, r3, #16
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	061b      	lsls	r3, r3, #24
 800429a:	491b      	ldr	r1, [pc, #108]	; (8004308 <HAL_RCC_OscConfig+0x470>)
 800429c:	4313      	orrs	r3, r2
 800429e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042a0:	4b1b      	ldr	r3, [pc, #108]	; (8004310 <HAL_RCC_OscConfig+0x478>)
 80042a2:	2201      	movs	r2, #1
 80042a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a6:	f7fd fc9b 	bl	8001be0 <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ae:	f7fd fc97 	bl	8001be0 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e05c      	b.n	800437a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c0:	4b11      	ldr	r3, [pc, #68]	; (8004308 <HAL_RCC_OscConfig+0x470>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0f0      	beq.n	80042ae <HAL_RCC_OscConfig+0x416>
 80042cc:	e054      	b.n	8004378 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ce:	4b10      	ldr	r3, [pc, #64]	; (8004310 <HAL_RCC_OscConfig+0x478>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d4:	f7fd fc84 	bl	8001be0 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042dc:	f7fd fc80 	bl	8001be0 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e045      	b.n	800437a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ee:	4b06      	ldr	r3, [pc, #24]	; (8004308 <HAL_RCC_OscConfig+0x470>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f0      	bne.n	80042dc <HAL_RCC_OscConfig+0x444>
 80042fa:	e03d      	b.n	8004378 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d107      	bne.n	8004314 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e038      	b.n	800437a <HAL_RCC_OscConfig+0x4e2>
 8004308:	40023800 	.word	0x40023800
 800430c:	40007000 	.word	0x40007000
 8004310:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004314:	4b1b      	ldr	r3, [pc, #108]	; (8004384 <HAL_RCC_OscConfig+0x4ec>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d028      	beq.n	8004374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800432c:	429a      	cmp	r2, r3
 800432e:	d121      	bne.n	8004374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800433a:	429a      	cmp	r2, r3
 800433c:	d11a      	bne.n	8004374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004344:	4013      	ands	r3, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800434a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800434c:	4293      	cmp	r3, r2
 800434e:	d111      	bne.n	8004374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435a:	085b      	lsrs	r3, r3, #1
 800435c:	3b01      	subs	r3, #1
 800435e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004360:	429a      	cmp	r2, r3
 8004362:	d107      	bne.n	8004374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004370:	429a      	cmp	r2, r3
 8004372:	d001      	beq.n	8004378 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e000      	b.n	800437a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40023800 	.word	0x40023800

08004388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e0cc      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800439c:	4b68      	ldr	r3, [pc, #416]	; (8004540 <HAL_RCC_ClockConfig+0x1b8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d90c      	bls.n	80043c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043aa:	4b65      	ldr	r3, [pc, #404]	; (8004540 <HAL_RCC_ClockConfig+0x1b8>)
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b2:	4b63      	ldr	r3, [pc, #396]	; (8004540 <HAL_RCC_ClockConfig+0x1b8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d001      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0b8      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d020      	beq.n	8004412 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043dc:	4b59      	ldr	r3, [pc, #356]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	4a58      	ldr	r2, [pc, #352]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80043e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0308 	and.w	r3, r3, #8
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043f4:	4b53      	ldr	r3, [pc, #332]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	4a52      	ldr	r2, [pc, #328]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004400:	4b50      	ldr	r3, [pc, #320]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	494d      	ldr	r1, [pc, #308]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	4313      	orrs	r3, r2
 8004410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d044      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d107      	bne.n	8004436 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004426:	4b47      	ldr	r3, [pc, #284]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d119      	bne.n	8004466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e07f      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d003      	beq.n	8004446 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004442:	2b03      	cmp	r3, #3
 8004444:	d107      	bne.n	8004456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004446:	4b3f      	ldr	r3, [pc, #252]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d109      	bne.n	8004466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e06f      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004456:	4b3b      	ldr	r3, [pc, #236]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e067      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004466:	4b37      	ldr	r3, [pc, #220]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f023 0203 	bic.w	r2, r3, #3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	4934      	ldr	r1, [pc, #208]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004474:	4313      	orrs	r3, r2
 8004476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004478:	f7fd fbb2 	bl	8001be0 <HAL_GetTick>
 800447c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800447e:	e00a      	b.n	8004496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004480:	f7fd fbae 	bl	8001be0 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	f241 3288 	movw	r2, #5000	; 0x1388
 800448e:	4293      	cmp	r3, r2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e04f      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004496:	4b2b      	ldr	r3, [pc, #172]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 020c 	and.w	r2, r3, #12
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d1eb      	bne.n	8004480 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044a8:	4b25      	ldr	r3, [pc, #148]	; (8004540 <HAL_RCC_ClockConfig+0x1b8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d20c      	bcs.n	80044d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b6:	4b22      	ldr	r3, [pc, #136]	; (8004540 <HAL_RCC_ClockConfig+0x1b8>)
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044be:	4b20      	ldr	r3, [pc, #128]	; (8004540 <HAL_RCC_ClockConfig+0x1b8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d001      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e032      	b.n	8004536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d008      	beq.n	80044ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044dc:	4b19      	ldr	r3, [pc, #100]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	4916      	ldr	r1, [pc, #88]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d009      	beq.n	800450e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044fa:	4b12      	ldr	r3, [pc, #72]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	490e      	ldr	r1, [pc, #56]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	4313      	orrs	r3, r2
 800450c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800450e:	f000 f821 	bl	8004554 <HAL_RCC_GetSysClockFreq>
 8004512:	4602      	mov	r2, r0
 8004514:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	091b      	lsrs	r3, r3, #4
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	490a      	ldr	r1, [pc, #40]	; (8004548 <HAL_RCC_ClockConfig+0x1c0>)
 8004520:	5ccb      	ldrb	r3, [r1, r3]
 8004522:	fa22 f303 	lsr.w	r3, r2, r3
 8004526:	4a09      	ldr	r2, [pc, #36]	; (800454c <HAL_RCC_ClockConfig+0x1c4>)
 8004528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800452a:	4b09      	ldr	r3, [pc, #36]	; (8004550 <HAL_RCC_ClockConfig+0x1c8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f7fd fb12 	bl	8001b58 <HAL_InitTick>

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	40023c00 	.word	0x40023c00
 8004544:	40023800 	.word	0x40023800
 8004548:	0800c590 	.word	0x0800c590
 800454c:	20000000 	.word	0x20000000
 8004550:	20000004 	.word	0x20000004

08004554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004558:	b094      	sub	sp, #80	; 0x50
 800455a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	647b      	str	r3, [r7, #68]	; 0x44
 8004560:	2300      	movs	r3, #0
 8004562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004564:	2300      	movs	r3, #0
 8004566:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800456c:	4b79      	ldr	r3, [pc, #484]	; (8004754 <HAL_RCC_GetSysClockFreq+0x200>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 030c 	and.w	r3, r3, #12
 8004574:	2b08      	cmp	r3, #8
 8004576:	d00d      	beq.n	8004594 <HAL_RCC_GetSysClockFreq+0x40>
 8004578:	2b08      	cmp	r3, #8
 800457a:	f200 80e1 	bhi.w	8004740 <HAL_RCC_GetSysClockFreq+0x1ec>
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <HAL_RCC_GetSysClockFreq+0x34>
 8004582:	2b04      	cmp	r3, #4
 8004584:	d003      	beq.n	800458e <HAL_RCC_GetSysClockFreq+0x3a>
 8004586:	e0db      	b.n	8004740 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004588:	4b73      	ldr	r3, [pc, #460]	; (8004758 <HAL_RCC_GetSysClockFreq+0x204>)
 800458a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800458c:	e0db      	b.n	8004746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800458e:	4b73      	ldr	r3, [pc, #460]	; (800475c <HAL_RCC_GetSysClockFreq+0x208>)
 8004590:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004592:	e0d8      	b.n	8004746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004594:	4b6f      	ldr	r3, [pc, #444]	; (8004754 <HAL_RCC_GetSysClockFreq+0x200>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800459c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800459e:	4b6d      	ldr	r3, [pc, #436]	; (8004754 <HAL_RCC_GetSysClockFreq+0x200>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d063      	beq.n	8004672 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045aa:	4b6a      	ldr	r3, [pc, #424]	; (8004754 <HAL_RCC_GetSysClockFreq+0x200>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	099b      	lsrs	r3, r3, #6
 80045b0:	2200      	movs	r2, #0
 80045b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80045b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80045b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045bc:	633b      	str	r3, [r7, #48]	; 0x30
 80045be:	2300      	movs	r3, #0
 80045c0:	637b      	str	r3, [r7, #52]	; 0x34
 80045c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80045c6:	4622      	mov	r2, r4
 80045c8:	462b      	mov	r3, r5
 80045ca:	f04f 0000 	mov.w	r0, #0
 80045ce:	f04f 0100 	mov.w	r1, #0
 80045d2:	0159      	lsls	r1, r3, #5
 80045d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045d8:	0150      	lsls	r0, r2, #5
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	4621      	mov	r1, r4
 80045e0:	1a51      	subs	r1, r2, r1
 80045e2:	6139      	str	r1, [r7, #16]
 80045e4:	4629      	mov	r1, r5
 80045e6:	eb63 0301 	sbc.w	r3, r3, r1
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	f04f 0200 	mov.w	r2, #0
 80045f0:	f04f 0300 	mov.w	r3, #0
 80045f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045f8:	4659      	mov	r1, fp
 80045fa:	018b      	lsls	r3, r1, #6
 80045fc:	4651      	mov	r1, sl
 80045fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004602:	4651      	mov	r1, sl
 8004604:	018a      	lsls	r2, r1, #6
 8004606:	4651      	mov	r1, sl
 8004608:	ebb2 0801 	subs.w	r8, r2, r1
 800460c:	4659      	mov	r1, fp
 800460e:	eb63 0901 	sbc.w	r9, r3, r1
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	f04f 0300 	mov.w	r3, #0
 800461a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800461e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004622:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004626:	4690      	mov	r8, r2
 8004628:	4699      	mov	r9, r3
 800462a:	4623      	mov	r3, r4
 800462c:	eb18 0303 	adds.w	r3, r8, r3
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	462b      	mov	r3, r5
 8004634:	eb49 0303 	adc.w	r3, r9, r3
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004646:	4629      	mov	r1, r5
 8004648:	024b      	lsls	r3, r1, #9
 800464a:	4621      	mov	r1, r4
 800464c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004650:	4621      	mov	r1, r4
 8004652:	024a      	lsls	r2, r1, #9
 8004654:	4610      	mov	r0, r2
 8004656:	4619      	mov	r1, r3
 8004658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800465a:	2200      	movs	r2, #0
 800465c:	62bb      	str	r3, [r7, #40]	; 0x28
 800465e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004660:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004664:	f7fc fa82 	bl	8000b6c <__aeabi_uldivmod>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	4613      	mov	r3, r2
 800466e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004670:	e058      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004672:	4b38      	ldr	r3, [pc, #224]	; (8004754 <HAL_RCC_GetSysClockFreq+0x200>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	099b      	lsrs	r3, r3, #6
 8004678:	2200      	movs	r2, #0
 800467a:	4618      	mov	r0, r3
 800467c:	4611      	mov	r1, r2
 800467e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004682:	623b      	str	r3, [r7, #32]
 8004684:	2300      	movs	r3, #0
 8004686:	627b      	str	r3, [r7, #36]	; 0x24
 8004688:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800468c:	4642      	mov	r2, r8
 800468e:	464b      	mov	r3, r9
 8004690:	f04f 0000 	mov.w	r0, #0
 8004694:	f04f 0100 	mov.w	r1, #0
 8004698:	0159      	lsls	r1, r3, #5
 800469a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800469e:	0150      	lsls	r0, r2, #5
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4641      	mov	r1, r8
 80046a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80046aa:	4649      	mov	r1, r9
 80046ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	f04f 0300 	mov.w	r3, #0
 80046b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046c4:	ebb2 040a 	subs.w	r4, r2, sl
 80046c8:	eb63 050b 	sbc.w	r5, r3, fp
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	00eb      	lsls	r3, r5, #3
 80046d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046da:	00e2      	lsls	r2, r4, #3
 80046dc:	4614      	mov	r4, r2
 80046de:	461d      	mov	r5, r3
 80046e0:	4643      	mov	r3, r8
 80046e2:	18e3      	adds	r3, r4, r3
 80046e4:	603b      	str	r3, [r7, #0]
 80046e6:	464b      	mov	r3, r9
 80046e8:	eb45 0303 	adc.w	r3, r5, r3
 80046ec:	607b      	str	r3, [r7, #4]
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046fa:	4629      	mov	r1, r5
 80046fc:	028b      	lsls	r3, r1, #10
 80046fe:	4621      	mov	r1, r4
 8004700:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004704:	4621      	mov	r1, r4
 8004706:	028a      	lsls	r2, r1, #10
 8004708:	4610      	mov	r0, r2
 800470a:	4619      	mov	r1, r3
 800470c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800470e:	2200      	movs	r2, #0
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	61fa      	str	r2, [r7, #28]
 8004714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004718:	f7fc fa28 	bl	8000b6c <__aeabi_uldivmod>
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	4613      	mov	r3, r2
 8004722:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004724:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <HAL_RCC_GetSysClockFreq+0x200>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	0c1b      	lsrs	r3, r3, #16
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	3301      	adds	r3, #1
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004734:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004738:	fbb2 f3f3 	udiv	r3, r2, r3
 800473c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800473e:	e002      	b.n	8004746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004740:	4b05      	ldr	r3, [pc, #20]	; (8004758 <HAL_RCC_GetSysClockFreq+0x204>)
 8004742:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004744:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004748:	4618      	mov	r0, r3
 800474a:	3750      	adds	r7, #80	; 0x50
 800474c:	46bd      	mov	sp, r7
 800474e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004752:	bf00      	nop
 8004754:	40023800 	.word	0x40023800
 8004758:	00f42400 	.word	0x00f42400
 800475c:	007a1200 	.word	0x007a1200

08004760 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004764:	4b03      	ldr	r3, [pc, #12]	; (8004774 <HAL_RCC_GetHCLKFreq+0x14>)
 8004766:	681b      	ldr	r3, [r3, #0]
}
 8004768:	4618      	mov	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	20000000 	.word	0x20000000

08004778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e041      	b.n	800480e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d106      	bne.n	80047a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7fd f812 	bl	80017c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3304      	adds	r3, #4
 80047b4:	4619      	mov	r1, r3
 80047b6:	4610      	mov	r0, r2
 80047b8:	f000 fad8 	bl	8004d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b082      	sub	sp, #8
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e041      	b.n	80048ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	d106      	bne.n	8004842 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f839 	bl	80048b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2202      	movs	r2, #2
 8004846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3304      	adds	r3, #4
 8004852:	4619      	mov	r1, r3
 8004854:	4610      	mov	r0, r2
 8004856:	f000 fa89 	bl	8004d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d109      	bne.n	80048ec <HAL_TIM_PWM_Start+0x24>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	bf14      	ite	ne
 80048e4:	2301      	movne	r3, #1
 80048e6:	2300      	moveq	r3, #0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	e022      	b.n	8004932 <HAL_TIM_PWM_Start+0x6a>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d109      	bne.n	8004906 <HAL_TIM_PWM_Start+0x3e>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	bf14      	ite	ne
 80048fe:	2301      	movne	r3, #1
 8004900:	2300      	moveq	r3, #0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	e015      	b.n	8004932 <HAL_TIM_PWM_Start+0x6a>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b08      	cmp	r3, #8
 800490a:	d109      	bne.n	8004920 <HAL_TIM_PWM_Start+0x58>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b01      	cmp	r3, #1
 8004916:	bf14      	ite	ne
 8004918:	2301      	movne	r3, #1
 800491a:	2300      	moveq	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	e008      	b.n	8004932 <HAL_TIM_PWM_Start+0x6a>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b01      	cmp	r3, #1
 800492a:	bf14      	ite	ne
 800492c:	2301      	movne	r3, #1
 800492e:	2300      	moveq	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e07c      	b.n	8004a34 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d104      	bne.n	800494a <HAL_TIM_PWM_Start+0x82>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004948:	e013      	b.n	8004972 <HAL_TIM_PWM_Start+0xaa>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b04      	cmp	r3, #4
 800494e:	d104      	bne.n	800495a <HAL_TIM_PWM_Start+0x92>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004958:	e00b      	b.n	8004972 <HAL_TIM_PWM_Start+0xaa>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b08      	cmp	r3, #8
 800495e:	d104      	bne.n	800496a <HAL_TIM_PWM_Start+0xa2>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004968:	e003      	b.n	8004972 <HAL_TIM_PWM_Start+0xaa>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2202      	movs	r2, #2
 800496e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2201      	movs	r2, #1
 8004978:	6839      	ldr	r1, [r7, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fce0 	bl	8005340 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a2d      	ldr	r2, [pc, #180]	; (8004a3c <HAL_TIM_PWM_Start+0x174>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d004      	beq.n	8004994 <HAL_TIM_PWM_Start+0xcc>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a2c      	ldr	r2, [pc, #176]	; (8004a40 <HAL_TIM_PWM_Start+0x178>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d101      	bne.n	8004998 <HAL_TIM_PWM_Start+0xd0>
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <HAL_TIM_PWM_Start+0xd2>
 8004998:	2300      	movs	r3, #0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d007      	beq.n	80049ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a22      	ldr	r2, [pc, #136]	; (8004a3c <HAL_TIM_PWM_Start+0x174>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d022      	beq.n	80049fe <HAL_TIM_PWM_Start+0x136>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c0:	d01d      	beq.n	80049fe <HAL_TIM_PWM_Start+0x136>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a1f      	ldr	r2, [pc, #124]	; (8004a44 <HAL_TIM_PWM_Start+0x17c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d018      	beq.n	80049fe <HAL_TIM_PWM_Start+0x136>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a1d      	ldr	r2, [pc, #116]	; (8004a48 <HAL_TIM_PWM_Start+0x180>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d013      	beq.n	80049fe <HAL_TIM_PWM_Start+0x136>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a1c      	ldr	r2, [pc, #112]	; (8004a4c <HAL_TIM_PWM_Start+0x184>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00e      	beq.n	80049fe <HAL_TIM_PWM_Start+0x136>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a16      	ldr	r2, [pc, #88]	; (8004a40 <HAL_TIM_PWM_Start+0x178>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d009      	beq.n	80049fe <HAL_TIM_PWM_Start+0x136>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a18      	ldr	r2, [pc, #96]	; (8004a50 <HAL_TIM_PWM_Start+0x188>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d004      	beq.n	80049fe <HAL_TIM_PWM_Start+0x136>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a16      	ldr	r2, [pc, #88]	; (8004a54 <HAL_TIM_PWM_Start+0x18c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d111      	bne.n	8004a22 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b06      	cmp	r3, #6
 8004a0e:	d010      	beq.n	8004a32 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a20:	e007      	b.n	8004a32 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0201 	orr.w	r2, r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40010000 	.word	0x40010000
 8004a40:	40010400 	.word	0x40010400
 8004a44:	40000400 	.word	0x40000400
 8004a48:	40000800 	.word	0x40000800
 8004a4c:	40000c00 	.word	0x40000c00
 8004a50:	40014000 	.word	0x40014000
 8004a54:	40001800 	.word	0x40001800

08004a58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d101      	bne.n	8004a76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a72:	2302      	movs	r3, #2
 8004a74:	e0ae      	b.n	8004bd4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b0c      	cmp	r3, #12
 8004a82:	f200 809f 	bhi.w	8004bc4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a86:	a201      	add	r2, pc, #4	; (adr r2, 8004a8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8c:	08004ac1 	.word	0x08004ac1
 8004a90:	08004bc5 	.word	0x08004bc5
 8004a94:	08004bc5 	.word	0x08004bc5
 8004a98:	08004bc5 	.word	0x08004bc5
 8004a9c:	08004b01 	.word	0x08004b01
 8004aa0:	08004bc5 	.word	0x08004bc5
 8004aa4:	08004bc5 	.word	0x08004bc5
 8004aa8:	08004bc5 	.word	0x08004bc5
 8004aac:	08004b43 	.word	0x08004b43
 8004ab0:	08004bc5 	.word	0x08004bc5
 8004ab4:	08004bc5 	.word	0x08004bc5
 8004ab8:	08004bc5 	.word	0x08004bc5
 8004abc:	08004b83 	.word	0x08004b83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68b9      	ldr	r1, [r7, #8]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 f9f0 	bl	8004eac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0208 	orr.w	r2, r2, #8
 8004ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699a      	ldr	r2, [r3, #24]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0204 	bic.w	r2, r2, #4
 8004aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6999      	ldr	r1, [r3, #24]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	691a      	ldr	r2, [r3, #16]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	619a      	str	r2, [r3, #24]
      break;
 8004afe:	e064      	b.n	8004bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68b9      	ldr	r1, [r7, #8]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fa40 	bl	8004f8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699a      	ldr	r2, [r3, #24]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6999      	ldr	r1, [r3, #24]
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	021a      	lsls	r2, r3, #8
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	619a      	str	r2, [r3, #24]
      break;
 8004b40:	e043      	b.n	8004bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68b9      	ldr	r1, [r7, #8]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 fa95 	bl	8005078 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69da      	ldr	r2, [r3, #28]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0208 	orr.w	r2, r2, #8
 8004b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69da      	ldr	r2, [r3, #28]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0204 	bic.w	r2, r2, #4
 8004b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	69d9      	ldr	r1, [r3, #28]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	61da      	str	r2, [r3, #28]
      break;
 8004b80:	e023      	b.n	8004bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68b9      	ldr	r1, [r7, #8]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fae9 	bl	8005160 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69da      	ldr	r2, [r3, #28]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69da      	ldr	r2, [r3, #28]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69d9      	ldr	r1, [r3, #28]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	021a      	lsls	r2, r3, #8
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	61da      	str	r2, [r3, #28]
      break;
 8004bc2:	e002      	b.n	8004bca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8004bc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d101      	bne.n	8004bf8 <HAL_TIM_ConfigClockSource+0x1c>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e0b4      	b.n	8004d62 <HAL_TIM_ConfigClockSource+0x186>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c30:	d03e      	beq.n	8004cb0 <HAL_TIM_ConfigClockSource+0xd4>
 8004c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c36:	f200 8087 	bhi.w	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
 8004c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c3e:	f000 8086 	beq.w	8004d4e <HAL_TIM_ConfigClockSource+0x172>
 8004c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c46:	d87f      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
 8004c48:	2b70      	cmp	r3, #112	; 0x70
 8004c4a:	d01a      	beq.n	8004c82 <HAL_TIM_ConfigClockSource+0xa6>
 8004c4c:	2b70      	cmp	r3, #112	; 0x70
 8004c4e:	d87b      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
 8004c50:	2b60      	cmp	r3, #96	; 0x60
 8004c52:	d050      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0x11a>
 8004c54:	2b60      	cmp	r3, #96	; 0x60
 8004c56:	d877      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
 8004c58:	2b50      	cmp	r3, #80	; 0x50
 8004c5a:	d03c      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0xfa>
 8004c5c:	2b50      	cmp	r3, #80	; 0x50
 8004c5e:	d873      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
 8004c60:	2b40      	cmp	r3, #64	; 0x40
 8004c62:	d058      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0x13a>
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	d86f      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
 8004c68:	2b30      	cmp	r3, #48	; 0x30
 8004c6a:	d064      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0x15a>
 8004c6c:	2b30      	cmp	r3, #48	; 0x30
 8004c6e:	d86b      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d060      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0x15a>
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d867      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d05c      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0x15a>
 8004c7c:	2b10      	cmp	r3, #16
 8004c7e:	d05a      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0x15a>
 8004c80:	e062      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	6899      	ldr	r1, [r3, #8]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f000 fb35 	bl	8005300 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ca4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	609a      	str	r2, [r3, #8]
      break;
 8004cae:	e04f      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6818      	ldr	r0, [r3, #0]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	6899      	ldr	r1, [r3, #8]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f000 fb1e 	bl	8005300 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cd2:	609a      	str	r2, [r3, #8]
      break;
 8004cd4:	e03c      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	6859      	ldr	r1, [r3, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f000 fa92 	bl	800520c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2150      	movs	r1, #80	; 0x50
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 faeb 	bl	80052ca <TIM_ITRx_SetConfig>
      break;
 8004cf4:	e02c      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6818      	ldr	r0, [r3, #0]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	6859      	ldr	r1, [r3, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	461a      	mov	r2, r3
 8004d04:	f000 fab1 	bl	800526a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2160      	movs	r1, #96	; 0x60
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fadb 	bl	80052ca <TIM_ITRx_SetConfig>
      break;
 8004d14:	e01c      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6818      	ldr	r0, [r3, #0]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	6859      	ldr	r1, [r3, #4]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	461a      	mov	r2, r3
 8004d24:	f000 fa72 	bl	800520c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2140      	movs	r1, #64	; 0x40
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 facb 	bl	80052ca <TIM_ITRx_SetConfig>
      break;
 8004d34:	e00c      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4610      	mov	r0, r2
 8004d42:	f000 fac2 	bl	80052ca <TIM_ITRx_SetConfig>
      break;
 8004d46:	e003      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d4c:	e000      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a40      	ldr	r2, [pc, #256]	; (8004e80 <TIM_Base_SetConfig+0x114>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d013      	beq.n	8004dac <TIM_Base_SetConfig+0x40>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d8a:	d00f      	beq.n	8004dac <TIM_Base_SetConfig+0x40>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a3d      	ldr	r2, [pc, #244]	; (8004e84 <TIM_Base_SetConfig+0x118>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00b      	beq.n	8004dac <TIM_Base_SetConfig+0x40>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a3c      	ldr	r2, [pc, #240]	; (8004e88 <TIM_Base_SetConfig+0x11c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d007      	beq.n	8004dac <TIM_Base_SetConfig+0x40>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a3b      	ldr	r2, [pc, #236]	; (8004e8c <TIM_Base_SetConfig+0x120>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d003      	beq.n	8004dac <TIM_Base_SetConfig+0x40>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a3a      	ldr	r2, [pc, #232]	; (8004e90 <TIM_Base_SetConfig+0x124>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d108      	bne.n	8004dbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a2f      	ldr	r2, [pc, #188]	; (8004e80 <TIM_Base_SetConfig+0x114>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d02b      	beq.n	8004e1e <TIM_Base_SetConfig+0xb2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dcc:	d027      	beq.n	8004e1e <TIM_Base_SetConfig+0xb2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a2c      	ldr	r2, [pc, #176]	; (8004e84 <TIM_Base_SetConfig+0x118>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d023      	beq.n	8004e1e <TIM_Base_SetConfig+0xb2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a2b      	ldr	r2, [pc, #172]	; (8004e88 <TIM_Base_SetConfig+0x11c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d01f      	beq.n	8004e1e <TIM_Base_SetConfig+0xb2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a2a      	ldr	r2, [pc, #168]	; (8004e8c <TIM_Base_SetConfig+0x120>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d01b      	beq.n	8004e1e <TIM_Base_SetConfig+0xb2>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a29      	ldr	r2, [pc, #164]	; (8004e90 <TIM_Base_SetConfig+0x124>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d017      	beq.n	8004e1e <TIM_Base_SetConfig+0xb2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a28      	ldr	r2, [pc, #160]	; (8004e94 <TIM_Base_SetConfig+0x128>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d013      	beq.n	8004e1e <TIM_Base_SetConfig+0xb2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a27      	ldr	r2, [pc, #156]	; (8004e98 <TIM_Base_SetConfig+0x12c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00f      	beq.n	8004e1e <TIM_Base_SetConfig+0xb2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a26      	ldr	r2, [pc, #152]	; (8004e9c <TIM_Base_SetConfig+0x130>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00b      	beq.n	8004e1e <TIM_Base_SetConfig+0xb2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a25      	ldr	r2, [pc, #148]	; (8004ea0 <TIM_Base_SetConfig+0x134>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d007      	beq.n	8004e1e <TIM_Base_SetConfig+0xb2>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a24      	ldr	r2, [pc, #144]	; (8004ea4 <TIM_Base_SetConfig+0x138>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d003      	beq.n	8004e1e <TIM_Base_SetConfig+0xb2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a23      	ldr	r2, [pc, #140]	; (8004ea8 <TIM_Base_SetConfig+0x13c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d108      	bne.n	8004e30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a0a      	ldr	r2, [pc, #40]	; (8004e80 <TIM_Base_SetConfig+0x114>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d003      	beq.n	8004e64 <TIM_Base_SetConfig+0xf8>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a0c      	ldr	r2, [pc, #48]	; (8004e90 <TIM_Base_SetConfig+0x124>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d103      	bne.n	8004e6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	615a      	str	r2, [r3, #20]
}
 8004e72:	bf00      	nop
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40010000 	.word	0x40010000
 8004e84:	40000400 	.word	0x40000400
 8004e88:	40000800 	.word	0x40000800
 8004e8c:	40000c00 	.word	0x40000c00
 8004e90:	40010400 	.word	0x40010400
 8004e94:	40014000 	.word	0x40014000
 8004e98:	40014400 	.word	0x40014400
 8004e9c:	40014800 	.word	0x40014800
 8004ea0:	40001800 	.word	0x40001800
 8004ea4:	40001c00 	.word	0x40001c00
 8004ea8:	40002000 	.word	0x40002000

08004eac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	f023 0201 	bic.w	r2, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0303 	bic.w	r3, r3, #3
 8004ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f023 0302 	bic.w	r3, r3, #2
 8004ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a20      	ldr	r2, [pc, #128]	; (8004f84 <TIM_OC1_SetConfig+0xd8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d003      	beq.n	8004f10 <TIM_OC1_SetConfig+0x64>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a1f      	ldr	r2, [pc, #124]	; (8004f88 <TIM_OC1_SetConfig+0xdc>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d10c      	bne.n	8004f2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f023 0308 	bic.w	r3, r3, #8
 8004f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f023 0304 	bic.w	r3, r3, #4
 8004f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a15      	ldr	r2, [pc, #84]	; (8004f84 <TIM_OC1_SetConfig+0xd8>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d003      	beq.n	8004f3a <TIM_OC1_SetConfig+0x8e>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a14      	ldr	r2, [pc, #80]	; (8004f88 <TIM_OC1_SetConfig+0xdc>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d111      	bne.n	8004f5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	621a      	str	r2, [r3, #32]
}
 8004f78:	bf00      	nop
 8004f7a:	371c      	adds	r7, #28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	40010000 	.word	0x40010000
 8004f88:	40010400 	.word	0x40010400

08004f8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b087      	sub	sp, #28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	f023 0210 	bic.w	r2, r3, #16
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	021b      	lsls	r3, r3, #8
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f023 0320 	bic.w	r3, r3, #32
 8004fd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a22      	ldr	r2, [pc, #136]	; (8005070 <TIM_OC2_SetConfig+0xe4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d003      	beq.n	8004ff4 <TIM_OC2_SetConfig+0x68>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a21      	ldr	r2, [pc, #132]	; (8005074 <TIM_OC2_SetConfig+0xe8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d10d      	bne.n	8005010 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800500e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a17      	ldr	r2, [pc, #92]	; (8005070 <TIM_OC2_SetConfig+0xe4>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d003      	beq.n	8005020 <TIM_OC2_SetConfig+0x94>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a16      	ldr	r2, [pc, #88]	; (8005074 <TIM_OC2_SetConfig+0xe8>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d113      	bne.n	8005048 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005026:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800502e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	621a      	str	r2, [r3, #32]
}
 8005062:	bf00      	nop
 8005064:	371c      	adds	r7, #28
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	40010000 	.word	0x40010000
 8005074:	40010400 	.word	0x40010400

08005078 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0303 	bic.w	r3, r3, #3
 80050ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	021b      	lsls	r3, r3, #8
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a21      	ldr	r2, [pc, #132]	; (8005158 <TIM_OC3_SetConfig+0xe0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d003      	beq.n	80050de <TIM_OC3_SetConfig+0x66>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a20      	ldr	r2, [pc, #128]	; (800515c <TIM_OC3_SetConfig+0xe4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d10d      	bne.n	80050fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	021b      	lsls	r3, r3, #8
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a16      	ldr	r2, [pc, #88]	; (8005158 <TIM_OC3_SetConfig+0xe0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d003      	beq.n	800510a <TIM_OC3_SetConfig+0x92>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a15      	ldr	r2, [pc, #84]	; (800515c <TIM_OC3_SetConfig+0xe4>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d113      	bne.n	8005132 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	4313      	orrs	r3, r2
 8005124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	011b      	lsls	r3, r3, #4
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	621a      	str	r2, [r3, #32]
}
 800514c:	bf00      	nop
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	40010000 	.word	0x40010000
 800515c:	40010400 	.word	0x40010400

08005160 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800518e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	021b      	lsls	r3, r3, #8
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	031b      	lsls	r3, r3, #12
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a12      	ldr	r2, [pc, #72]	; (8005204 <TIM_OC4_SetConfig+0xa4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d003      	beq.n	80051c8 <TIM_OC4_SetConfig+0x68>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a11      	ldr	r2, [pc, #68]	; (8005208 <TIM_OC4_SetConfig+0xa8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d109      	bne.n	80051dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	019b      	lsls	r3, r3, #6
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	621a      	str	r2, [r3, #32]
}
 80051f6:	bf00      	nop
 80051f8:	371c      	adds	r7, #28
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	40010000 	.word	0x40010000
 8005208:	40010400 	.word	0x40010400

0800520c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f023 0201 	bic.w	r2, r3, #1
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	011b      	lsls	r3, r3, #4
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	4313      	orrs	r3, r2
 8005240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f023 030a 	bic.w	r3, r3, #10
 8005248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4313      	orrs	r3, r2
 8005250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	621a      	str	r2, [r3, #32]
}
 800525e:	bf00      	nop
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800526a:	b480      	push	{r7}
 800526c:	b087      	sub	sp, #28
 800526e:	af00      	add	r7, sp, #0
 8005270:	60f8      	str	r0, [r7, #12]
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	f023 0210 	bic.w	r2, r3, #16
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005294:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	031b      	lsls	r3, r3, #12
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	4313      	orrs	r3, r2
 800529e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	621a      	str	r2, [r3, #32]
}
 80052be:	bf00      	nop
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b085      	sub	sp, #20
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f043 0307 	orr.w	r3, r3, #7
 80052ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	609a      	str	r2, [r3, #8]
}
 80052f4:	bf00      	nop
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800531a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	021a      	lsls	r2, r3, #8
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	431a      	orrs	r2, r3
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4313      	orrs	r3, r2
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	4313      	orrs	r3, r2
 800532c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	609a      	str	r2, [r3, #8]
}
 8005334:	bf00      	nop
 8005336:	371c      	adds	r7, #28
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	2201      	movs	r2, #1
 8005354:	fa02 f303 	lsl.w	r3, r2, r3
 8005358:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a1a      	ldr	r2, [r3, #32]
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	43db      	mvns	r3, r3
 8005362:	401a      	ands	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a1a      	ldr	r2, [r3, #32]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f003 031f 	and.w	r3, r3, #31
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	fa01 f303 	lsl.w	r3, r1, r3
 8005378:	431a      	orrs	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	621a      	str	r2, [r3, #32]
}
 800537e:	bf00      	nop
 8005380:	371c      	adds	r7, #28
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
	...

0800538c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e05a      	b.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a21      	ldr	r2, [pc, #132]	; (8005468 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d022      	beq.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f0:	d01d      	beq.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a1d      	ldr	r2, [pc, #116]	; (800546c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d018      	beq.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a1b      	ldr	r2, [pc, #108]	; (8005470 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d013      	beq.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a1a      	ldr	r2, [pc, #104]	; (8005474 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d00e      	beq.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a18      	ldr	r2, [pc, #96]	; (8005478 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d009      	beq.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a17      	ldr	r2, [pc, #92]	; (800547c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d004      	beq.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a15      	ldr	r2, [pc, #84]	; (8005480 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d10c      	bne.n	8005448 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005434:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	4313      	orrs	r3, r2
 800543e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	40010000 	.word	0x40010000
 800546c:	40000400 	.word	0x40000400
 8005470:	40000800 	.word	0x40000800
 8005474:	40000c00 	.word	0x40000c00
 8005478:	40010400 	.word	0x40010400
 800547c:	40014000 	.word	0x40014000
 8005480:	40001800 	.word	0x40001800

08005484 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005484:	b084      	sub	sp, #16
 8005486:	b580      	push	{r7, lr}
 8005488:	b084      	sub	sp, #16
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	f107 001c 	add.w	r0, r7, #28
 8005492:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005498:	2b01      	cmp	r3, #1
 800549a:	d122      	bne.n	80054e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80054b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d105      	bne.n	80054d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f001 fbee 	bl	8006cb8 <USB_CoreReset>
 80054dc:	4603      	mov	r3, r0
 80054de:	73fb      	strb	r3, [r7, #15]
 80054e0:	e01a      	b.n	8005518 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f001 fbe2 	bl	8006cb8 <USB_CoreReset>
 80054f4:	4603      	mov	r3, r0
 80054f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80054f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d106      	bne.n	800550c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005502:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	639a      	str	r2, [r3, #56]	; 0x38
 800550a:	e005      	b.n	8005518 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005510:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	2b01      	cmp	r3, #1
 800551c:	d10b      	bne.n	8005536 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f043 0206 	orr.w	r2, r3, #6
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f043 0220 	orr.w	r2, r3, #32
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005536:	7bfb      	ldrb	r3, [r7, #15]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005542:	b004      	add	sp, #16
 8005544:	4770      	bx	lr
	...

08005548 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005548:	b480      	push	{r7}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	4613      	mov	r3, r2
 8005554:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005556:	79fb      	ldrb	r3, [r7, #7]
 8005558:	2b02      	cmp	r3, #2
 800555a:	d165      	bne.n	8005628 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4a41      	ldr	r2, [pc, #260]	; (8005664 <USB_SetTurnaroundTime+0x11c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d906      	bls.n	8005572 <USB_SetTurnaroundTime+0x2a>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	4a40      	ldr	r2, [pc, #256]	; (8005668 <USB_SetTurnaroundTime+0x120>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d202      	bcs.n	8005572 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800556c:	230f      	movs	r3, #15
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	e062      	b.n	8005638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	4a3c      	ldr	r2, [pc, #240]	; (8005668 <USB_SetTurnaroundTime+0x120>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d306      	bcc.n	8005588 <USB_SetTurnaroundTime+0x40>
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	4a3b      	ldr	r2, [pc, #236]	; (800566c <USB_SetTurnaroundTime+0x124>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d202      	bcs.n	8005588 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005582:	230e      	movs	r3, #14
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	e057      	b.n	8005638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	4a38      	ldr	r2, [pc, #224]	; (800566c <USB_SetTurnaroundTime+0x124>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d306      	bcc.n	800559e <USB_SetTurnaroundTime+0x56>
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4a37      	ldr	r2, [pc, #220]	; (8005670 <USB_SetTurnaroundTime+0x128>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d202      	bcs.n	800559e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005598:	230d      	movs	r3, #13
 800559a:	617b      	str	r3, [r7, #20]
 800559c:	e04c      	b.n	8005638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	4a33      	ldr	r2, [pc, #204]	; (8005670 <USB_SetTurnaroundTime+0x128>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d306      	bcc.n	80055b4 <USB_SetTurnaroundTime+0x6c>
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	4a32      	ldr	r2, [pc, #200]	; (8005674 <USB_SetTurnaroundTime+0x12c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d802      	bhi.n	80055b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80055ae:	230c      	movs	r3, #12
 80055b0:	617b      	str	r3, [r7, #20]
 80055b2:	e041      	b.n	8005638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	4a2f      	ldr	r2, [pc, #188]	; (8005674 <USB_SetTurnaroundTime+0x12c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d906      	bls.n	80055ca <USB_SetTurnaroundTime+0x82>
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4a2e      	ldr	r2, [pc, #184]	; (8005678 <USB_SetTurnaroundTime+0x130>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d802      	bhi.n	80055ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80055c4:	230b      	movs	r3, #11
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	e036      	b.n	8005638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	4a2a      	ldr	r2, [pc, #168]	; (8005678 <USB_SetTurnaroundTime+0x130>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d906      	bls.n	80055e0 <USB_SetTurnaroundTime+0x98>
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	4a29      	ldr	r2, [pc, #164]	; (800567c <USB_SetTurnaroundTime+0x134>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d802      	bhi.n	80055e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80055da:	230a      	movs	r3, #10
 80055dc:	617b      	str	r3, [r7, #20]
 80055de:	e02b      	b.n	8005638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4a26      	ldr	r2, [pc, #152]	; (800567c <USB_SetTurnaroundTime+0x134>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d906      	bls.n	80055f6 <USB_SetTurnaroundTime+0xae>
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	4a25      	ldr	r2, [pc, #148]	; (8005680 <USB_SetTurnaroundTime+0x138>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d202      	bcs.n	80055f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80055f0:	2309      	movs	r3, #9
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	e020      	b.n	8005638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	4a21      	ldr	r2, [pc, #132]	; (8005680 <USB_SetTurnaroundTime+0x138>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d306      	bcc.n	800560c <USB_SetTurnaroundTime+0xc4>
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	4a20      	ldr	r2, [pc, #128]	; (8005684 <USB_SetTurnaroundTime+0x13c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d802      	bhi.n	800560c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005606:	2308      	movs	r3, #8
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	e015      	b.n	8005638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	4a1d      	ldr	r2, [pc, #116]	; (8005684 <USB_SetTurnaroundTime+0x13c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d906      	bls.n	8005622 <USB_SetTurnaroundTime+0xda>
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	4a1c      	ldr	r2, [pc, #112]	; (8005688 <USB_SetTurnaroundTime+0x140>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d202      	bcs.n	8005622 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800561c:	2307      	movs	r3, #7
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	e00a      	b.n	8005638 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005622:	2306      	movs	r3, #6
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	e007      	b.n	8005638 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005628:	79fb      	ldrb	r3, [r7, #7]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d102      	bne.n	8005634 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800562e:	2309      	movs	r3, #9
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	e001      	b.n	8005638 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005634:	2309      	movs	r3, #9
 8005636:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	68da      	ldr	r2, [r3, #12]
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	029b      	lsls	r3, r3, #10
 800564c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005650:	431a      	orrs	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	371c      	adds	r7, #28
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	00d8acbf 	.word	0x00d8acbf
 8005668:	00e4e1c0 	.word	0x00e4e1c0
 800566c:	00f42400 	.word	0x00f42400
 8005670:	01067380 	.word	0x01067380
 8005674:	011a499f 	.word	0x011a499f
 8005678:	01312cff 	.word	0x01312cff
 800567c:	014ca43f 	.word	0x014ca43f
 8005680:	016e3600 	.word	0x016e3600
 8005684:	01a6ab1f 	.word	0x01a6ab1f
 8005688:	01e84800 	.word	0x01e84800

0800568c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f043 0201 	orr.w	r2, r3, #1
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f023 0201 	bic.w	r2, r3, #1
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d115      	bne.n	800571e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056fe:	2001      	movs	r0, #1
 8005700:	f7fc fa7a 	bl	8001bf8 <HAL_Delay>
      ms++;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3301      	adds	r3, #1
 8005708:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f001 fa45 	bl	8006b9a <USB_GetMode>
 8005710:	4603      	mov	r3, r0
 8005712:	2b01      	cmp	r3, #1
 8005714:	d01e      	beq.n	8005754 <USB_SetCurrentMode+0x84>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2b31      	cmp	r3, #49	; 0x31
 800571a:	d9f0      	bls.n	80056fe <USB_SetCurrentMode+0x2e>
 800571c:	e01a      	b.n	8005754 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800571e:	78fb      	ldrb	r3, [r7, #3]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d115      	bne.n	8005750 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005730:	2001      	movs	r0, #1
 8005732:	f7fc fa61 	bl	8001bf8 <HAL_Delay>
      ms++;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	3301      	adds	r3, #1
 800573a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f001 fa2c 	bl	8006b9a <USB_GetMode>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <USB_SetCurrentMode+0x84>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b31      	cmp	r3, #49	; 0x31
 800574c:	d9f0      	bls.n	8005730 <USB_SetCurrentMode+0x60>
 800574e:	e001      	b.n	8005754 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e005      	b.n	8005760 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b32      	cmp	r3, #50	; 0x32
 8005758:	d101      	bne.n	800575e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e000      	b.n	8005760 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005768:	b084      	sub	sp, #16
 800576a:	b580      	push	{r7, lr}
 800576c:	b086      	sub	sp, #24
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005776:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005782:	2300      	movs	r3, #0
 8005784:	613b      	str	r3, [r7, #16]
 8005786:	e009      	b.n	800579c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	3340      	adds	r3, #64	; 0x40
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	2200      	movs	r2, #0
 8005794:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	3301      	adds	r3, #1
 800579a:	613b      	str	r3, [r7, #16]
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	2b0e      	cmp	r3, #14
 80057a0:	d9f2      	bls.n	8005788 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80057a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d11c      	bne.n	80057e2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057b6:	f043 0302 	orr.w	r3, r3, #2
 80057ba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	639a      	str	r2, [r3, #56]	; 0x38
 80057e0:	e00b      	b.n	80057fa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005800:	461a      	mov	r2, r3
 8005802:	2300      	movs	r3, #0
 8005804:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580c:	4619      	mov	r1, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005814:	461a      	mov	r2, r3
 8005816:	680b      	ldr	r3, [r1, #0]
 8005818:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800581a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581c:	2b01      	cmp	r3, #1
 800581e:	d10c      	bne.n	800583a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005822:	2b00      	cmp	r3, #0
 8005824:	d104      	bne.n	8005830 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005826:	2100      	movs	r1, #0
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f965 	bl	8005af8 <USB_SetDevSpeed>
 800582e:	e008      	b.n	8005842 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005830:	2101      	movs	r1, #1
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f960 	bl	8005af8 <USB_SetDevSpeed>
 8005838:	e003      	b.n	8005842 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800583a:	2103      	movs	r1, #3
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f95b 	bl	8005af8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005842:	2110      	movs	r1, #16
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f8f3 	bl	8005a30 <USB_FlushTxFifo>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 f91f 	bl	8005a98 <USB_FlushRxFifo>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586a:	461a      	mov	r2, r3
 800586c:	2300      	movs	r3, #0
 800586e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005876:	461a      	mov	r2, r3
 8005878:	2300      	movs	r3, #0
 800587a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005882:	461a      	mov	r2, r3
 8005884:	2300      	movs	r3, #0
 8005886:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005888:	2300      	movs	r3, #0
 800588a:	613b      	str	r3, [r7, #16]
 800588c:	e043      	b.n	8005916 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058a4:	d118      	bne.n	80058d8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10a      	bne.n	80058c2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b8:	461a      	mov	r2, r3
 80058ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	e013      	b.n	80058ea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ce:	461a      	mov	r2, r3
 80058d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058d4:	6013      	str	r3, [r2, #0]
 80058d6:	e008      	b.n	80058ea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e4:	461a      	mov	r2, r3
 80058e6:	2300      	movs	r3, #0
 80058e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f6:	461a      	mov	r2, r3
 80058f8:	2300      	movs	r3, #0
 80058fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4413      	add	r3, r2
 8005904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005908:	461a      	mov	r2, r3
 800590a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800590e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	3301      	adds	r3, #1
 8005914:	613b      	str	r3, [r7, #16]
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	429a      	cmp	r2, r3
 800591c:	d3b7      	bcc.n	800588e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800591e:	2300      	movs	r3, #0
 8005920:	613b      	str	r3, [r7, #16]
 8005922:	e043      	b.n	80059ac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005936:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800593a:	d118      	bne.n	800596e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10a      	bne.n	8005958 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4413      	add	r3, r2
 800594a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594e:	461a      	mov	r2, r3
 8005950:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005954:	6013      	str	r3, [r2, #0]
 8005956:	e013      	b.n	8005980 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005964:	461a      	mov	r2, r3
 8005966:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	e008      	b.n	8005980 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597a:	461a      	mov	r2, r3
 800597c:	2300      	movs	r3, #0
 800597e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598c:	461a      	mov	r2, r3
 800598e:	2300      	movs	r3, #0
 8005990:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4413      	add	r3, r2
 800599a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599e:	461a      	mov	r2, r3
 80059a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	3301      	adds	r3, #1
 80059aa:	613b      	str	r3, [r7, #16]
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d3b7      	bcc.n	8005924 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80059d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d105      	bne.n	80059e8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	f043 0210 	orr.w	r2, r3, #16
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	699a      	ldr	r2, [r3, #24]
 80059ec:	4b0f      	ldr	r3, [pc, #60]	; (8005a2c <USB_DevInit+0x2c4>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80059f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d005      	beq.n	8005a06 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	f043 0208 	orr.w	r2, r3, #8
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d107      	bne.n	8005a1c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a14:	f043 0304 	orr.w	r3, r3, #4
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3718      	adds	r7, #24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a28:	b004      	add	sp, #16
 8005a2a:	4770      	bx	lr
 8005a2c:	803c3800 	.word	0x803c3800

08005a30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	3301      	adds	r3, #1
 8005a42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4a13      	ldr	r2, [pc, #76]	; (8005a94 <USB_FlushTxFifo+0x64>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d901      	bls.n	8005a50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e01b      	b.n	8005a88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	daf2      	bge.n	8005a3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	019b      	lsls	r3, r3, #6
 8005a60:	f043 0220 	orr.w	r2, r3, #32
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4a08      	ldr	r2, [pc, #32]	; (8005a94 <USB_FlushTxFifo+0x64>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d901      	bls.n	8005a7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e006      	b.n	8005a88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f003 0320 	and.w	r3, r3, #32
 8005a82:	2b20      	cmp	r3, #32
 8005a84:	d0f0      	beq.n	8005a68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	00030d40 	.word	0x00030d40

08005a98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	4a11      	ldr	r2, [pc, #68]	; (8005af4 <USB_FlushRxFifo+0x5c>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d901      	bls.n	8005ab6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e018      	b.n	8005ae8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	daf2      	bge.n	8005aa4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2210      	movs	r2, #16
 8005ac6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	3301      	adds	r3, #1
 8005acc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4a08      	ldr	r2, [pc, #32]	; (8005af4 <USB_FlushRxFifo+0x5c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d901      	bls.n	8005ada <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e006      	b.n	8005ae8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f003 0310 	and.w	r3, r3, #16
 8005ae2:	2b10      	cmp	r3, #16
 8005ae4:	d0f0      	beq.n	8005ac8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	00030d40 	.word	0x00030d40

08005af8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	460b      	mov	r3, r1
 8005b02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	78fb      	ldrb	r3, [r7, #3]
 8005b12:	68f9      	ldr	r1, [r7, #12]
 8005b14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b087      	sub	sp, #28
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f003 0306 	and.w	r3, r3, #6
 8005b42:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d102      	bne.n	8005b50 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	75fb      	strb	r3, [r7, #23]
 8005b4e:	e00a      	b.n	8005b66 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d002      	beq.n	8005b5c <USB_GetDevSpeed+0x32>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2b06      	cmp	r3, #6
 8005b5a:	d102      	bne.n	8005b62 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	75fb      	strb	r3, [r7, #23]
 8005b60:	e001      	b.n	8005b66 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005b62:	230f      	movs	r3, #15
 8005b64:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	371c      	adds	r7, #28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	785b      	ldrb	r3, [r3, #1]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d13a      	bne.n	8005c06 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b96:	69da      	ldr	r2, [r3, #28]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	f003 030f 	and.w	r3, r3, #15
 8005ba0:	2101      	movs	r1, #1
 8005ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	68f9      	ldr	r1, [r7, #12]
 8005baa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d155      	bne.n	8005c74 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	791b      	ldrb	r3, [r3, #4]
 8005be2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005be4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	059b      	lsls	r3, r3, #22
 8005bea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005bec:	4313      	orrs	r3, r2
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	0151      	lsls	r1, r2, #5
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	440a      	add	r2, r1
 8005bf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c02:	6013      	str	r3, [r2, #0]
 8005c04:	e036      	b.n	8005c74 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0c:	69da      	ldr	r2, [r3, #28]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	2101      	movs	r1, #1
 8005c18:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1c:	041b      	lsls	r3, r3, #16
 8005c1e:	68f9      	ldr	r1, [r7, #12]
 8005c20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c24:	4313      	orrs	r3, r2
 8005c26:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d11a      	bne.n	8005c74 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	791b      	ldrb	r3, [r3, #4]
 8005c58:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c5a:	430b      	orrs	r3, r1
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	0151      	lsls	r1, r2, #5
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	440a      	add	r2, r1
 8005c66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c72:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
	...

08005c84 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	785b      	ldrb	r3, [r3, #1]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d161      	bne.n	8005d64 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cb6:	d11f      	bne.n	8005cf8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	0151      	lsls	r1, r2, #5
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	440a      	add	r2, r1
 8005cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cd6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	0151      	lsls	r1, r2, #5
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	440a      	add	r2, r1
 8005cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cf6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	f003 030f 	and.w	r3, r3, #15
 8005d08:	2101      	movs	r1, #1
 8005d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	43db      	mvns	r3, r3
 8005d12:	68f9      	ldr	r1, [r7, #12]
 8005d14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d18:	4013      	ands	r3, r2
 8005d1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d22:	69da      	ldr	r2, [r3, #28]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	f003 030f 	and.w	r3, r3, #15
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	43db      	mvns	r3, r3
 8005d36:	68f9      	ldr	r1, [r7, #12]
 8005d38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	0159      	lsls	r1, r3, #5
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	440b      	add	r3, r1
 8005d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	4b35      	ldr	r3, [pc, #212]	; (8005e34 <USB_DeactivateEndpoint+0x1b0>)
 8005d5e:	4013      	ands	r3, r2
 8005d60:	600b      	str	r3, [r1, #0]
 8005d62:	e060      	b.n	8005e26 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d7a:	d11f      	bne.n	8005dbc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	0151      	lsls	r1, r2, #5
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	440a      	add	r2, r1
 8005d92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d9a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	0151      	lsls	r1, r2, #5
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	440a      	add	r2, r1
 8005db2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005db6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	f003 030f 	and.w	r3, r3, #15
 8005dcc:	2101      	movs	r1, #1
 8005dce:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd2:	041b      	lsls	r3, r3, #16
 8005dd4:	43db      	mvns	r3, r3
 8005dd6:	68f9      	ldr	r1, [r7, #12]
 8005dd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ddc:	4013      	ands	r3, r2
 8005dde:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de6:	69da      	ldr	r2, [r3, #28]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	f003 030f 	and.w	r3, r3, #15
 8005df0:	2101      	movs	r1, #1
 8005df2:	fa01 f303 	lsl.w	r3, r1, r3
 8005df6:	041b      	lsls	r3, r3, #16
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	68f9      	ldr	r1, [r7, #12]
 8005dfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e00:	4013      	ands	r3, r2
 8005e02:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	0159      	lsls	r1, r3, #5
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	440b      	add	r3, r1
 8005e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1e:	4619      	mov	r1, r3
 8005e20:	4b05      	ldr	r3, [pc, #20]	; (8005e38 <USB_DeactivateEndpoint+0x1b4>)
 8005e22:	4013      	ands	r3, r2
 8005e24:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	ec337800 	.word	0xec337800
 8005e38:	eff37800 	.word	0xeff37800

08005e3c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08a      	sub	sp, #40	; 0x28
 8005e40:	af02      	add	r7, sp, #8
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	4613      	mov	r3, r2
 8005e48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	785b      	ldrb	r3, [r3, #1]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	f040 815c 	bne.w	8006116 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d132      	bne.n	8005ecc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	0151      	lsls	r1, r2, #5
 8005e78:	69fa      	ldr	r2, [r7, #28]
 8005e7a:	440a      	add	r2, r1
 8005e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	0151      	lsls	r1, r2, #5
 8005e9c:	69fa      	ldr	r2, [r7, #28]
 8005e9e:	440a      	add	r2, r1
 8005ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ea4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ea8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	0151      	lsls	r1, r2, #5
 8005ebc:	69fa      	ldr	r2, [r7, #28]
 8005ebe:	440a      	add	r2, r1
 8005ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec4:	0cdb      	lsrs	r3, r3, #19
 8005ec6:	04db      	lsls	r3, r3, #19
 8005ec8:	6113      	str	r3, [r2, #16]
 8005eca:	e074      	b.n	8005fb6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	0151      	lsls	r1, r2, #5
 8005ede:	69fa      	ldr	r2, [r7, #28]
 8005ee0:	440a      	add	r2, r1
 8005ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee6:	0cdb      	lsrs	r3, r3, #19
 8005ee8:	04db      	lsls	r3, r3, #19
 8005eea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	0151      	lsls	r1, r2, #5
 8005efe:	69fa      	ldr	r2, [r7, #28]
 8005f00:	440a      	add	r2, r1
 8005f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f06:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f0a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	6999      	ldr	r1, [r3, #24]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	440b      	add	r3, r1
 8005f28:	1e59      	subs	r1, r3, #1
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f32:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005f34:	4b9d      	ldr	r3, [pc, #628]	; (80061ac <USB_EPStartXfer+0x370>)
 8005f36:	400b      	ands	r3, r1
 8005f38:	69b9      	ldr	r1, [r7, #24]
 8005f3a:	0148      	lsls	r0, r1, #5
 8005f3c:	69f9      	ldr	r1, [r7, #28]
 8005f3e:	4401      	add	r1, r0
 8005f40:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f44:	4313      	orrs	r3, r2
 8005f46:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f54:	691a      	ldr	r2, [r3, #16]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f5e:	69b9      	ldr	r1, [r7, #24]
 8005f60:	0148      	lsls	r0, r1, #5
 8005f62:	69f9      	ldr	r1, [r7, #28]
 8005f64:	4401      	add	r1, r0
 8005f66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	791b      	ldrb	r3, [r3, #4]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d11f      	bne.n	8005fb6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	0151      	lsls	r1, r2, #5
 8005f88:	69fa      	ldr	r2, [r7, #28]
 8005f8a:	440a      	add	r2, r1
 8005f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f90:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005f94:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	0151      	lsls	r1, r2, #5
 8005fa8:	69fa      	ldr	r2, [r7, #28]
 8005faa:	440a      	add	r2, r1
 8005fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fb4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005fb6:	79fb      	ldrb	r3, [r7, #7]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d14b      	bne.n	8006054 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d009      	beq.n	8005fd8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	791b      	ldrb	r3, [r3, #4]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d128      	bne.n	8006032 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d110      	bne.n	8006012 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	0151      	lsls	r1, r2, #5
 8006002:	69fa      	ldr	r2, [r7, #28]
 8006004:	440a      	add	r2, r1
 8006006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800600a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800600e:	6013      	str	r3, [r2, #0]
 8006010:	e00f      	b.n	8006032 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	0151      	lsls	r1, r2, #5
 8006024:	69fa      	ldr	r2, [r7, #28]
 8006026:	440a      	add	r2, r1
 8006028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800602c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006030:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	0151      	lsls	r1, r2, #5
 8006044:	69fa      	ldr	r2, [r7, #28]
 8006046:	440a      	add	r2, r1
 8006048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800604c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006050:	6013      	str	r3, [r2, #0]
 8006052:	e133      	b.n	80062bc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	0151      	lsls	r1, r2, #5
 8006066:	69fa      	ldr	r2, [r7, #28]
 8006068:	440a      	add	r2, r1
 800606a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800606e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006072:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	791b      	ldrb	r3, [r3, #4]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d015      	beq.n	80060a8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 811b 	beq.w	80062bc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	f003 030f 	and.w	r3, r3, #15
 8006096:	2101      	movs	r1, #1
 8006098:	fa01 f303 	lsl.w	r3, r1, r3
 800609c:	69f9      	ldr	r1, [r7, #28]
 800609e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060a2:	4313      	orrs	r3, r2
 80060a4:	634b      	str	r3, [r1, #52]	; 0x34
 80060a6:	e109      	b.n	80062bc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d110      	bne.n	80060da <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	0151      	lsls	r1, r2, #5
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	440a      	add	r2, r1
 80060ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060d6:	6013      	str	r3, [r2, #0]
 80060d8:	e00f      	b.n	80060fa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	0151      	lsls	r1, r2, #5
 80060ec:	69fa      	ldr	r2, [r7, #28]
 80060ee:	440a      	add	r2, r1
 80060f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	6919      	ldr	r1, [r3, #16]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	781a      	ldrb	r2, [r3, #0]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	b298      	uxth	r0, r3
 8006108:	79fb      	ldrb	r3, [r7, #7]
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	4603      	mov	r3, r0
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 fade 	bl	80066d0 <USB_WritePacket>
 8006114:	e0d2      	b.n	80062bc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	4413      	add	r3, r2
 800611e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	0151      	lsls	r1, r2, #5
 8006128:	69fa      	ldr	r2, [r7, #28]
 800612a:	440a      	add	r2, r1
 800612c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006130:	0cdb      	lsrs	r3, r3, #19
 8006132:	04db      	lsls	r3, r3, #19
 8006134:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	0151      	lsls	r1, r2, #5
 8006148:	69fa      	ldr	r2, [r7, #28]
 800614a:	440a      	add	r2, r1
 800614c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006150:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006154:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006158:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d126      	bne.n	80061b0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	4413      	add	r3, r2
 800616a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616e:	691a      	ldr	r2, [r3, #16]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006178:	69b9      	ldr	r1, [r7, #24]
 800617a:	0148      	lsls	r0, r1, #5
 800617c:	69f9      	ldr	r1, [r7, #28]
 800617e:	4401      	add	r1, r0
 8006180:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006184:	4313      	orrs	r3, r2
 8006186:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	4413      	add	r3, r2
 8006190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	0151      	lsls	r1, r2, #5
 800619a:	69fa      	ldr	r2, [r7, #28]
 800619c:	440a      	add	r2, r1
 800619e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061a6:	6113      	str	r3, [r2, #16]
 80061a8:	e03a      	b.n	8006220 <USB_EPStartXfer+0x3e4>
 80061aa:	bf00      	nop
 80061ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	699a      	ldr	r2, [r3, #24]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	4413      	add	r3, r2
 80061ba:	1e5a      	subs	r2, r3, #1
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	8afa      	ldrh	r2, [r7, #22]
 80061cc:	fb03 f202 	mul.w	r2, r3, r2
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e0:	691a      	ldr	r2, [r3, #16]
 80061e2:	8afb      	ldrh	r3, [r7, #22]
 80061e4:	04d9      	lsls	r1, r3, #19
 80061e6:	4b38      	ldr	r3, [pc, #224]	; (80062c8 <USB_EPStartXfer+0x48c>)
 80061e8:	400b      	ands	r3, r1
 80061ea:	69b9      	ldr	r1, [r7, #24]
 80061ec:	0148      	lsls	r0, r1, #5
 80061ee:	69f9      	ldr	r1, [r7, #28]
 80061f0:	4401      	add	r1, r0
 80061f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061f6:	4313      	orrs	r3, r2
 80061f8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	4413      	add	r3, r2
 8006202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006206:	691a      	ldr	r2, [r3, #16]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006210:	69b9      	ldr	r1, [r7, #24]
 8006212:	0148      	lsls	r0, r1, #5
 8006214:	69f9      	ldr	r1, [r7, #28]
 8006216:	4401      	add	r1, r0
 8006218:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800621c:	4313      	orrs	r3, r2
 800621e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006220:	79fb      	ldrb	r3, [r7, #7]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d10d      	bne.n	8006242 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d009      	beq.n	8006242 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	6919      	ldr	r1, [r3, #16]
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800623e:	460a      	mov	r2, r1
 8006240:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	791b      	ldrb	r3, [r3, #4]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d128      	bne.n	800629c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006256:	2b00      	cmp	r3, #0
 8006258:	d110      	bne.n	800627c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	0151      	lsls	r1, r2, #5
 800626c:	69fa      	ldr	r2, [r7, #28]
 800626e:	440a      	add	r2, r1
 8006270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006274:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006278:	6013      	str	r3, [r2, #0]
 800627a:	e00f      	b.n	800629c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	4413      	add	r3, r2
 8006284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	0151      	lsls	r1, r2, #5
 800628e:	69fa      	ldr	r2, [r7, #28]
 8006290:	440a      	add	r2, r1
 8006292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800629a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	0151      	lsls	r1, r2, #5
 80062ae:	69fa      	ldr	r2, [r7, #28]
 80062b0:	440a      	add	r2, r1
 80062b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3720      	adds	r7, #32
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	1ff80000 	.word	0x1ff80000

080062cc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	4613      	mov	r3, r2
 80062d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	785b      	ldrb	r3, [r3, #1]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	f040 80ce 	bne.w	800648a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d132      	bne.n	800635c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	0151      	lsls	r1, r2, #5
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	440a      	add	r2, r1
 800630c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006310:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006314:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006318:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	4413      	add	r3, r2
 8006322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	0151      	lsls	r1, r2, #5
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	440a      	add	r2, r1
 8006330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006334:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006338:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	0151      	lsls	r1, r2, #5
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	440a      	add	r2, r1
 8006350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006354:	0cdb      	lsrs	r3, r3, #19
 8006356:	04db      	lsls	r3, r3, #19
 8006358:	6113      	str	r3, [r2, #16]
 800635a:	e04e      	b.n	80063fa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	4413      	add	r3, r2
 8006364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	0151      	lsls	r1, r2, #5
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	440a      	add	r2, r1
 8006372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006376:	0cdb      	lsrs	r3, r3, #19
 8006378:	04db      	lsls	r3, r3, #19
 800637a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	0151      	lsls	r1, r2, #5
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	440a      	add	r2, r1
 8006392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006396:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800639a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800639e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	699a      	ldr	r2, [r3, #24]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d903      	bls.n	80063b4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	68da      	ldr	r2, [r3, #12]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	0151      	lsls	r1, r2, #5
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	440a      	add	r2, r1
 80063ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e0:	691a      	ldr	r2, [r3, #16]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ea:	6939      	ldr	r1, [r7, #16]
 80063ec:	0148      	lsls	r0, r1, #5
 80063ee:	6979      	ldr	r1, [r7, #20]
 80063f0:	4401      	add	r1, r0
 80063f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80063f6:	4313      	orrs	r3, r2
 80063f8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80063fa:	79fb      	ldrb	r3, [r7, #7]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d11e      	bne.n	800643e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d009      	beq.n	800641c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006414:	461a      	mov	r2, r3
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	4413      	add	r3, r2
 8006424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	0151      	lsls	r1, r2, #5
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	440a      	add	r2, r1
 8006432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006436:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800643a:	6013      	str	r3, [r2, #0]
 800643c:	e097      	b.n	800656e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	0151      	lsls	r1, r2, #5
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	440a      	add	r2, r1
 8006454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006458:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800645c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	2b00      	cmp	r3, #0
 8006464:	f000 8083 	beq.w	800656e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800646e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	f003 030f 	and.w	r3, r3, #15
 8006478:	2101      	movs	r1, #1
 800647a:	fa01 f303 	lsl.w	r3, r1, r3
 800647e:	6979      	ldr	r1, [r7, #20]
 8006480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006484:	4313      	orrs	r3, r2
 8006486:	634b      	str	r3, [r1, #52]	; 0x34
 8006488:	e071      	b.n	800656e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	0151      	lsls	r1, r2, #5
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	440a      	add	r2, r1
 80064a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064a4:	0cdb      	lsrs	r3, r3, #19
 80064a6:	04db      	lsls	r3, r3, #19
 80064a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	0151      	lsls	r1, r2, #5
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	440a      	add	r2, r1
 80064c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	0151      	lsls	r1, r2, #5
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	440a      	add	r2, r1
 80064fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006500:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006504:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	4413      	add	r3, r2
 800650e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006512:	691a      	ldr	r2, [r3, #16]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	69db      	ldr	r3, [r3, #28]
 8006518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800651c:	6939      	ldr	r1, [r7, #16]
 800651e:	0148      	lsls	r0, r1, #5
 8006520:	6979      	ldr	r1, [r7, #20]
 8006522:	4401      	add	r1, r0
 8006524:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006528:	4313      	orrs	r3, r2
 800652a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800652c:	79fb      	ldrb	r3, [r7, #7]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d10d      	bne.n	800654e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d009      	beq.n	800654e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	6919      	ldr	r1, [r3, #16]
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654a:	460a      	mov	r2, r1
 800654c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	4413      	add	r3, r2
 8006556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	0151      	lsls	r1, r2, #5
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	440a      	add	r2, r1
 8006564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006568:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800656c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	371c      	adds	r7, #28
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	785b      	ldrb	r3, [r3, #1]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d14a      	bne.n	8006630 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065b2:	f040 8086 	bne.w	80066c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	7812      	ldrb	r2, [r2, #0]
 80065ca:	0151      	lsls	r1, r2, #5
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	440a      	add	r2, r1
 80065d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	7812      	ldrb	r2, [r2, #0]
 80065ee:	0151      	lsls	r1, r2, #5
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	440a      	add	r2, r1
 80065f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3301      	adds	r3, #1
 8006602:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f242 7210 	movw	r2, #10000	; 0x2710
 800660a:	4293      	cmp	r3, r2
 800660c:	d902      	bls.n	8006614 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	75fb      	strb	r3, [r7, #23]
          break;
 8006612:	e056      	b.n	80066c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006628:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800662c:	d0e7      	beq.n	80065fe <USB_EPStopXfer+0x82>
 800662e:	e048      	b.n	80066c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	4413      	add	r3, r2
 800663a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006648:	d13b      	bne.n	80066c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	7812      	ldrb	r2, [r2, #0]
 800665e:	0151      	lsls	r1, r2, #5
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	440a      	add	r2, r1
 8006664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006668:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800666c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	4413      	add	r3, r2
 8006678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	7812      	ldrb	r2, [r2, #0]
 8006682:	0151      	lsls	r1, r2, #5
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	440a      	add	r2, r1
 8006688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800668c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006690:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3301      	adds	r3, #1
 8006696:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f242 7210 	movw	r2, #10000	; 0x2710
 800669e:	4293      	cmp	r3, r2
 80066a0:	d902      	bls.n	80066a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	75fb      	strb	r3, [r7, #23]
          break;
 80066a6:	e00c      	b.n	80066c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066c0:	d0e7      	beq.n	8006692 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80066c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	371c      	adds	r7, #28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b089      	sub	sp, #36	; 0x24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	4611      	mov	r1, r2
 80066dc:	461a      	mov	r2, r3
 80066de:	460b      	mov	r3, r1
 80066e0:	71fb      	strb	r3, [r7, #7]
 80066e2:	4613      	mov	r3, r2
 80066e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80066ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d123      	bne.n	800673e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80066f6:	88bb      	ldrh	r3, [r7, #4]
 80066f8:	3303      	adds	r3, #3
 80066fa:	089b      	lsrs	r3, r3, #2
 80066fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80066fe:	2300      	movs	r3, #0
 8006700:	61bb      	str	r3, [r7, #24]
 8006702:	e018      	b.n	8006736 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006704:	79fb      	ldrb	r3, [r7, #7]
 8006706:	031a      	lsls	r2, r3, #12
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	4413      	add	r3, r2
 800670c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006710:	461a      	mov	r2, r3
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	3301      	adds	r3, #1
 800671c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	3301      	adds	r3, #1
 8006722:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	3301      	adds	r3, #1
 8006728:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	3301      	adds	r3, #1
 800672e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	3301      	adds	r3, #1
 8006734:	61bb      	str	r3, [r7, #24]
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	429a      	cmp	r2, r3
 800673c:	d3e2      	bcc.n	8006704 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3724      	adds	r7, #36	; 0x24
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800674c:	b480      	push	{r7}
 800674e:	b08b      	sub	sp, #44	; 0x2c
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	4613      	mov	r3, r2
 8006758:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006762:	88fb      	ldrh	r3, [r7, #6]
 8006764:	089b      	lsrs	r3, r3, #2
 8006766:	b29b      	uxth	r3, r3
 8006768:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800676a:	88fb      	ldrh	r3, [r7, #6]
 800676c:	f003 0303 	and.w	r3, r3, #3
 8006770:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006772:	2300      	movs	r3, #0
 8006774:	623b      	str	r3, [r7, #32]
 8006776:	e014      	b.n	80067a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	601a      	str	r2, [r3, #0]
    pDest++;
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	3301      	adds	r3, #1
 8006788:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	3301      	adds	r3, #1
 800678e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	3301      	adds	r3, #1
 8006794:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	3301      	adds	r3, #1
 800679a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	3301      	adds	r3, #1
 80067a0:	623b      	str	r3, [r7, #32]
 80067a2:	6a3a      	ldr	r2, [r7, #32]
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d3e6      	bcc.n	8006778 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80067aa:	8bfb      	ldrh	r3, [r7, #30]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d01e      	beq.n	80067ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067ba:	461a      	mov	r2, r3
 80067bc:	f107 0310 	add.w	r3, r7, #16
 80067c0:	6812      	ldr	r2, [r2, #0]
 80067c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	fa22 f303 	lsr.w	r3, r2, r3
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	701a      	strb	r2, [r3, #0]
      i++;
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	3301      	adds	r3, #1
 80067da:	623b      	str	r3, [r7, #32]
      pDest++;
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	3301      	adds	r3, #1
 80067e0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80067e2:	8bfb      	ldrh	r3, [r7, #30]
 80067e4:	3b01      	subs	r3, #1
 80067e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80067e8:	8bfb      	ldrh	r3, [r7, #30]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1ea      	bne.n	80067c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	372c      	adds	r7, #44	; 0x2c
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	785b      	ldrb	r3, [r3, #1]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d12c      	bne.n	8006872 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	4413      	add	r3, r2
 8006820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	db12      	blt.n	8006850 <USB_EPSetStall+0x54>
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00f      	beq.n	8006850 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4413      	add	r3, r2
 8006838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	0151      	lsls	r1, r2, #5
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	440a      	add	r2, r1
 8006846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800684a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800684e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	0151      	lsls	r1, r2, #5
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	440a      	add	r2, r1
 8006866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800686e:	6013      	str	r3, [r2, #0]
 8006870:	e02b      	b.n	80068ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	4413      	add	r3, r2
 800687a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	db12      	blt.n	80068aa <USB_EPSetStall+0xae>
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00f      	beq.n	80068aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	0151      	lsls	r1, r2, #5
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	440a      	add	r2, r1
 80068a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	0151      	lsls	r1, r2, #5
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	440a      	add	r2, r1
 80068c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80068c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	785b      	ldrb	r3, [r3, #1]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d128      	bne.n	8006946 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	0151      	lsls	r1, r2, #5
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	440a      	add	r2, r1
 800690a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800690e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006912:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	791b      	ldrb	r3, [r3, #4]
 8006918:	2b03      	cmp	r3, #3
 800691a:	d003      	beq.n	8006924 <USB_EPClearStall+0x4c>
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	791b      	ldrb	r3, [r3, #4]
 8006920:	2b02      	cmp	r3, #2
 8006922:	d138      	bne.n	8006996 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4413      	add	r3, r2
 800692c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	0151      	lsls	r1, r2, #5
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	440a      	add	r2, r1
 800693a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800693e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006942:	6013      	str	r3, [r2, #0]
 8006944:	e027      	b.n	8006996 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	4413      	add	r3, r2
 800694e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	0151      	lsls	r1, r2, #5
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	440a      	add	r2, r1
 800695c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006960:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006964:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	791b      	ldrb	r3, [r3, #4]
 800696a:	2b03      	cmp	r3, #3
 800696c:	d003      	beq.n	8006976 <USB_EPClearStall+0x9e>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	791b      	ldrb	r3, [r3, #4]
 8006972:	2b02      	cmp	r3, #2
 8006974:	d10f      	bne.n	8006996 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	4413      	add	r3, r2
 800697e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	0151      	lsls	r1, r2, #5
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	440a      	add	r2, r1
 800698c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006994:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	460b      	mov	r3, r1
 80069ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80069c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	78fb      	ldrb	r3, [r7, #3]
 80069d2:	011b      	lsls	r3, r3, #4
 80069d4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80069d8:	68f9      	ldr	r1, [r7, #12]
 80069da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069de:	4313      	orrs	r3, r2
 80069e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a0a:	f023 0303 	bic.w	r3, r3, #3
 8006a0e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a1e:	f023 0302 	bic.w	r3, r3, #2
 8006a22:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b085      	sub	sp, #20
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a4c:	f023 0303 	bic.w	r3, r3, #3
 8006a50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a60:	f043 0302 	orr.w	r3, r3, #2
 8006a64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	4013      	ands	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b085      	sub	sp, #20
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	4013      	ands	r3, r2
 8006abc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	0c1b      	lsrs	r3, r3, #16
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b085      	sub	sp, #20
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aea:	69db      	ldr	r3, [r3, #28]
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	4013      	ands	r3, r2
 8006af0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	b29b      	uxth	r3, r3
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b085      	sub	sp, #20
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006b12:	78fb      	ldrb	r3, [r7, #3]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b30:	68bb      	ldr	r3, [r7, #8]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b087      	sub	sp, #28
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	460b      	mov	r3, r1
 8006b48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b60:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006b62:	78fb      	ldrb	r3, [r7, #3]
 8006b64:	f003 030f 	and.w	r3, r3, #15
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b6e:	01db      	lsls	r3, r3, #7
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006b78:	78fb      	ldrb	r3, [r7, #3]
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	4013      	ands	r3, r2
 8006b8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b8c:	68bb      	ldr	r3, [r7, #8]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	371c      	adds	r7, #28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	f003 0301 	and.w	r3, r3, #1
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b085      	sub	sp, #20
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bd0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006bd4:	f023 0307 	bic.w	r3, r3, #7
 8006bd8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	460b      	mov	r3, r1
 8006c06:	607a      	str	r2, [r7, #4]
 8006c08:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	333c      	adds	r3, #60	; 0x3c
 8006c12:	3304      	adds	r3, #4
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	4a26      	ldr	r2, [pc, #152]	; (8006cb4 <USB_EP0_OutStart+0xb8>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d90a      	bls.n	8006c36 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c30:	d101      	bne.n	8006c36 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	e037      	b.n	8006ca6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	2300      	movs	r3, #0
 8006c40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c64:	f043 0318 	orr.w	r3, r3, #24
 8006c68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c78:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006c7c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006c7e:	7afb      	ldrb	r3, [r7, #11]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d10f      	bne.n	8006ca4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c9e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006ca2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	371c      	adds	r7, #28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	4f54300a 	.word	0x4f54300a

08006cb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4a13      	ldr	r2, [pc, #76]	; (8006d1c <USB_CoreReset+0x64>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d901      	bls.n	8006cd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e01b      	b.n	8006d0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	daf2      	bge.n	8006cc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	f043 0201 	orr.w	r2, r3, #1
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4a09      	ldr	r2, [pc, #36]	; (8006d1c <USB_CoreReset+0x64>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d901      	bls.n	8006d00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e006      	b.n	8006d0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d0f0      	beq.n	8006cee <USB_CoreReset+0x36>

  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	00030d40 	.word	0x00030d40

08006d20 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d2c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d30:	f002 fcaa 	bl	8009688 <USBD_static_malloc>
 8006d34:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d109      	bne.n	8006d50 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	32b0      	adds	r2, #176	; 0xb0
 8006d46:	2100      	movs	r1, #0
 8006d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	e0d4      	b.n	8006efa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006d50:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006d54:	2100      	movs	r1, #0
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f002 fd16 	bl	8009788 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	32b0      	adds	r2, #176	; 0xb0
 8006d66:	68f9      	ldr	r1, [r7, #12]
 8006d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	32b0      	adds	r2, #176	; 0xb0
 8006d76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	7c1b      	ldrb	r3, [r3, #16]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d138      	bne.n	8006dfa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006d88:	4b5e      	ldr	r3, [pc, #376]	; (8006f04 <USBD_CDC_Init+0x1e4>)
 8006d8a:	7819      	ldrb	r1, [r3, #0]
 8006d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d90:	2202      	movs	r2, #2
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f002 fb55 	bl	8009442 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006d98:	4b5a      	ldr	r3, [pc, #360]	; (8006f04 <USBD_CDC_Init+0x1e4>)
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	f003 020f 	and.w	r2, r3, #15
 8006da0:	6879      	ldr	r1, [r7, #4]
 8006da2:	4613      	mov	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	440b      	add	r3, r1
 8006dac:	3324      	adds	r3, #36	; 0x24
 8006dae:	2201      	movs	r2, #1
 8006db0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006db2:	4b55      	ldr	r3, [pc, #340]	; (8006f08 <USBD_CDC_Init+0x1e8>)
 8006db4:	7819      	ldrb	r1, [r3, #0]
 8006db6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dba:	2202      	movs	r2, #2
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f002 fb40 	bl	8009442 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006dc2:	4b51      	ldr	r3, [pc, #324]	; (8006f08 <USBD_CDC_Init+0x1e8>)
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	f003 020f 	and.w	r2, r3, #15
 8006dca:	6879      	ldr	r1, [r7, #4]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	440b      	add	r3, r1
 8006dd6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006dda:	2201      	movs	r2, #1
 8006ddc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006dde:	4b4b      	ldr	r3, [pc, #300]	; (8006f0c <USBD_CDC_Init+0x1ec>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	f003 020f 	and.w	r2, r3, #15
 8006de6:	6879      	ldr	r1, [r7, #4]
 8006de8:	4613      	mov	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	440b      	add	r3, r1
 8006df2:	3326      	adds	r3, #38	; 0x26
 8006df4:	2210      	movs	r2, #16
 8006df6:	801a      	strh	r2, [r3, #0]
 8006df8:	e035      	b.n	8006e66 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006dfa:	4b42      	ldr	r3, [pc, #264]	; (8006f04 <USBD_CDC_Init+0x1e4>)
 8006dfc:	7819      	ldrb	r1, [r3, #0]
 8006dfe:	2340      	movs	r3, #64	; 0x40
 8006e00:	2202      	movs	r2, #2
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f002 fb1d 	bl	8009442 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e08:	4b3e      	ldr	r3, [pc, #248]	; (8006f04 <USBD_CDC_Init+0x1e4>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	f003 020f 	and.w	r2, r3, #15
 8006e10:	6879      	ldr	r1, [r7, #4]
 8006e12:	4613      	mov	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4413      	add	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	440b      	add	r3, r1
 8006e1c:	3324      	adds	r3, #36	; 0x24
 8006e1e:	2201      	movs	r2, #1
 8006e20:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e22:	4b39      	ldr	r3, [pc, #228]	; (8006f08 <USBD_CDC_Init+0x1e8>)
 8006e24:	7819      	ldrb	r1, [r3, #0]
 8006e26:	2340      	movs	r3, #64	; 0x40
 8006e28:	2202      	movs	r2, #2
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f002 fb09 	bl	8009442 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e30:	4b35      	ldr	r3, [pc, #212]	; (8006f08 <USBD_CDC_Init+0x1e8>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	f003 020f 	and.w	r2, r3, #15
 8006e38:	6879      	ldr	r1, [r7, #4]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	440b      	add	r3, r1
 8006e44:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e48:	2201      	movs	r2, #1
 8006e4a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006e4c:	4b2f      	ldr	r3, [pc, #188]	; (8006f0c <USBD_CDC_Init+0x1ec>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	f003 020f 	and.w	r2, r3, #15
 8006e54:	6879      	ldr	r1, [r7, #4]
 8006e56:	4613      	mov	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	440b      	add	r3, r1
 8006e60:	3326      	adds	r3, #38	; 0x26
 8006e62:	2210      	movs	r2, #16
 8006e64:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e66:	4b29      	ldr	r3, [pc, #164]	; (8006f0c <USBD_CDC_Init+0x1ec>)
 8006e68:	7819      	ldrb	r1, [r3, #0]
 8006e6a:	2308      	movs	r3, #8
 8006e6c:	2203      	movs	r2, #3
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f002 fae7 	bl	8009442 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006e74:	4b25      	ldr	r3, [pc, #148]	; (8006f0c <USBD_CDC_Init+0x1ec>)
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	f003 020f 	and.w	r2, r3, #15
 8006e7c:	6879      	ldr	r1, [r7, #4]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	440b      	add	r3, r1
 8006e88:	3324      	adds	r3, #36	; 0x24
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	33b0      	adds	r3, #176	; 0xb0
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	e018      	b.n	8006efa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	7c1b      	ldrb	r3, [r3, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10a      	bne.n	8006ee6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ed0:	4b0d      	ldr	r3, [pc, #52]	; (8006f08 <USBD_CDC_Init+0x1e8>)
 8006ed2:	7819      	ldrb	r1, [r3, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f002 fb9e 	bl	8009620 <USBD_LL_PrepareReceive>
 8006ee4:	e008      	b.n	8006ef8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ee6:	4b08      	ldr	r3, [pc, #32]	; (8006f08 <USBD_CDC_Init+0x1e8>)
 8006ee8:	7819      	ldrb	r1, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ef0:	2340      	movs	r3, #64	; 0x40
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f002 fb94 	bl	8009620 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	20000093 	.word	0x20000093
 8006f08:	20000094 	.word	0x20000094
 8006f0c:	20000095 	.word	0x20000095

08006f10 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	460b      	mov	r3, r1
 8006f1a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006f1c:	4b3a      	ldr	r3, [pc, #232]	; (8007008 <USBD_CDC_DeInit+0xf8>)
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	4619      	mov	r1, r3
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f002 fab3 	bl	800948e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006f28:	4b37      	ldr	r3, [pc, #220]	; (8007008 <USBD_CDC_DeInit+0xf8>)
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	f003 020f 	and.w	r2, r3, #15
 8006f30:	6879      	ldr	r1, [r7, #4]
 8006f32:	4613      	mov	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	440b      	add	r3, r1
 8006f3c:	3324      	adds	r3, #36	; 0x24
 8006f3e:	2200      	movs	r2, #0
 8006f40:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006f42:	4b32      	ldr	r3, [pc, #200]	; (800700c <USBD_CDC_DeInit+0xfc>)
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f002 faa0 	bl	800948e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006f4e:	4b2f      	ldr	r3, [pc, #188]	; (800700c <USBD_CDC_DeInit+0xfc>)
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	f003 020f 	and.w	r2, r3, #15
 8006f56:	6879      	ldr	r1, [r7, #4]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	440b      	add	r3, r1
 8006f62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f66:	2200      	movs	r2, #0
 8006f68:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006f6a:	4b29      	ldr	r3, [pc, #164]	; (8007010 <USBD_CDC_DeInit+0x100>)
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f002 fa8c 	bl	800948e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006f76:	4b26      	ldr	r3, [pc, #152]	; (8007010 <USBD_CDC_DeInit+0x100>)
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	f003 020f 	and.w	r2, r3, #15
 8006f7e:	6879      	ldr	r1, [r7, #4]
 8006f80:	4613      	mov	r3, r2
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	4413      	add	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	440b      	add	r3, r1
 8006f8a:	3324      	adds	r3, #36	; 0x24
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006f90:	4b1f      	ldr	r3, [pc, #124]	; (8007010 <USBD_CDC_DeInit+0x100>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	f003 020f 	and.w	r2, r3, #15
 8006f98:	6879      	ldr	r1, [r7, #4]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	440b      	add	r3, r1
 8006fa4:	3326      	adds	r3, #38	; 0x26
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	32b0      	adds	r2, #176	; 0xb0
 8006fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d01f      	beq.n	8006ffc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	33b0      	adds	r3, #176	; 0xb0
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	32b0      	adds	r2, #176	; 0xb0
 8006fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f002 fb60 	bl	80096a4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	32b0      	adds	r2, #176	; 0xb0
 8006fee:	2100      	movs	r1, #0
 8006ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	20000093 	.word	0x20000093
 800700c:	20000094 	.word	0x20000094
 8007010:	20000095 	.word	0x20000095

08007014 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	32b0      	adds	r2, #176	; 0xb0
 8007028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800702c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007032:	2300      	movs	r3, #0
 8007034:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007036:	2300      	movs	r3, #0
 8007038:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d101      	bne.n	8007044 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007040:	2303      	movs	r3, #3
 8007042:	e0bf      	b.n	80071c4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800704c:	2b00      	cmp	r3, #0
 800704e:	d050      	beq.n	80070f2 <USBD_CDC_Setup+0xde>
 8007050:	2b20      	cmp	r3, #32
 8007052:	f040 80af 	bne.w	80071b4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	88db      	ldrh	r3, [r3, #6]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d03a      	beq.n	80070d4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	b25b      	sxtb	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	da1b      	bge.n	80070a0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	33b0      	adds	r3, #176	; 0xb0
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	683a      	ldr	r2, [r7, #0]
 800707c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800707e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	88d2      	ldrh	r2, [r2, #6]
 8007084:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	88db      	ldrh	r3, [r3, #6]
 800708a:	2b07      	cmp	r3, #7
 800708c:	bf28      	it	cs
 800708e:	2307      	movcs	r3, #7
 8007090:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	89fa      	ldrh	r2, [r7, #14]
 8007096:	4619      	mov	r1, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f001 fd89 	bl	8008bb0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800709e:	e090      	b.n	80071c2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	785a      	ldrb	r2, [r3, #1]
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	88db      	ldrh	r3, [r3, #6]
 80070ae:	2b3f      	cmp	r3, #63	; 0x3f
 80070b0:	d803      	bhi.n	80070ba <USBD_CDC_Setup+0xa6>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	88db      	ldrh	r3, [r3, #6]
 80070b6:	b2da      	uxtb	r2, r3
 80070b8:	e000      	b.n	80070bc <USBD_CDC_Setup+0xa8>
 80070ba:	2240      	movs	r2, #64	; 0x40
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80070c2:	6939      	ldr	r1, [r7, #16]
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80070ca:	461a      	mov	r2, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f001 fd9b 	bl	8008c08 <USBD_CtlPrepareRx>
      break;
 80070d2:	e076      	b.n	80071c2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	33b0      	adds	r3, #176	; 0xb0
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	7850      	ldrb	r0, [r2, #1]
 80070ea:	2200      	movs	r2, #0
 80070ec:	6839      	ldr	r1, [r7, #0]
 80070ee:	4798      	blx	r3
      break;
 80070f0:	e067      	b.n	80071c2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	785b      	ldrb	r3, [r3, #1]
 80070f6:	2b0b      	cmp	r3, #11
 80070f8:	d851      	bhi.n	800719e <USBD_CDC_Setup+0x18a>
 80070fa:	a201      	add	r2, pc, #4	; (adr r2, 8007100 <USBD_CDC_Setup+0xec>)
 80070fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007100:	08007131 	.word	0x08007131
 8007104:	080071ad 	.word	0x080071ad
 8007108:	0800719f 	.word	0x0800719f
 800710c:	0800719f 	.word	0x0800719f
 8007110:	0800719f 	.word	0x0800719f
 8007114:	0800719f 	.word	0x0800719f
 8007118:	0800719f 	.word	0x0800719f
 800711c:	0800719f 	.word	0x0800719f
 8007120:	0800719f 	.word	0x0800719f
 8007124:	0800719f 	.word	0x0800719f
 8007128:	0800715b 	.word	0x0800715b
 800712c:	08007185 	.word	0x08007185
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b03      	cmp	r3, #3
 800713a:	d107      	bne.n	800714c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800713c:	f107 030a 	add.w	r3, r7, #10
 8007140:	2202      	movs	r2, #2
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f001 fd33 	bl	8008bb0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800714a:	e032      	b.n	80071b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800714c:	6839      	ldr	r1, [r7, #0]
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f001 fcbd 	bl	8008ace <USBD_CtlError>
            ret = USBD_FAIL;
 8007154:	2303      	movs	r3, #3
 8007156:	75fb      	strb	r3, [r7, #23]
          break;
 8007158:	e02b      	b.n	80071b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b03      	cmp	r3, #3
 8007164:	d107      	bne.n	8007176 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007166:	f107 030d 	add.w	r3, r7, #13
 800716a:	2201      	movs	r2, #1
 800716c:	4619      	mov	r1, r3
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f001 fd1e 	bl	8008bb0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007174:	e01d      	b.n	80071b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 fca8 	bl	8008ace <USBD_CtlError>
            ret = USBD_FAIL;
 800717e:	2303      	movs	r3, #3
 8007180:	75fb      	strb	r3, [r7, #23]
          break;
 8007182:	e016      	b.n	80071b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b03      	cmp	r3, #3
 800718e:	d00f      	beq.n	80071b0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f001 fc9b 	bl	8008ace <USBD_CtlError>
            ret = USBD_FAIL;
 8007198:	2303      	movs	r3, #3
 800719a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800719c:	e008      	b.n	80071b0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 fc94 	bl	8008ace <USBD_CtlError>
          ret = USBD_FAIL;
 80071a6:	2303      	movs	r3, #3
 80071a8:	75fb      	strb	r3, [r7, #23]
          break;
 80071aa:	e002      	b.n	80071b2 <USBD_CDC_Setup+0x19e>
          break;
 80071ac:	bf00      	nop
 80071ae:	e008      	b.n	80071c2 <USBD_CDC_Setup+0x1ae>
          break;
 80071b0:	bf00      	nop
      }
      break;
 80071b2:	e006      	b.n	80071c2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f001 fc89 	bl	8008ace <USBD_CtlError>
      ret = USBD_FAIL;
 80071bc:	2303      	movs	r3, #3
 80071be:	75fb      	strb	r3, [r7, #23]
      break;
 80071c0:	bf00      	nop
  }

  return (uint8_t)ret;
 80071c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3718      	adds	r7, #24
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	460b      	mov	r3, r1
 80071d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80071de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	32b0      	adds	r2, #176	; 0xb0
 80071ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e065      	b.n	80072c2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	32b0      	adds	r2, #176	; 0xb0
 8007200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007204:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007206:	78fb      	ldrb	r3, [r7, #3]
 8007208:	f003 020f 	and.w	r2, r3, #15
 800720c:	6879      	ldr	r1, [r7, #4]
 800720e:	4613      	mov	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4413      	add	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	440b      	add	r3, r1
 8007218:	3318      	adds	r3, #24
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d02f      	beq.n	8007280 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007220:	78fb      	ldrb	r3, [r7, #3]
 8007222:	f003 020f 	and.w	r2, r3, #15
 8007226:	6879      	ldr	r1, [r7, #4]
 8007228:	4613      	mov	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	440b      	add	r3, r1
 8007232:	3318      	adds	r3, #24
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	78fb      	ldrb	r3, [r7, #3]
 8007238:	f003 010f 	and.w	r1, r3, #15
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	460b      	mov	r3, r1
 8007240:	00db      	lsls	r3, r3, #3
 8007242:	440b      	add	r3, r1
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4403      	add	r3, r0
 8007248:	3348      	adds	r3, #72	; 0x48
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007250:	fb01 f303 	mul.w	r3, r1, r3
 8007254:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007256:	2b00      	cmp	r3, #0
 8007258:	d112      	bne.n	8007280 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800725a:	78fb      	ldrb	r3, [r7, #3]
 800725c:	f003 020f 	and.w	r2, r3, #15
 8007260:	6879      	ldr	r1, [r7, #4]
 8007262:	4613      	mov	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4413      	add	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	440b      	add	r3, r1
 800726c:	3318      	adds	r3, #24
 800726e:	2200      	movs	r2, #0
 8007270:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007272:	78f9      	ldrb	r1, [r7, #3]
 8007274:	2300      	movs	r3, #0
 8007276:	2200      	movs	r2, #0
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f002 f9b0 	bl	80095de <USBD_LL_Transmit>
 800727e:	e01f      	b.n	80072c0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2200      	movs	r2, #0
 8007284:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	33b0      	adds	r3, #176	; 0xb0
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d010      	beq.n	80072c0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	33b0      	adds	r3, #176	; 0xb0
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80072bc:	78fa      	ldrb	r2, [r7, #3]
 80072be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b084      	sub	sp, #16
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	460b      	mov	r3, r1
 80072d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	32b0      	adds	r2, #176	; 0xb0
 80072e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	32b0      	adds	r2, #176	; 0xb0
 80072f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d101      	bne.n	80072fc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80072f8:	2303      	movs	r3, #3
 80072fa:	e01a      	b.n	8007332 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80072fc:	78fb      	ldrb	r3, [r7, #3]
 80072fe:	4619      	mov	r1, r3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f002 f9ae 	bl	8009662 <USBD_LL_GetRxDataSize>
 8007306:	4602      	mov	r2, r0
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	33b0      	adds	r3, #176	; 0xb0
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800732c:	4611      	mov	r1, r2
 800732e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b084      	sub	sp, #16
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	32b0      	adds	r2, #176	; 0xb0
 800734c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007350:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007358:	2303      	movs	r3, #3
 800735a:	e025      	b.n	80073a8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	33b0      	adds	r3, #176	; 0xb0
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d01a      	beq.n	80073a6 <USBD_CDC_EP0_RxReady+0x6c>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007376:	2bff      	cmp	r3, #255	; 0xff
 8007378:	d015      	beq.n	80073a6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	33b0      	adds	r3, #176	; 0xb0
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4413      	add	r3, r2
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007392:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800739a:	b292      	uxth	r2, r2
 800739c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	22ff      	movs	r2, #255	; 0xff
 80073a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80073b8:	2182      	movs	r1, #130	; 0x82
 80073ba:	4818      	ldr	r0, [pc, #96]	; (800741c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80073bc:	f000 fd4f 	bl	8007e5e <USBD_GetEpDesc>
 80073c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80073c2:	2101      	movs	r1, #1
 80073c4:	4815      	ldr	r0, [pc, #84]	; (800741c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80073c6:	f000 fd4a 	bl	8007e5e <USBD_GetEpDesc>
 80073ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80073cc:	2181      	movs	r1, #129	; 0x81
 80073ce:	4813      	ldr	r0, [pc, #76]	; (800741c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80073d0:	f000 fd45 	bl	8007e5e <USBD_GetEpDesc>
 80073d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d002      	beq.n	80073e2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	2210      	movs	r2, #16
 80073e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d006      	beq.n	80073f6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073f0:	711a      	strb	r2, [r3, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d006      	beq.n	800740a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007404:	711a      	strb	r2, [r3, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2243      	movs	r2, #67	; 0x43
 800740e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007410:	4b02      	ldr	r3, [pc, #8]	; (800741c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007412:	4618      	mov	r0, r3
 8007414:	3718      	adds	r7, #24
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	20000050 	.word	0x20000050

08007420 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007428:	2182      	movs	r1, #130	; 0x82
 800742a:	4818      	ldr	r0, [pc, #96]	; (800748c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800742c:	f000 fd17 	bl	8007e5e <USBD_GetEpDesc>
 8007430:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007432:	2101      	movs	r1, #1
 8007434:	4815      	ldr	r0, [pc, #84]	; (800748c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007436:	f000 fd12 	bl	8007e5e <USBD_GetEpDesc>
 800743a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800743c:	2181      	movs	r1, #129	; 0x81
 800743e:	4813      	ldr	r0, [pc, #76]	; (800748c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007440:	f000 fd0d 	bl	8007e5e <USBD_GetEpDesc>
 8007444:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	2210      	movs	r2, #16
 8007450:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d006      	beq.n	8007466 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	2200      	movs	r2, #0
 800745c:	711a      	strb	r2, [r3, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f042 0202 	orr.w	r2, r2, #2
 8007464:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d006      	beq.n	800747a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	711a      	strb	r2, [r3, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	f042 0202 	orr.w	r2, r2, #2
 8007478:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2243      	movs	r2, #67	; 0x43
 800747e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007480:	4b02      	ldr	r3, [pc, #8]	; (800748c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007482:	4618      	mov	r0, r3
 8007484:	3718      	adds	r7, #24
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	20000050 	.word	0x20000050

08007490 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007498:	2182      	movs	r1, #130	; 0x82
 800749a:	4818      	ldr	r0, [pc, #96]	; (80074fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800749c:	f000 fcdf 	bl	8007e5e <USBD_GetEpDesc>
 80074a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074a2:	2101      	movs	r1, #1
 80074a4:	4815      	ldr	r0, [pc, #84]	; (80074fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074a6:	f000 fcda 	bl	8007e5e <USBD_GetEpDesc>
 80074aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074ac:	2181      	movs	r1, #129	; 0x81
 80074ae:	4813      	ldr	r0, [pc, #76]	; (80074fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074b0:	f000 fcd5 	bl	8007e5e <USBD_GetEpDesc>
 80074b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d002      	beq.n	80074c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	2210      	movs	r2, #16
 80074c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d006      	beq.n	80074d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074d0:	711a      	strb	r2, [r3, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d006      	beq.n	80074ea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074e4:	711a      	strb	r2, [r3, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2243      	movs	r2, #67	; 0x43
 80074ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80074f0:	4b02      	ldr	r3, [pc, #8]	; (80074fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3718      	adds	r7, #24
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	20000050 	.word	0x20000050

08007500 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	220a      	movs	r2, #10
 800750c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800750e:	4b03      	ldr	r3, [pc, #12]	; (800751c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007510:	4618      	mov	r0, r3
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	2000000c 	.word	0x2000000c

08007520 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d101      	bne.n	8007534 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007530:	2303      	movs	r3, #3
 8007532:	e009      	b.n	8007548 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	33b0      	adds	r3, #176	; 0xb0
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007554:	b480      	push	{r7}
 8007556:	b087      	sub	sp, #28
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	32b0      	adds	r2, #176	; 0xb0
 800756a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d101      	bne.n	800757a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007576:	2303      	movs	r3, #3
 8007578:	e008      	b.n	800758c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	371c      	adds	r7, #28
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	32b0      	adds	r2, #176	; 0xb0
 80075ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d101      	bne.n	80075bc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e004      	b.n	80075c6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
	...

080075d4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	32b0      	adds	r2, #176	; 0xb0
 80075e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80075ec:	2301      	movs	r3, #1
 80075ee:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	32b0      	adds	r2, #176	; 0xb0
 80075fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007602:	2303      	movs	r3, #3
 8007604:	e025      	b.n	8007652 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800760c:	2b00      	cmp	r3, #0
 800760e:	d11f      	bne.n	8007650 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2201      	movs	r2, #1
 8007614:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007618:	4b10      	ldr	r3, [pc, #64]	; (800765c <USBD_CDC_TransmitPacket+0x88>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	f003 020f 	and.w	r2, r3, #15
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	4613      	mov	r3, r2
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	4413      	add	r3, r2
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4403      	add	r3, r0
 8007632:	3318      	adds	r3, #24
 8007634:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007636:	4b09      	ldr	r3, [pc, #36]	; (800765c <USBD_CDC_TransmitPacket+0x88>)
 8007638:	7819      	ldrb	r1, [r3, #0]
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f001 ffc9 	bl	80095de <USBD_LL_Transmit>

    ret = USBD_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007650:	7bfb      	ldrb	r3, [r7, #15]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	20000093 	.word	0x20000093

08007660 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	32b0      	adds	r2, #176	; 0xb0
 8007672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007676:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	32b0      	adds	r2, #176	; 0xb0
 8007682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800768a:	2303      	movs	r3, #3
 800768c:	e018      	b.n	80076c0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	7c1b      	ldrb	r3, [r3, #16]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10a      	bne.n	80076ac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007696:	4b0c      	ldr	r3, [pc, #48]	; (80076c8 <USBD_CDC_ReceivePacket+0x68>)
 8007698:	7819      	ldrb	r1, [r3, #0]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f001 ffbb 	bl	8009620 <USBD_LL_PrepareReceive>
 80076aa:	e008      	b.n	80076be <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076ac:	4b06      	ldr	r3, [pc, #24]	; (80076c8 <USBD_CDC_ReceivePacket+0x68>)
 80076ae:	7819      	ldrb	r1, [r3, #0]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076b6:	2340      	movs	r3, #64	; 0x40
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f001 ffb1 	bl	8009620 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	20000094 	.word	0x20000094

080076cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	4613      	mov	r3, r2
 80076d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e01f      	b.n	8007724 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d003      	beq.n	800770a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	68ba      	ldr	r2, [r7, #8]
 8007706:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	79fa      	ldrb	r2, [r7, #7]
 8007716:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f001 fe2b 	bl	8009374 <USBD_LL_Init>
 800771e:	4603      	mov	r3, r0
 8007720:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007722:	7dfb      	ldrb	r3, [r7, #23]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3718      	adds	r7, #24
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007736:	2300      	movs	r3, #0
 8007738:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007740:	2303      	movs	r3, #3
 8007742:	e025      	b.n	8007790 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	32ae      	adds	r2, #174	; 0xae
 8007756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800775a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00f      	beq.n	8007780 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	32ae      	adds	r2, #174	; 0xae
 800776a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007770:	f107 020e 	add.w	r2, r7, #14
 8007774:	4610      	mov	r0, r2
 8007776:	4798      	blx	r3
 8007778:	4602      	mov	r2, r0
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f001 fe33 	bl	800940c <USBD_LL_Start>
 80077a6:	4603      	mov	r3, r0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80077b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b084      	sub	sp, #16
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	460b      	mov	r3, r1
 80077d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d009      	beq.n	80077f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	78fa      	ldrb	r2, [r7, #3]
 80077ea:	4611      	mov	r1, r2
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	4798      	blx	r3
 80077f0:	4603      	mov	r3, r0
 80077f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b084      	sub	sp, #16
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	460b      	mov	r3, r1
 8007808:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800780a:	2300      	movs	r3, #0
 800780c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	78fa      	ldrb	r2, [r7, #3]
 8007818:	4611      	mov	r1, r2
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	4798      	blx	r3
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d001      	beq.n	8007828 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007824:	2303      	movs	r3, #3
 8007826:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007828:	7bfb      	ldrb	r3, [r7, #15]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007842:	6839      	ldr	r1, [r7, #0]
 8007844:	4618      	mov	r0, r3
 8007846:	f001 f908 	bl	8008a5a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007858:	461a      	mov	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007866:	f003 031f 	and.w	r3, r3, #31
 800786a:	2b02      	cmp	r3, #2
 800786c:	d01a      	beq.n	80078a4 <USBD_LL_SetupStage+0x72>
 800786e:	2b02      	cmp	r3, #2
 8007870:	d822      	bhi.n	80078b8 <USBD_LL_SetupStage+0x86>
 8007872:	2b00      	cmp	r3, #0
 8007874:	d002      	beq.n	800787c <USBD_LL_SetupStage+0x4a>
 8007876:	2b01      	cmp	r3, #1
 8007878:	d00a      	beq.n	8007890 <USBD_LL_SetupStage+0x5e>
 800787a:	e01d      	b.n	80078b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007882:	4619      	mov	r1, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fb5f 	bl	8007f48 <USBD_StdDevReq>
 800788a:	4603      	mov	r3, r0
 800788c:	73fb      	strb	r3, [r7, #15]
      break;
 800788e:	e020      	b.n	80078d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007896:	4619      	mov	r1, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fbc7 	bl	800802c <USBD_StdItfReq>
 800789e:	4603      	mov	r3, r0
 80078a0:	73fb      	strb	r3, [r7, #15]
      break;
 80078a2:	e016      	b.n	80078d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078aa:	4619      	mov	r1, r3
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fc29 	bl	8008104 <USBD_StdEPReq>
 80078b2:	4603      	mov	r3, r0
 80078b4:	73fb      	strb	r3, [r7, #15]
      break;
 80078b6:	e00c      	b.n	80078d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80078be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f001 fe00 	bl	80094cc <USBD_LL_StallEP>
 80078cc:	4603      	mov	r3, r0
 80078ce:	73fb      	strb	r3, [r7, #15]
      break;
 80078d0:	bf00      	nop
  }

  return ret;
 80078d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	460b      	mov	r3, r1
 80078e6:	607a      	str	r2, [r7, #4]
 80078e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80078ee:	7afb      	ldrb	r3, [r7, #11]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d16e      	bne.n	80079d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80078fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007902:	2b03      	cmp	r3, #3
 8007904:	f040 8098 	bne.w	8007a38 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	689a      	ldr	r2, [r3, #8]
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	429a      	cmp	r2, r3
 8007912:	d913      	bls.n	800793c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	689a      	ldr	r2, [r3, #8]
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	1ad2      	subs	r2, r2, r3
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	68da      	ldr	r2, [r3, #12]
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	4293      	cmp	r3, r2
 800792c:	bf28      	it	cs
 800792e:	4613      	movcs	r3, r2
 8007930:	461a      	mov	r2, r3
 8007932:	6879      	ldr	r1, [r7, #4]
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f001 f984 	bl	8008c42 <USBD_CtlContinueRx>
 800793a:	e07d      	b.n	8007a38 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007942:	f003 031f 	and.w	r3, r3, #31
 8007946:	2b02      	cmp	r3, #2
 8007948:	d014      	beq.n	8007974 <USBD_LL_DataOutStage+0x98>
 800794a:	2b02      	cmp	r3, #2
 800794c:	d81d      	bhi.n	800798a <USBD_LL_DataOutStage+0xae>
 800794e:	2b00      	cmp	r3, #0
 8007950:	d002      	beq.n	8007958 <USBD_LL_DataOutStage+0x7c>
 8007952:	2b01      	cmp	r3, #1
 8007954:	d003      	beq.n	800795e <USBD_LL_DataOutStage+0x82>
 8007956:	e018      	b.n	800798a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007958:	2300      	movs	r3, #0
 800795a:	75bb      	strb	r3, [r7, #22]
            break;
 800795c:	e018      	b.n	8007990 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007964:	b2db      	uxtb	r3, r3
 8007966:	4619      	mov	r1, r3
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f000 fa5e 	bl	8007e2a <USBD_CoreFindIF>
 800796e:	4603      	mov	r3, r0
 8007970:	75bb      	strb	r3, [r7, #22]
            break;
 8007972:	e00d      	b.n	8007990 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800797a:	b2db      	uxtb	r3, r3
 800797c:	4619      	mov	r1, r3
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f000 fa60 	bl	8007e44 <USBD_CoreFindEP>
 8007984:	4603      	mov	r3, r0
 8007986:	75bb      	strb	r3, [r7, #22]
            break;
 8007988:	e002      	b.n	8007990 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800798a:	2300      	movs	r3, #0
 800798c:	75bb      	strb	r3, [r7, #22]
            break;
 800798e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007990:	7dbb      	ldrb	r3, [r7, #22]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d119      	bne.n	80079ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b03      	cmp	r3, #3
 80079a0:	d113      	bne.n	80079ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80079a2:	7dba      	ldrb	r2, [r7, #22]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	32ae      	adds	r2, #174	; 0xae
 80079a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00b      	beq.n	80079ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80079b2:	7dba      	ldrb	r2, [r7, #22]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80079ba:	7dba      	ldrb	r2, [r7, #22]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	32ae      	adds	r2, #174	; 0xae
 80079c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80079ca:	68f8      	ldr	r0, [r7, #12]
 80079cc:	f001 f94a 	bl	8008c64 <USBD_CtlSendStatus>
 80079d0:	e032      	b.n	8007a38 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80079d2:	7afb      	ldrb	r3, [r7, #11]
 80079d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	4619      	mov	r1, r3
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 fa31 	bl	8007e44 <USBD_CoreFindEP>
 80079e2:	4603      	mov	r3, r0
 80079e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079e6:	7dbb      	ldrb	r3, [r7, #22]
 80079e8:	2bff      	cmp	r3, #255	; 0xff
 80079ea:	d025      	beq.n	8007a38 <USBD_LL_DataOutStage+0x15c>
 80079ec:	7dbb      	ldrb	r3, [r7, #22]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d122      	bne.n	8007a38 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b03      	cmp	r3, #3
 80079fc:	d117      	bne.n	8007a2e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80079fe:	7dba      	ldrb	r2, [r7, #22]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	32ae      	adds	r2, #174	; 0xae
 8007a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00f      	beq.n	8007a2e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007a0e:	7dba      	ldrb	r2, [r7, #22]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007a16:	7dba      	ldrb	r2, [r7, #22]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	32ae      	adds	r2, #174	; 0xae
 8007a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	7afa      	ldrb	r2, [r7, #11]
 8007a24:	4611      	mov	r1, r2
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	4798      	blx	r3
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007a2e:	7dfb      	ldrb	r3, [r7, #23]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d001      	beq.n	8007a38 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007a34:	7dfb      	ldrb	r3, [r7, #23]
 8007a36:	e000      	b.n	8007a3a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3718      	adds	r7, #24
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b086      	sub	sp, #24
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	60f8      	str	r0, [r7, #12]
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	607a      	str	r2, [r7, #4]
 8007a4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007a50:	7afb      	ldrb	r3, [r7, #11]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d16f      	bne.n	8007b36 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	3314      	adds	r3, #20
 8007a5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d15a      	bne.n	8007b1c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	689a      	ldr	r2, [r3, #8]
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d914      	bls.n	8007a9c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	689a      	ldr	r2, [r3, #8]
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	1ad2      	subs	r2, r2, r3
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	461a      	mov	r2, r3
 8007a86:	6879      	ldr	r1, [r7, #4]
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f001 f8ac 	bl	8008be6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a8e:	2300      	movs	r3, #0
 8007a90:	2200      	movs	r2, #0
 8007a92:	2100      	movs	r1, #0
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f001 fdc3 	bl	8009620 <USBD_LL_PrepareReceive>
 8007a9a:	e03f      	b.n	8007b1c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	68da      	ldr	r2, [r3, #12]
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d11c      	bne.n	8007ae2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d316      	bcc.n	8007ae2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	685a      	ldr	r2, [r3, #4]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d20f      	bcs.n	8007ae2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f001 f88d 	bl	8008be6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	2100      	movs	r1, #0
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f001 fda0 	bl	8009620 <USBD_LL_PrepareReceive>
 8007ae0:	e01c      	b.n	8007b1c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b03      	cmp	r3, #3
 8007aec:	d10f      	bne.n	8007b0e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d009      	beq.n	8007b0e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b0e:	2180      	movs	r1, #128	; 0x80
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f001 fcdb 	bl	80094cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f001 f8b7 	bl	8008c8a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d03a      	beq.n	8007b9c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f7ff fe42 	bl	80077b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007b34:	e032      	b.n	8007b9c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007b36:	7afb      	ldrb	r3, [r7, #11]
 8007b38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	4619      	mov	r1, r3
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 f97f 	bl	8007e44 <USBD_CoreFindEP>
 8007b46:	4603      	mov	r3, r0
 8007b48:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b4a:	7dfb      	ldrb	r3, [r7, #23]
 8007b4c:	2bff      	cmp	r3, #255	; 0xff
 8007b4e:	d025      	beq.n	8007b9c <USBD_LL_DataInStage+0x15a>
 8007b50:	7dfb      	ldrb	r3, [r7, #23]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d122      	bne.n	8007b9c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b03      	cmp	r3, #3
 8007b60:	d11c      	bne.n	8007b9c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007b62:	7dfa      	ldrb	r2, [r7, #23]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	32ae      	adds	r2, #174	; 0xae
 8007b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d014      	beq.n	8007b9c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007b72:	7dfa      	ldrb	r2, [r7, #23]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007b7a:	7dfa      	ldrb	r2, [r7, #23]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	32ae      	adds	r2, #174	; 0xae
 8007b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	7afa      	ldrb	r2, [r7, #11]
 8007b88:	4611      	mov	r1, r2
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	4798      	blx	r3
 8007b8e:	4603      	mov	r3, r0
 8007b90:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007b92:	7dbb      	ldrb	r3, [r7, #22]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d001      	beq.n	8007b9c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007b98:	7dbb      	ldrb	r3, [r7, #22]
 8007b9a:	e000      	b.n	8007b9e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3718      	adds	r7, #24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d014      	beq.n	8007c0c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00e      	beq.n	8007c0c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	6852      	ldr	r2, [r2, #4]
 8007bfa:	b2d2      	uxtb	r2, r2
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	4798      	blx	r3
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c0c:	2340      	movs	r3, #64	; 0x40
 8007c0e:	2200      	movs	r2, #0
 8007c10:	2100      	movs	r1, #0
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f001 fc15 	bl	8009442 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2240      	movs	r2, #64	; 0x40
 8007c24:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c28:	2340      	movs	r3, #64	; 0x40
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	2180      	movs	r1, #128	; 0x80
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f001 fc07 	bl	8009442 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2240      	movs	r2, #64	; 0x40
 8007c3e:	621a      	str	r2, [r3, #32]

  return ret;
 8007c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b083      	sub	sp, #12
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	460b      	mov	r3, r1
 8007c54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	78fa      	ldrb	r2, [r7, #3]
 8007c5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b083      	sub	sp, #12
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c78:	b2da      	uxtb	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2204      	movs	r2, #4
 8007c84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b083      	sub	sp, #12
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b04      	cmp	r3, #4
 8007ca8:	d106      	bne.n	8007cb8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007cb0:	b2da      	uxtb	r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	370c      	adds	r7, #12
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b03      	cmp	r3, #3
 8007cd8:	d110      	bne.n	8007cfc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00b      	beq.n	8007cfc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cea:	69db      	ldr	r3, [r3, #28]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d005      	beq.n	8007cfc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b082      	sub	sp, #8
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	460b      	mov	r3, r1
 8007d10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	32ae      	adds	r2, #174	; 0xae
 8007d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d101      	bne.n	8007d28 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e01c      	b.n	8007d62 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	2b03      	cmp	r3, #3
 8007d32:	d115      	bne.n	8007d60 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	32ae      	adds	r2, #174	; 0xae
 8007d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00b      	beq.n	8007d60 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	32ae      	adds	r2, #174	; 0xae
 8007d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d56:	6a1b      	ldr	r3, [r3, #32]
 8007d58:	78fa      	ldrb	r2, [r7, #3]
 8007d5a:	4611      	mov	r1, r2
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b082      	sub	sp, #8
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	460b      	mov	r3, r1
 8007d74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	32ae      	adds	r2, #174	; 0xae
 8007d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d101      	bne.n	8007d8c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e01c      	b.n	8007dc6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	2b03      	cmp	r3, #3
 8007d96:	d115      	bne.n	8007dc4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	32ae      	adds	r2, #174	; 0xae
 8007da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00b      	beq.n	8007dc4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	32ae      	adds	r2, #174	; 0xae
 8007db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbc:	78fa      	ldrb	r2, [r7, #3]
 8007dbe:	4611      	mov	r1, r2
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b083      	sub	sp, #12
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007dec:	2300      	movs	r3, #0
 8007dee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00e      	beq.n	8007e20 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	6852      	ldr	r2, [r2, #4]
 8007e0e:	b2d2      	uxtb	r2, r2
 8007e10:	4611      	mov	r1, r2
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	4798      	blx	r3
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d001      	beq.n	8007e20 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b083      	sub	sp, #12
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	460b      	mov	r3, r1
 8007e34:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007e36:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007e50:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	370c      	adds	r7, #12
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b086      	sub	sp, #24
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	460b      	mov	r3, r1
 8007e68:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007e72:	2300      	movs	r3, #0
 8007e74:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	885b      	ldrh	r3, [r3, #2]
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d920      	bls.n	8007ec8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007e8e:	e013      	b.n	8007eb8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007e90:	f107 030a 	add.w	r3, r7, #10
 8007e94:	4619      	mov	r1, r3
 8007e96:	6978      	ldr	r0, [r7, #20]
 8007e98:	f000 f81b 	bl	8007ed2 <USBD_GetNextDesc>
 8007e9c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	785b      	ldrb	r3, [r3, #1]
 8007ea2:	2b05      	cmp	r3, #5
 8007ea4:	d108      	bne.n	8007eb8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	789b      	ldrb	r3, [r3, #2]
 8007eae:	78fa      	ldrb	r2, [r7, #3]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d008      	beq.n	8007ec6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	885b      	ldrh	r3, [r3, #2]
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	897b      	ldrh	r3, [r7, #10]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d8e5      	bhi.n	8007e90 <USBD_GetEpDesc+0x32>
 8007ec4:	e000      	b.n	8007ec8 <USBD_GetEpDesc+0x6a>
          break;
 8007ec6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007ec8:	693b      	ldr	r3, [r7, #16]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3718      	adds	r7, #24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b085      	sub	sp, #20
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
 8007eda:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	881a      	ldrh	r2, [r3, #0]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	4413      	add	r3, r2
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4413      	add	r3, r2
 8007efc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007efe:	68fb      	ldr	r3, [r7, #12]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b087      	sub	sp, #28
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	3301      	adds	r3, #1
 8007f22:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007f2a:	8a3b      	ldrh	r3, [r7, #16]
 8007f2c:	021b      	lsls	r3, r3, #8
 8007f2e:	b21a      	sxth	r2, r3
 8007f30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	b21b      	sxth	r3, r3
 8007f38:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007f3a:	89fb      	ldrh	r3, [r7, #14]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	371c      	adds	r7, #28
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f5e:	2b40      	cmp	r3, #64	; 0x40
 8007f60:	d005      	beq.n	8007f6e <USBD_StdDevReq+0x26>
 8007f62:	2b40      	cmp	r3, #64	; 0x40
 8007f64:	d857      	bhi.n	8008016 <USBD_StdDevReq+0xce>
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00f      	beq.n	8007f8a <USBD_StdDevReq+0x42>
 8007f6a:	2b20      	cmp	r3, #32
 8007f6c:	d153      	bne.n	8008016 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	32ae      	adds	r2, #174	; 0xae
 8007f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	6839      	ldr	r1, [r7, #0]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	4798      	blx	r3
 8007f84:	4603      	mov	r3, r0
 8007f86:	73fb      	strb	r3, [r7, #15]
      break;
 8007f88:	e04a      	b.n	8008020 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	785b      	ldrb	r3, [r3, #1]
 8007f8e:	2b09      	cmp	r3, #9
 8007f90:	d83b      	bhi.n	800800a <USBD_StdDevReq+0xc2>
 8007f92:	a201      	add	r2, pc, #4	; (adr r2, 8007f98 <USBD_StdDevReq+0x50>)
 8007f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f98:	08007fed 	.word	0x08007fed
 8007f9c:	08008001 	.word	0x08008001
 8007fa0:	0800800b 	.word	0x0800800b
 8007fa4:	08007ff7 	.word	0x08007ff7
 8007fa8:	0800800b 	.word	0x0800800b
 8007fac:	08007fcb 	.word	0x08007fcb
 8007fb0:	08007fc1 	.word	0x08007fc1
 8007fb4:	0800800b 	.word	0x0800800b
 8007fb8:	08007fe3 	.word	0x08007fe3
 8007fbc:	08007fd5 	.word	0x08007fd5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fa3c 	bl	8008440 <USBD_GetDescriptor>
          break;
 8007fc8:	e024      	b.n	8008014 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fba1 	bl	8008714 <USBD_SetAddress>
          break;
 8007fd2:	e01f      	b.n	8008014 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fbe0 	bl	800879c <USBD_SetConfig>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	73fb      	strb	r3, [r7, #15]
          break;
 8007fe0:	e018      	b.n	8008014 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007fe2:	6839      	ldr	r1, [r7, #0]
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 fc83 	bl	80088f0 <USBD_GetConfig>
          break;
 8007fea:	e013      	b.n	8008014 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fcb4 	bl	800895c <USBD_GetStatus>
          break;
 8007ff4:	e00e      	b.n	8008014 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fce3 	bl	80089c4 <USBD_SetFeature>
          break;
 8007ffe:	e009      	b.n	8008014 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fd07 	bl	8008a16 <USBD_ClrFeature>
          break;
 8008008:	e004      	b.n	8008014 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fd5e 	bl	8008ace <USBD_CtlError>
          break;
 8008012:	bf00      	nop
      }
      break;
 8008014:	e004      	b.n	8008020 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 fd58 	bl	8008ace <USBD_CtlError>
      break;
 800801e:	bf00      	nop
  }

  return ret;
 8008020:	7bfb      	ldrb	r3, [r7, #15]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop

0800802c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008036:	2300      	movs	r3, #0
 8008038:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008042:	2b40      	cmp	r3, #64	; 0x40
 8008044:	d005      	beq.n	8008052 <USBD_StdItfReq+0x26>
 8008046:	2b40      	cmp	r3, #64	; 0x40
 8008048:	d852      	bhi.n	80080f0 <USBD_StdItfReq+0xc4>
 800804a:	2b00      	cmp	r3, #0
 800804c:	d001      	beq.n	8008052 <USBD_StdItfReq+0x26>
 800804e:	2b20      	cmp	r3, #32
 8008050:	d14e      	bne.n	80080f0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008058:	b2db      	uxtb	r3, r3
 800805a:	3b01      	subs	r3, #1
 800805c:	2b02      	cmp	r3, #2
 800805e:	d840      	bhi.n	80080e2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	889b      	ldrh	r3, [r3, #4]
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b01      	cmp	r3, #1
 8008068:	d836      	bhi.n	80080d8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	889b      	ldrh	r3, [r3, #4]
 800806e:	b2db      	uxtb	r3, r3
 8008070:	4619      	mov	r1, r3
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7ff fed9 	bl	8007e2a <USBD_CoreFindIF>
 8008078:	4603      	mov	r3, r0
 800807a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800807c:	7bbb      	ldrb	r3, [r7, #14]
 800807e:	2bff      	cmp	r3, #255	; 0xff
 8008080:	d01d      	beq.n	80080be <USBD_StdItfReq+0x92>
 8008082:	7bbb      	ldrb	r3, [r7, #14]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d11a      	bne.n	80080be <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008088:	7bba      	ldrb	r2, [r7, #14]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	32ae      	adds	r2, #174	; 0xae
 800808e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00f      	beq.n	80080b8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008098:	7bba      	ldrb	r2, [r7, #14]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80080a0:	7bba      	ldrb	r2, [r7, #14]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	32ae      	adds	r2, #174	; 0xae
 80080a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	6839      	ldr	r1, [r7, #0]
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	4798      	blx	r3
 80080b2:	4603      	mov	r3, r0
 80080b4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80080b6:	e004      	b.n	80080c2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80080b8:	2303      	movs	r3, #3
 80080ba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80080bc:	e001      	b.n	80080c2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80080be:	2303      	movs	r3, #3
 80080c0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	88db      	ldrh	r3, [r3, #6]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d110      	bne.n	80080ec <USBD_StdItfReq+0xc0>
 80080ca:	7bfb      	ldrb	r3, [r7, #15]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10d      	bne.n	80080ec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fdc7 	bl	8008c64 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80080d6:	e009      	b.n	80080ec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fcf7 	bl	8008ace <USBD_CtlError>
          break;
 80080e0:	e004      	b.n	80080ec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fcf2 	bl	8008ace <USBD_CtlError>
          break;
 80080ea:	e000      	b.n	80080ee <USBD_StdItfReq+0xc2>
          break;
 80080ec:	bf00      	nop
      }
      break;
 80080ee:	e004      	b.n	80080fa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fceb 	bl	8008ace <USBD_CtlError>
      break;
 80080f8:	bf00      	nop
  }

  return ret;
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	889b      	ldrh	r3, [r3, #4]
 8008116:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008120:	2b40      	cmp	r3, #64	; 0x40
 8008122:	d007      	beq.n	8008134 <USBD_StdEPReq+0x30>
 8008124:	2b40      	cmp	r3, #64	; 0x40
 8008126:	f200 817f 	bhi.w	8008428 <USBD_StdEPReq+0x324>
 800812a:	2b00      	cmp	r3, #0
 800812c:	d02a      	beq.n	8008184 <USBD_StdEPReq+0x80>
 800812e:	2b20      	cmp	r3, #32
 8008130:	f040 817a 	bne.w	8008428 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008134:	7bbb      	ldrb	r3, [r7, #14]
 8008136:	4619      	mov	r1, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f7ff fe83 	bl	8007e44 <USBD_CoreFindEP>
 800813e:	4603      	mov	r3, r0
 8008140:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008142:	7b7b      	ldrb	r3, [r7, #13]
 8008144:	2bff      	cmp	r3, #255	; 0xff
 8008146:	f000 8174 	beq.w	8008432 <USBD_StdEPReq+0x32e>
 800814a:	7b7b      	ldrb	r3, [r7, #13]
 800814c:	2b00      	cmp	r3, #0
 800814e:	f040 8170 	bne.w	8008432 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008152:	7b7a      	ldrb	r2, [r7, #13]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800815a:	7b7a      	ldrb	r2, [r7, #13]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	32ae      	adds	r2, #174	; 0xae
 8008160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	2b00      	cmp	r3, #0
 8008168:	f000 8163 	beq.w	8008432 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800816c:	7b7a      	ldrb	r2, [r7, #13]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	32ae      	adds	r2, #174	; 0xae
 8008172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	4798      	blx	r3
 800817e:	4603      	mov	r3, r0
 8008180:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008182:	e156      	b.n	8008432 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	785b      	ldrb	r3, [r3, #1]
 8008188:	2b03      	cmp	r3, #3
 800818a:	d008      	beq.n	800819e <USBD_StdEPReq+0x9a>
 800818c:	2b03      	cmp	r3, #3
 800818e:	f300 8145 	bgt.w	800841c <USBD_StdEPReq+0x318>
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 809b 	beq.w	80082ce <USBD_StdEPReq+0x1ca>
 8008198:	2b01      	cmp	r3, #1
 800819a:	d03c      	beq.n	8008216 <USBD_StdEPReq+0x112>
 800819c:	e13e      	b.n	800841c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d002      	beq.n	80081b0 <USBD_StdEPReq+0xac>
 80081aa:	2b03      	cmp	r3, #3
 80081ac:	d016      	beq.n	80081dc <USBD_StdEPReq+0xd8>
 80081ae:	e02c      	b.n	800820a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081b0:	7bbb      	ldrb	r3, [r7, #14]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00d      	beq.n	80081d2 <USBD_StdEPReq+0xce>
 80081b6:	7bbb      	ldrb	r3, [r7, #14]
 80081b8:	2b80      	cmp	r3, #128	; 0x80
 80081ba:	d00a      	beq.n	80081d2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80081bc:	7bbb      	ldrb	r3, [r7, #14]
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f001 f983 	bl	80094cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80081c6:	2180      	movs	r1, #128	; 0x80
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f001 f97f 	bl	80094cc <USBD_LL_StallEP>
 80081ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081d0:	e020      	b.n	8008214 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80081d2:	6839      	ldr	r1, [r7, #0]
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fc7a 	bl	8008ace <USBD_CtlError>
              break;
 80081da:	e01b      	b.n	8008214 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	885b      	ldrh	r3, [r3, #2]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d10e      	bne.n	8008202 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80081e4:	7bbb      	ldrb	r3, [r7, #14]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00b      	beq.n	8008202 <USBD_StdEPReq+0xfe>
 80081ea:	7bbb      	ldrb	r3, [r7, #14]
 80081ec:	2b80      	cmp	r3, #128	; 0x80
 80081ee:	d008      	beq.n	8008202 <USBD_StdEPReq+0xfe>
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	88db      	ldrh	r3, [r3, #6]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d104      	bne.n	8008202 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80081f8:	7bbb      	ldrb	r3, [r7, #14]
 80081fa:	4619      	mov	r1, r3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f001 f965 	bl	80094cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fd2e 	bl	8008c64 <USBD_CtlSendStatus>

              break;
 8008208:	e004      	b.n	8008214 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800820a:	6839      	ldr	r1, [r7, #0]
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 fc5e 	bl	8008ace <USBD_CtlError>
              break;
 8008212:	bf00      	nop
          }
          break;
 8008214:	e107      	b.n	8008426 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b02      	cmp	r3, #2
 8008220:	d002      	beq.n	8008228 <USBD_StdEPReq+0x124>
 8008222:	2b03      	cmp	r3, #3
 8008224:	d016      	beq.n	8008254 <USBD_StdEPReq+0x150>
 8008226:	e04b      	b.n	80082c0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008228:	7bbb      	ldrb	r3, [r7, #14]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00d      	beq.n	800824a <USBD_StdEPReq+0x146>
 800822e:	7bbb      	ldrb	r3, [r7, #14]
 8008230:	2b80      	cmp	r3, #128	; 0x80
 8008232:	d00a      	beq.n	800824a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008234:	7bbb      	ldrb	r3, [r7, #14]
 8008236:	4619      	mov	r1, r3
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f001 f947 	bl	80094cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800823e:	2180      	movs	r1, #128	; 0x80
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f001 f943 	bl	80094cc <USBD_LL_StallEP>
 8008246:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008248:	e040      	b.n	80082cc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800824a:	6839      	ldr	r1, [r7, #0]
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fc3e 	bl	8008ace <USBD_CtlError>
              break;
 8008252:	e03b      	b.n	80082cc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	885b      	ldrh	r3, [r3, #2]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d136      	bne.n	80082ca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800825c:	7bbb      	ldrb	r3, [r7, #14]
 800825e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008262:	2b00      	cmp	r3, #0
 8008264:	d004      	beq.n	8008270 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008266:	7bbb      	ldrb	r3, [r7, #14]
 8008268:	4619      	mov	r1, r3
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f001 f94d 	bl	800950a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fcf7 	bl	8008c64 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008276:	7bbb      	ldrb	r3, [r7, #14]
 8008278:	4619      	mov	r1, r3
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7ff fde2 	bl	8007e44 <USBD_CoreFindEP>
 8008280:	4603      	mov	r3, r0
 8008282:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008284:	7b7b      	ldrb	r3, [r7, #13]
 8008286:	2bff      	cmp	r3, #255	; 0xff
 8008288:	d01f      	beq.n	80082ca <USBD_StdEPReq+0x1c6>
 800828a:	7b7b      	ldrb	r3, [r7, #13]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d11c      	bne.n	80082ca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008290:	7b7a      	ldrb	r2, [r7, #13]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008298:	7b7a      	ldrb	r2, [r7, #13]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	32ae      	adds	r2, #174	; 0xae
 800829e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d010      	beq.n	80082ca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80082a8:	7b7a      	ldrb	r2, [r7, #13]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	32ae      	adds	r2, #174	; 0xae
 80082ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	4798      	blx	r3
 80082ba:	4603      	mov	r3, r0
 80082bc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80082be:	e004      	b.n	80082ca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fc03 	bl	8008ace <USBD_CtlError>
              break;
 80082c8:	e000      	b.n	80082cc <USBD_StdEPReq+0x1c8>
              break;
 80082ca:	bf00      	nop
          }
          break;
 80082cc:	e0ab      	b.n	8008426 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	d002      	beq.n	80082e0 <USBD_StdEPReq+0x1dc>
 80082da:	2b03      	cmp	r3, #3
 80082dc:	d032      	beq.n	8008344 <USBD_StdEPReq+0x240>
 80082de:	e097      	b.n	8008410 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d007      	beq.n	80082f6 <USBD_StdEPReq+0x1f2>
 80082e6:	7bbb      	ldrb	r3, [r7, #14]
 80082e8:	2b80      	cmp	r3, #128	; 0x80
 80082ea:	d004      	beq.n	80082f6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80082ec:	6839      	ldr	r1, [r7, #0]
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fbed 	bl	8008ace <USBD_CtlError>
                break;
 80082f4:	e091      	b.n	800841a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	da0b      	bge.n	8008316 <USBD_StdEPReq+0x212>
 80082fe:	7bbb      	ldrb	r3, [r7, #14]
 8008300:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008304:	4613      	mov	r3, r2
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4413      	add	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	3310      	adds	r3, #16
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	4413      	add	r3, r2
 8008312:	3304      	adds	r3, #4
 8008314:	e00b      	b.n	800832e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008316:	7bbb      	ldrb	r3, [r7, #14]
 8008318:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800831c:	4613      	mov	r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	4413      	add	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	4413      	add	r3, r2
 800832c:	3304      	adds	r3, #4
 800832e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	2200      	movs	r2, #0
 8008334:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	2202      	movs	r2, #2
 800833a:	4619      	mov	r1, r3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 fc37 	bl	8008bb0 <USBD_CtlSendData>
              break;
 8008342:	e06a      	b.n	800841a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008344:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008348:	2b00      	cmp	r3, #0
 800834a:	da11      	bge.n	8008370 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800834c:	7bbb      	ldrb	r3, [r7, #14]
 800834e:	f003 020f 	and.w	r2, r3, #15
 8008352:	6879      	ldr	r1, [r7, #4]
 8008354:	4613      	mov	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	4413      	add	r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	440b      	add	r3, r1
 800835e:	3324      	adds	r3, #36	; 0x24
 8008360:	881b      	ldrh	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d117      	bne.n	8008396 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fbb0 	bl	8008ace <USBD_CtlError>
                  break;
 800836e:	e054      	b.n	800841a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008370:	7bbb      	ldrb	r3, [r7, #14]
 8008372:	f003 020f 	and.w	r2, r3, #15
 8008376:	6879      	ldr	r1, [r7, #4]
 8008378:	4613      	mov	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4413      	add	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	440b      	add	r3, r1
 8008382:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008386:	881b      	ldrh	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d104      	bne.n	8008396 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800838c:	6839      	ldr	r1, [r7, #0]
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fb9d 	bl	8008ace <USBD_CtlError>
                  break;
 8008394:	e041      	b.n	800841a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008396:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800839a:	2b00      	cmp	r3, #0
 800839c:	da0b      	bge.n	80083b6 <USBD_StdEPReq+0x2b2>
 800839e:	7bbb      	ldrb	r3, [r7, #14]
 80083a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083a4:	4613      	mov	r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4413      	add	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	3310      	adds	r3, #16
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	4413      	add	r3, r2
 80083b2:	3304      	adds	r3, #4
 80083b4:	e00b      	b.n	80083ce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083b6:	7bbb      	ldrb	r3, [r7, #14]
 80083b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083bc:	4613      	mov	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	4413      	add	r3, r2
 80083cc:	3304      	adds	r3, #4
 80083ce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80083d0:	7bbb      	ldrb	r3, [r7, #14]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d002      	beq.n	80083dc <USBD_StdEPReq+0x2d8>
 80083d6:	7bbb      	ldrb	r3, [r7, #14]
 80083d8:	2b80      	cmp	r3, #128	; 0x80
 80083da:	d103      	bne.n	80083e4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	2200      	movs	r2, #0
 80083e0:	601a      	str	r2, [r3, #0]
 80083e2:	e00e      	b.n	8008402 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80083e4:	7bbb      	ldrb	r3, [r7, #14]
 80083e6:	4619      	mov	r1, r3
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f001 f8ad 	bl	8009548 <USBD_LL_IsStallEP>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d003      	beq.n	80083fc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2201      	movs	r2, #1
 80083f8:	601a      	str	r2, [r3, #0]
 80083fa:	e002      	b.n	8008402 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	2200      	movs	r2, #0
 8008400:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	2202      	movs	r2, #2
 8008406:	4619      	mov	r1, r3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fbd1 	bl	8008bb0 <USBD_CtlSendData>
              break;
 800840e:	e004      	b.n	800841a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fb5b 	bl	8008ace <USBD_CtlError>
              break;
 8008418:	bf00      	nop
          }
          break;
 800841a:	e004      	b.n	8008426 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800841c:	6839      	ldr	r1, [r7, #0]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fb55 	bl	8008ace <USBD_CtlError>
          break;
 8008424:	bf00      	nop
      }
      break;
 8008426:	e005      	b.n	8008434 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008428:	6839      	ldr	r1, [r7, #0]
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fb4f 	bl	8008ace <USBD_CtlError>
      break;
 8008430:	e000      	b.n	8008434 <USBD_StdEPReq+0x330>
      break;
 8008432:	bf00      	nop
  }

  return ret;
 8008434:	7bfb      	ldrb	r3, [r7, #15]
}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
	...

08008440 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800844a:	2300      	movs	r3, #0
 800844c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800844e:	2300      	movs	r3, #0
 8008450:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008452:	2300      	movs	r3, #0
 8008454:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	885b      	ldrh	r3, [r3, #2]
 800845a:	0a1b      	lsrs	r3, r3, #8
 800845c:	b29b      	uxth	r3, r3
 800845e:	3b01      	subs	r3, #1
 8008460:	2b06      	cmp	r3, #6
 8008462:	f200 8128 	bhi.w	80086b6 <USBD_GetDescriptor+0x276>
 8008466:	a201      	add	r2, pc, #4	; (adr r2, 800846c <USBD_GetDescriptor+0x2c>)
 8008468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846c:	08008489 	.word	0x08008489
 8008470:	080084a1 	.word	0x080084a1
 8008474:	080084e1 	.word	0x080084e1
 8008478:	080086b7 	.word	0x080086b7
 800847c:	080086b7 	.word	0x080086b7
 8008480:	08008657 	.word	0x08008657
 8008484:	08008683 	.word	0x08008683
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	7c12      	ldrb	r2, [r2, #16]
 8008494:	f107 0108 	add.w	r1, r7, #8
 8008498:	4610      	mov	r0, r2
 800849a:	4798      	blx	r3
 800849c:	60f8      	str	r0, [r7, #12]
      break;
 800849e:	e112      	b.n	80086c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	7c1b      	ldrb	r3, [r3, #16]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10d      	bne.n	80084c4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b0:	f107 0208 	add.w	r2, r7, #8
 80084b4:	4610      	mov	r0, r2
 80084b6:	4798      	blx	r3
 80084b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	3301      	adds	r3, #1
 80084be:	2202      	movs	r2, #2
 80084c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80084c2:	e100      	b.n	80086c6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084cc:	f107 0208 	add.w	r2, r7, #8
 80084d0:	4610      	mov	r0, r2
 80084d2:	4798      	blx	r3
 80084d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	3301      	adds	r3, #1
 80084da:	2202      	movs	r2, #2
 80084dc:	701a      	strb	r2, [r3, #0]
      break;
 80084de:	e0f2      	b.n	80086c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	885b      	ldrh	r3, [r3, #2]
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b05      	cmp	r3, #5
 80084e8:	f200 80ac 	bhi.w	8008644 <USBD_GetDescriptor+0x204>
 80084ec:	a201      	add	r2, pc, #4	; (adr r2, 80084f4 <USBD_GetDescriptor+0xb4>)
 80084ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f2:	bf00      	nop
 80084f4:	0800850d 	.word	0x0800850d
 80084f8:	08008541 	.word	0x08008541
 80084fc:	08008575 	.word	0x08008575
 8008500:	080085a9 	.word	0x080085a9
 8008504:	080085dd 	.word	0x080085dd
 8008508:	08008611 	.word	0x08008611
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00b      	beq.n	8008530 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	7c12      	ldrb	r2, [r2, #16]
 8008524:	f107 0108 	add.w	r1, r7, #8
 8008528:	4610      	mov	r0, r2
 800852a:	4798      	blx	r3
 800852c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800852e:	e091      	b.n	8008654 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 facb 	bl	8008ace <USBD_CtlError>
            err++;
 8008538:	7afb      	ldrb	r3, [r7, #11]
 800853a:	3301      	adds	r3, #1
 800853c:	72fb      	strb	r3, [r7, #11]
          break;
 800853e:	e089      	b.n	8008654 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00b      	beq.n	8008564 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	7c12      	ldrb	r2, [r2, #16]
 8008558:	f107 0108 	add.w	r1, r7, #8
 800855c:	4610      	mov	r0, r2
 800855e:	4798      	blx	r3
 8008560:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008562:	e077      	b.n	8008654 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fab1 	bl	8008ace <USBD_CtlError>
            err++;
 800856c:	7afb      	ldrb	r3, [r7, #11]
 800856e:	3301      	adds	r3, #1
 8008570:	72fb      	strb	r3, [r7, #11]
          break;
 8008572:	e06f      	b.n	8008654 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00b      	beq.n	8008598 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	7c12      	ldrb	r2, [r2, #16]
 800858c:	f107 0108 	add.w	r1, r7, #8
 8008590:	4610      	mov	r0, r2
 8008592:	4798      	blx	r3
 8008594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008596:	e05d      	b.n	8008654 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 fa97 	bl	8008ace <USBD_CtlError>
            err++;
 80085a0:	7afb      	ldrb	r3, [r7, #11]
 80085a2:	3301      	adds	r3, #1
 80085a4:	72fb      	strb	r3, [r7, #11]
          break;
 80085a6:	e055      	b.n	8008654 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00b      	beq.n	80085cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	7c12      	ldrb	r2, [r2, #16]
 80085c0:	f107 0108 	add.w	r1, r7, #8
 80085c4:	4610      	mov	r0, r2
 80085c6:	4798      	blx	r3
 80085c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085ca:	e043      	b.n	8008654 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fa7d 	bl	8008ace <USBD_CtlError>
            err++;
 80085d4:	7afb      	ldrb	r3, [r7, #11]
 80085d6:	3301      	adds	r3, #1
 80085d8:	72fb      	strb	r3, [r7, #11]
          break;
 80085da:	e03b      	b.n	8008654 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e2:	695b      	ldr	r3, [r3, #20]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00b      	beq.n	8008600 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	7c12      	ldrb	r2, [r2, #16]
 80085f4:	f107 0108 	add.w	r1, r7, #8
 80085f8:	4610      	mov	r0, r2
 80085fa:	4798      	blx	r3
 80085fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085fe:	e029      	b.n	8008654 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fa63 	bl	8008ace <USBD_CtlError>
            err++;
 8008608:	7afb      	ldrb	r3, [r7, #11]
 800860a:	3301      	adds	r3, #1
 800860c:	72fb      	strb	r3, [r7, #11]
          break;
 800860e:	e021      	b.n	8008654 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00b      	beq.n	8008634 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	7c12      	ldrb	r2, [r2, #16]
 8008628:	f107 0108 	add.w	r1, r7, #8
 800862c:	4610      	mov	r0, r2
 800862e:	4798      	blx	r3
 8008630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008632:	e00f      	b.n	8008654 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fa49 	bl	8008ace <USBD_CtlError>
            err++;
 800863c:	7afb      	ldrb	r3, [r7, #11]
 800863e:	3301      	adds	r3, #1
 8008640:	72fb      	strb	r3, [r7, #11]
          break;
 8008642:	e007      	b.n	8008654 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fa41 	bl	8008ace <USBD_CtlError>
          err++;
 800864c:	7afb      	ldrb	r3, [r7, #11]
 800864e:	3301      	adds	r3, #1
 8008650:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008652:	bf00      	nop
      }
      break;
 8008654:	e037      	b.n	80086c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	7c1b      	ldrb	r3, [r3, #16]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d109      	bne.n	8008672 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008666:	f107 0208 	add.w	r2, r7, #8
 800866a:	4610      	mov	r0, r2
 800866c:	4798      	blx	r3
 800866e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008670:	e029      	b.n	80086c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fa2a 	bl	8008ace <USBD_CtlError>
        err++;
 800867a:	7afb      	ldrb	r3, [r7, #11]
 800867c:	3301      	adds	r3, #1
 800867e:	72fb      	strb	r3, [r7, #11]
      break;
 8008680:	e021      	b.n	80086c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	7c1b      	ldrb	r3, [r3, #16]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10d      	bne.n	80086a6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008692:	f107 0208 	add.w	r2, r7, #8
 8008696:	4610      	mov	r0, r2
 8008698:	4798      	blx	r3
 800869a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	3301      	adds	r3, #1
 80086a0:	2207      	movs	r2, #7
 80086a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086a4:	e00f      	b.n	80086c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086a6:	6839      	ldr	r1, [r7, #0]
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fa10 	bl	8008ace <USBD_CtlError>
        err++;
 80086ae:	7afb      	ldrb	r3, [r7, #11]
 80086b0:	3301      	adds	r3, #1
 80086b2:	72fb      	strb	r3, [r7, #11]
      break;
 80086b4:	e007      	b.n	80086c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80086b6:	6839      	ldr	r1, [r7, #0]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fa08 	bl	8008ace <USBD_CtlError>
      err++;
 80086be:	7afb      	ldrb	r3, [r7, #11]
 80086c0:	3301      	adds	r3, #1
 80086c2:	72fb      	strb	r3, [r7, #11]
      break;
 80086c4:	bf00      	nop
  }

  if (err != 0U)
 80086c6:	7afb      	ldrb	r3, [r7, #11]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d11e      	bne.n	800870a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	88db      	ldrh	r3, [r3, #6]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d016      	beq.n	8008702 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80086d4:	893b      	ldrh	r3, [r7, #8]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00e      	beq.n	80086f8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	88da      	ldrh	r2, [r3, #6]
 80086de:	893b      	ldrh	r3, [r7, #8]
 80086e0:	4293      	cmp	r3, r2
 80086e2:	bf28      	it	cs
 80086e4:	4613      	movcs	r3, r2
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80086ea:	893b      	ldrh	r3, [r7, #8]
 80086ec:	461a      	mov	r2, r3
 80086ee:	68f9      	ldr	r1, [r7, #12]
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 fa5d 	bl	8008bb0 <USBD_CtlSendData>
 80086f6:	e009      	b.n	800870c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f9e7 	bl	8008ace <USBD_CtlError>
 8008700:	e004      	b.n	800870c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 faae 	bl	8008c64 <USBD_CtlSendStatus>
 8008708:	e000      	b.n	800870c <USBD_GetDescriptor+0x2cc>
    return;
 800870a:	bf00      	nop
  }
}
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop

08008714 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	889b      	ldrh	r3, [r3, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d131      	bne.n	800878a <USBD_SetAddress+0x76>
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	88db      	ldrh	r3, [r3, #6]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d12d      	bne.n	800878a <USBD_SetAddress+0x76>
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	885b      	ldrh	r3, [r3, #2]
 8008732:	2b7f      	cmp	r3, #127	; 0x7f
 8008734:	d829      	bhi.n	800878a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	885b      	ldrh	r3, [r3, #2]
 800873a:	b2db      	uxtb	r3, r3
 800873c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008740:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008748:	b2db      	uxtb	r3, r3
 800874a:	2b03      	cmp	r3, #3
 800874c:	d104      	bne.n	8008758 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f9bc 	bl	8008ace <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008756:	e01d      	b.n	8008794 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	7bfa      	ldrb	r2, [r7, #15]
 800875c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008760:	7bfb      	ldrb	r3, [r7, #15]
 8008762:	4619      	mov	r1, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 ff1b 	bl	80095a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fa7a 	bl	8008c64 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008770:	7bfb      	ldrb	r3, [r7, #15]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d004      	beq.n	8008780 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2202      	movs	r2, #2
 800877a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800877e:	e009      	b.n	8008794 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008788:	e004      	b.n	8008794 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 f99e 	bl	8008ace <USBD_CtlError>
  }
}
 8008792:	bf00      	nop
 8008794:	bf00      	nop
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	885b      	ldrh	r3, [r3, #2]
 80087ae:	b2da      	uxtb	r2, r3
 80087b0:	4b4e      	ldr	r3, [pc, #312]	; (80088ec <USBD_SetConfig+0x150>)
 80087b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80087b4:	4b4d      	ldr	r3, [pc, #308]	; (80088ec <USBD_SetConfig+0x150>)
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d905      	bls.n	80087c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f985 	bl	8008ace <USBD_CtlError>
    return USBD_FAIL;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e08c      	b.n	80088e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d002      	beq.n	80087da <USBD_SetConfig+0x3e>
 80087d4:	2b03      	cmp	r3, #3
 80087d6:	d029      	beq.n	800882c <USBD_SetConfig+0x90>
 80087d8:	e075      	b.n	80088c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80087da:	4b44      	ldr	r3, [pc, #272]	; (80088ec <USBD_SetConfig+0x150>)
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d020      	beq.n	8008824 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80087e2:	4b42      	ldr	r3, [pc, #264]	; (80088ec <USBD_SetConfig+0x150>)
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	461a      	mov	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80087ec:	4b3f      	ldr	r3, [pc, #252]	; (80088ec <USBD_SetConfig+0x150>)
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	4619      	mov	r1, r3
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7fe ffe7 	bl	80077c6 <USBD_SetClassConfig>
 80087f8:	4603      	mov	r3, r0
 80087fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d008      	beq.n	8008814 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f962 	bl	8008ace <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2202      	movs	r2, #2
 800880e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008812:	e065      	b.n	80088e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fa25 	bl	8008c64 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2203      	movs	r2, #3
 800881e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008822:	e05d      	b.n	80088e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fa1d 	bl	8008c64 <USBD_CtlSendStatus>
      break;
 800882a:	e059      	b.n	80088e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800882c:	4b2f      	ldr	r3, [pc, #188]	; (80088ec <USBD_SetConfig+0x150>)
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d112      	bne.n	800885a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2202      	movs	r2, #2
 8008838:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800883c:	4b2b      	ldr	r3, [pc, #172]	; (80088ec <USBD_SetConfig+0x150>)
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	461a      	mov	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008846:	4b29      	ldr	r3, [pc, #164]	; (80088ec <USBD_SetConfig+0x150>)
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f7fe ffd6 	bl	80077fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fa06 	bl	8008c64 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008858:	e042      	b.n	80088e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800885a:	4b24      	ldr	r3, [pc, #144]	; (80088ec <USBD_SetConfig+0x150>)
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	429a      	cmp	r2, r3
 8008866:	d02a      	beq.n	80088be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	b2db      	uxtb	r3, r3
 800886e:	4619      	mov	r1, r3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7fe ffc4 	bl	80077fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008876:	4b1d      	ldr	r3, [pc, #116]	; (80088ec <USBD_SetConfig+0x150>)
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	461a      	mov	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008880:	4b1a      	ldr	r3, [pc, #104]	; (80088ec <USBD_SetConfig+0x150>)
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	4619      	mov	r1, r3
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7fe ff9d 	bl	80077c6 <USBD_SetClassConfig>
 800888c:	4603      	mov	r3, r0
 800888e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008890:	7bfb      	ldrb	r3, [r7, #15]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00f      	beq.n	80088b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008896:	6839      	ldr	r1, [r7, #0]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 f918 	bl	8008ace <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	4619      	mov	r1, r3
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7fe ffa9 	bl	80077fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2202      	movs	r2, #2
 80088b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80088b4:	e014      	b.n	80088e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f9d4 	bl	8008c64 <USBD_CtlSendStatus>
      break;
 80088bc:	e010      	b.n	80088e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f9d0 	bl	8008c64 <USBD_CtlSendStatus>
      break;
 80088c4:	e00c      	b.n	80088e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f900 	bl	8008ace <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088ce:	4b07      	ldr	r3, [pc, #28]	; (80088ec <USBD_SetConfig+0x150>)
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	4619      	mov	r1, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7fe ff92 	bl	80077fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80088da:	2303      	movs	r3, #3
 80088dc:	73fb      	strb	r3, [r7, #15]
      break;
 80088de:	bf00      	nop
  }

  return ret;
 80088e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	20000420 	.word	0x20000420

080088f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	88db      	ldrh	r3, [r3, #6]
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d004      	beq.n	800890c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008902:	6839      	ldr	r1, [r7, #0]
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f8e2 	bl	8008ace <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800890a:	e023      	b.n	8008954 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008912:	b2db      	uxtb	r3, r3
 8008914:	2b02      	cmp	r3, #2
 8008916:	dc02      	bgt.n	800891e <USBD_GetConfig+0x2e>
 8008918:	2b00      	cmp	r3, #0
 800891a:	dc03      	bgt.n	8008924 <USBD_GetConfig+0x34>
 800891c:	e015      	b.n	800894a <USBD_GetConfig+0x5a>
 800891e:	2b03      	cmp	r3, #3
 8008920:	d00b      	beq.n	800893a <USBD_GetConfig+0x4a>
 8008922:	e012      	b.n	800894a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	3308      	adds	r3, #8
 800892e:	2201      	movs	r2, #1
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f93c 	bl	8008bb0 <USBD_CtlSendData>
        break;
 8008938:	e00c      	b.n	8008954 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	3304      	adds	r3, #4
 800893e:	2201      	movs	r2, #1
 8008940:	4619      	mov	r1, r3
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f934 	bl	8008bb0 <USBD_CtlSendData>
        break;
 8008948:	e004      	b.n	8008954 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f8be 	bl	8008ace <USBD_CtlError>
        break;
 8008952:	bf00      	nop
}
 8008954:	bf00      	nop
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800896c:	b2db      	uxtb	r3, r3
 800896e:	3b01      	subs	r3, #1
 8008970:	2b02      	cmp	r3, #2
 8008972:	d81e      	bhi.n	80089b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	88db      	ldrh	r3, [r3, #6]
 8008978:	2b02      	cmp	r3, #2
 800897a:	d004      	beq.n	8008986 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f8a5 	bl	8008ace <USBD_CtlError>
        break;
 8008984:	e01a      	b.n	80089bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2201      	movs	r2, #1
 800898a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008992:	2b00      	cmp	r3, #0
 8008994:	d005      	beq.n	80089a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	f043 0202 	orr.w	r2, r3, #2
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	330c      	adds	r3, #12
 80089a6:	2202      	movs	r2, #2
 80089a8:	4619      	mov	r1, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f900 	bl	8008bb0 <USBD_CtlSendData>
      break;
 80089b0:	e004      	b.n	80089bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80089b2:	6839      	ldr	r1, [r7, #0]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f88a 	bl	8008ace <USBD_CtlError>
      break;
 80089ba:	bf00      	nop
  }
}
 80089bc:	bf00      	nop
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	885b      	ldrh	r3, [r3, #2]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d107      	bne.n	80089e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2201      	movs	r2, #1
 80089da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f940 	bl	8008c64 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80089e4:	e013      	b.n	8008a0e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	885b      	ldrh	r3, [r3, #2]
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d10b      	bne.n	8008a06 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	889b      	ldrh	r3, [r3, #4]
 80089f2:	0a1b      	lsrs	r3, r3, #8
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f930 	bl	8008c64 <USBD_CtlSendStatus>
}
 8008a04:	e003      	b.n	8008a0e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008a06:	6839      	ldr	r1, [r7, #0]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 f860 	bl	8008ace <USBD_CtlError>
}
 8008a0e:	bf00      	nop
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b082      	sub	sp, #8
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d80b      	bhi.n	8008a46 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	885b      	ldrh	r3, [r3, #2]
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d10c      	bne.n	8008a50 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 f910 	bl	8008c64 <USBD_CtlSendStatus>
      }
      break;
 8008a44:	e004      	b.n	8008a50 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008a46:	6839      	ldr	r1, [r7, #0]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 f840 	bl	8008ace <USBD_CtlError>
      break;
 8008a4e:	e000      	b.n	8008a52 <USBD_ClrFeature+0x3c>
      break;
 8008a50:	bf00      	nop
  }
}
 8008a52:	bf00      	nop
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b084      	sub	sp, #16
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	781a      	ldrb	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	3301      	adds	r3, #1
 8008a74:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	781a      	ldrb	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	3301      	adds	r3, #1
 8008a82:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f7ff fa41 	bl	8007f0c <SWAPBYTE>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	3301      	adds	r3, #1
 8008a96:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f7ff fa34 	bl	8007f0c <SWAPBYTE>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f7ff fa27 	bl	8007f0c <SWAPBYTE>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	80da      	strh	r2, [r3, #6]
}
 8008ac6:	bf00      	nop
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b082      	sub	sp, #8
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
 8008ad6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ad8:	2180      	movs	r1, #128	; 0x80
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fcf6 	bl	80094cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fcf2 	bl	80094cc <USBD_LL_StallEP>
}
 8008ae8:	bf00      	nop
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b086      	sub	sp, #24
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008afc:	2300      	movs	r3, #0
 8008afe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d036      	beq.n	8008b74 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008b0a:	6938      	ldr	r0, [r7, #16]
 8008b0c:	f000 f836 	bl	8008b7c <USBD_GetLen>
 8008b10:	4603      	mov	r3, r0
 8008b12:	3301      	adds	r3, #1
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	005b      	lsls	r3, r3, #1
 8008b18:	b29a      	uxth	r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008b1e:	7dfb      	ldrb	r3, [r7, #23]
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	4413      	add	r3, r2
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	7812      	ldrb	r2, [r2, #0]
 8008b28:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b2a:	7dfb      	ldrb	r3, [r7, #23]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008b30:	7dfb      	ldrb	r3, [r7, #23]
 8008b32:	68ba      	ldr	r2, [r7, #8]
 8008b34:	4413      	add	r3, r2
 8008b36:	2203      	movs	r2, #3
 8008b38:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b3a:	7dfb      	ldrb	r3, [r7, #23]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008b40:	e013      	b.n	8008b6a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008b42:	7dfb      	ldrb	r3, [r7, #23]
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	4413      	add	r3, r2
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	7812      	ldrb	r2, [r2, #0]
 8008b4c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	3301      	adds	r3, #1
 8008b52:	613b      	str	r3, [r7, #16]
    idx++;
 8008b54:	7dfb      	ldrb	r3, [r7, #23]
 8008b56:	3301      	adds	r3, #1
 8008b58:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008b5a:	7dfb      	ldrb	r3, [r7, #23]
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	4413      	add	r3, r2
 8008b60:	2200      	movs	r2, #0
 8008b62:	701a      	strb	r2, [r3, #0]
    idx++;
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
 8008b66:	3301      	adds	r3, #1
 8008b68:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1e7      	bne.n	8008b42 <USBD_GetString+0x52>
 8008b72:	e000      	b.n	8008b76 <USBD_GetString+0x86>
    return;
 8008b74:	bf00      	nop
  }
}
 8008b76:	3718      	adds	r7, #24
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008b84:	2300      	movs	r3, #0
 8008b86:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008b8c:	e005      	b.n	8008b9a <USBD_GetLen+0x1e>
  {
    len++;
 8008b8e:	7bfb      	ldrb	r3, [r7, #15]
 8008b90:	3301      	adds	r3, #1
 8008b92:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	3301      	adds	r3, #1
 8008b98:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1f5      	bne.n	8008b8e <USBD_GetLen+0x12>
  }

  return len;
 8008ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2202      	movs	r2, #2
 8008bc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f000 fd01 	bl	80095de <USBD_LL_Transmit>

  return USBD_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b084      	sub	sp, #16
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	60f8      	str	r0, [r7, #12]
 8008bee:	60b9      	str	r1, [r7, #8]
 8008bf0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	2100      	movs	r1, #0
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f000 fcf0 	bl	80095de <USBD_LL_Transmit>

  return USBD_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2203      	movs	r2, #3
 8008c18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	2100      	movs	r1, #0
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f000 fcf4 	bl	8009620 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b084      	sub	sp, #16
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	60f8      	str	r0, [r7, #12]
 8008c4a:	60b9      	str	r1, [r7, #8]
 8008c4c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	68ba      	ldr	r2, [r7, #8]
 8008c52:	2100      	movs	r1, #0
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	f000 fce3 	bl	8009620 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3710      	adds	r7, #16
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2204      	movs	r2, #4
 8008c70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c74:	2300      	movs	r3, #0
 8008c76:	2200      	movs	r2, #0
 8008c78:	2100      	movs	r1, #0
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fcaf 	bl	80095de <USBD_LL_Transmit>

  return USBD_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b082      	sub	sp, #8
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2205      	movs	r2, #5
 8008c96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 fcbd 	bl	8009620 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3708      	adds	r7, #8
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	4912      	ldr	r1, [pc, #72]	; (8008d00 <MX_USB_DEVICE_Init+0x50>)
 8008cb8:	4812      	ldr	r0, [pc, #72]	; (8008d04 <MX_USB_DEVICE_Init+0x54>)
 8008cba:	f7fe fd07 	bl	80076cc <USBD_Init>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d001      	beq.n	8008cc8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008cc4:	f7f8 fcde 	bl	8001684 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008cc8:	490f      	ldr	r1, [pc, #60]	; (8008d08 <MX_USB_DEVICE_Init+0x58>)
 8008cca:	480e      	ldr	r0, [pc, #56]	; (8008d04 <MX_USB_DEVICE_Init+0x54>)
 8008ccc:	f7fe fd2e 	bl	800772c <USBD_RegisterClass>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d001      	beq.n	8008cda <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008cd6:	f7f8 fcd5 	bl	8001684 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008cda:	490c      	ldr	r1, [pc, #48]	; (8008d0c <MX_USB_DEVICE_Init+0x5c>)
 8008cdc:	4809      	ldr	r0, [pc, #36]	; (8008d04 <MX_USB_DEVICE_Init+0x54>)
 8008cde:	f7fe fc1f 	bl	8007520 <USBD_CDC_RegisterInterface>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d001      	beq.n	8008cec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ce8:	f7f8 fccc 	bl	8001684 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008cec:	4805      	ldr	r0, [pc, #20]	; (8008d04 <MX_USB_DEVICE_Init+0x54>)
 8008cee:	f7fe fd53 	bl	8007798 <USBD_Start>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d001      	beq.n	8008cfc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008cf8:	f7f8 fcc4 	bl	8001684 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008cfc:	bf00      	nop
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	200000ac 	.word	0x200000ac
 8008d04:	20000424 	.word	0x20000424
 8008d08:	20000018 	.word	0x20000018
 8008d0c:	20000098 	.word	0x20000098

08008d10 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d14:	2200      	movs	r2, #0
 8008d16:	4905      	ldr	r1, [pc, #20]	; (8008d2c <CDC_Init_FS+0x1c>)
 8008d18:	4805      	ldr	r0, [pc, #20]	; (8008d30 <CDC_Init_FS+0x20>)
 8008d1a:	f7fe fc1b 	bl	8007554 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d1e:	4905      	ldr	r1, [pc, #20]	; (8008d34 <CDC_Init_FS+0x24>)
 8008d20:	4803      	ldr	r0, [pc, #12]	; (8008d30 <CDC_Init_FS+0x20>)
 8008d22:	f7fe fc39 	bl	8007598 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d26:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	20000f00 	.word	0x20000f00
 8008d30:	20000424 	.word	0x20000424
 8008d34:	20000700 	.word	0x20000700

08008d38 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d3c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	4603      	mov	r3, r0
 8008d50:	6039      	str	r1, [r7, #0]
 8008d52:	71fb      	strb	r3, [r7, #7]
 8008d54:	4613      	mov	r3, r2
 8008d56:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d58:	79fb      	ldrb	r3, [r7, #7]
 8008d5a:	2b23      	cmp	r3, #35	; 0x23
 8008d5c:	d84a      	bhi.n	8008df4 <CDC_Control_FS+0xac>
 8008d5e:	a201      	add	r2, pc, #4	; (adr r2, 8008d64 <CDC_Control_FS+0x1c>)
 8008d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d64:	08008df5 	.word	0x08008df5
 8008d68:	08008df5 	.word	0x08008df5
 8008d6c:	08008df5 	.word	0x08008df5
 8008d70:	08008df5 	.word	0x08008df5
 8008d74:	08008df5 	.word	0x08008df5
 8008d78:	08008df5 	.word	0x08008df5
 8008d7c:	08008df5 	.word	0x08008df5
 8008d80:	08008df5 	.word	0x08008df5
 8008d84:	08008df5 	.word	0x08008df5
 8008d88:	08008df5 	.word	0x08008df5
 8008d8c:	08008df5 	.word	0x08008df5
 8008d90:	08008df5 	.word	0x08008df5
 8008d94:	08008df5 	.word	0x08008df5
 8008d98:	08008df5 	.word	0x08008df5
 8008d9c:	08008df5 	.word	0x08008df5
 8008da0:	08008df5 	.word	0x08008df5
 8008da4:	08008df5 	.word	0x08008df5
 8008da8:	08008df5 	.word	0x08008df5
 8008dac:	08008df5 	.word	0x08008df5
 8008db0:	08008df5 	.word	0x08008df5
 8008db4:	08008df5 	.word	0x08008df5
 8008db8:	08008df5 	.word	0x08008df5
 8008dbc:	08008df5 	.word	0x08008df5
 8008dc0:	08008df5 	.word	0x08008df5
 8008dc4:	08008df5 	.word	0x08008df5
 8008dc8:	08008df5 	.word	0x08008df5
 8008dcc:	08008df5 	.word	0x08008df5
 8008dd0:	08008df5 	.word	0x08008df5
 8008dd4:	08008df5 	.word	0x08008df5
 8008dd8:	08008df5 	.word	0x08008df5
 8008ddc:	08008df5 	.word	0x08008df5
 8008de0:	08008df5 	.word	0x08008df5
 8008de4:	08008df5 	.word	0x08008df5
 8008de8:	08008df5 	.word	0x08008df5
 8008dec:	08008df5 	.word	0x08008df5
 8008df0:	08008df5 	.word	0x08008df5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008df4:	bf00      	nop
  }

  return (USBD_OK);
 8008df6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 /* USER CODE BEGIN 6 */
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008e0e:	6879      	ldr	r1, [r7, #4]
 8008e10:	480f      	ldr	r0, [pc, #60]	; (8008e50 <CDC_Receive_FS+0x4c>)
 8008e12:	f7fe fbc1 	bl	8007598 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008e16:	480e      	ldr	r0, [pc, #56]	; (8008e50 <CDC_Receive_FS+0x4c>)
 8008e18:	f7fe fc22 	bl	8007660 <USBD_CDC_ReceivePacket>
	  memset (buffer, '\0', 3);  // clearing the buffer
 8008e1c:	2203      	movs	r2, #3
 8008e1e:	2100      	movs	r1, #0
 8008e20:	480c      	ldr	r0, [pc, #48]	; (8008e54 <CDC_Receive_FS+0x50>)
 8008e22:	f000 fcb1 	bl	8009788 <memset>
	  uint8_t len = (uint8_t)*Len;
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	73fb      	strb	r3, [r7, #15]
	  memcpy(buffer, Buf, len);  // copying the value that we sent
 8008e2c:	7bfb      	ldrb	r3, [r7, #15]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	6879      	ldr	r1, [r7, #4]
 8008e32:	4808      	ldr	r0, [pc, #32]	; (8008e54 <CDC_Receive_FS+0x50>)
 8008e34:	f000 fc9a 	bl	800976c <memcpy>
	  memset(Buf, '\0', len); //clearing
 8008e38:	7bfb      	ldrb	r3, [r7, #15]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fca2 	bl	8009788 <memset>
	  return (USBD_OK);
 8008e44:	2300      	movs	r3, #0
	  /* USER CODE END 6 */
  /* USER CODE END 6 */
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	20000424 	.word	0x20000424
 8008e54:	200002f4 	.word	0x200002f4

08008e58 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	460b      	mov	r3, r1
 8008e62:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008e68:	4b0d      	ldr	r3, [pc, #52]	; (8008ea0 <CDC_Transmit_FS+0x48>)
 8008e6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e6e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d001      	beq.n	8008e7e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e00b      	b.n	8008e96 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008e7e:	887b      	ldrh	r3, [r7, #2]
 8008e80:	461a      	mov	r2, r3
 8008e82:	6879      	ldr	r1, [r7, #4]
 8008e84:	4806      	ldr	r0, [pc, #24]	; (8008ea0 <CDC_Transmit_FS+0x48>)
 8008e86:	f7fe fb65 	bl	8007554 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008e8a:	4805      	ldr	r0, [pc, #20]	; (8008ea0 <CDC_Transmit_FS+0x48>)
 8008e8c:	f7fe fba2 	bl	80075d4 <USBD_CDC_TransmitPacket>
 8008e90:	4603      	mov	r3, r0
 8008e92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	20000424 	.word	0x20000424

08008ea4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b087      	sub	sp, #28
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	4613      	mov	r3, r2
 8008eb0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008eb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	371c      	adds	r7, #28
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
	...

08008ec8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	4603      	mov	r3, r0
 8008ed0:	6039      	str	r1, [r7, #0]
 8008ed2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	2212      	movs	r2, #18
 8008ed8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008eda:	4b03      	ldr	r3, [pc, #12]	; (8008ee8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	200000c8 	.word	0x200000c8

08008eec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	6039      	str	r1, [r7, #0]
 8008ef6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	2204      	movs	r2, #4
 8008efc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008efe:	4b03      	ldr	r3, [pc, #12]	; (8008f0c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	200000dc 	.word	0x200000dc

08008f10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	4603      	mov	r3, r0
 8008f18:	6039      	str	r1, [r7, #0]
 8008f1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f1c:	79fb      	ldrb	r3, [r7, #7]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d105      	bne.n	8008f2e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f22:	683a      	ldr	r2, [r7, #0]
 8008f24:	4907      	ldr	r1, [pc, #28]	; (8008f44 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f26:	4808      	ldr	r0, [pc, #32]	; (8008f48 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f28:	f7ff fde2 	bl	8008af0 <USBD_GetString>
 8008f2c:	e004      	b.n	8008f38 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f2e:	683a      	ldr	r2, [r7, #0]
 8008f30:	4904      	ldr	r1, [pc, #16]	; (8008f44 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f32:	4805      	ldr	r0, [pc, #20]	; (8008f48 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f34:	f7ff fddc 	bl	8008af0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f38:	4b02      	ldr	r3, [pc, #8]	; (8008f44 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	20001700 	.word	0x20001700
 8008f48:	0800c548 	.word	0x0800c548

08008f4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	4603      	mov	r3, r0
 8008f54:	6039      	str	r1, [r7, #0]
 8008f56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f58:	683a      	ldr	r2, [r7, #0]
 8008f5a:	4904      	ldr	r1, [pc, #16]	; (8008f6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008f5c:	4804      	ldr	r0, [pc, #16]	; (8008f70 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008f5e:	f7ff fdc7 	bl	8008af0 <USBD_GetString>
  return USBD_StrDesc;
 8008f62:	4b02      	ldr	r3, [pc, #8]	; (8008f6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3708      	adds	r7, #8
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	20001700 	.word	0x20001700
 8008f70:	0800c560 	.word	0x0800c560

08008f74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	6039      	str	r1, [r7, #0]
 8008f7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	221a      	movs	r2, #26
 8008f84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008f86:	f000 f843 	bl	8009010 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008f8a:	4b02      	ldr	r3, [pc, #8]	; (8008f94 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	200000e0 	.word	0x200000e0

08008f98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	6039      	str	r1, [r7, #0]
 8008fa2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008fa4:	79fb      	ldrb	r3, [r7, #7]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d105      	bne.n	8008fb6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008faa:	683a      	ldr	r2, [r7, #0]
 8008fac:	4907      	ldr	r1, [pc, #28]	; (8008fcc <USBD_FS_ConfigStrDescriptor+0x34>)
 8008fae:	4808      	ldr	r0, [pc, #32]	; (8008fd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fb0:	f7ff fd9e 	bl	8008af0 <USBD_GetString>
 8008fb4:	e004      	b.n	8008fc0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008fb6:	683a      	ldr	r2, [r7, #0]
 8008fb8:	4904      	ldr	r1, [pc, #16]	; (8008fcc <USBD_FS_ConfigStrDescriptor+0x34>)
 8008fba:	4805      	ldr	r0, [pc, #20]	; (8008fd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fbc:	f7ff fd98 	bl	8008af0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fc0:	4b02      	ldr	r3, [pc, #8]	; (8008fcc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3708      	adds	r7, #8
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	20001700 	.word	0x20001700
 8008fd0:	0800c574 	.word	0x0800c574

08008fd4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	4603      	mov	r3, r0
 8008fdc:	6039      	str	r1, [r7, #0]
 8008fde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fe0:	79fb      	ldrb	r3, [r7, #7]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d105      	bne.n	8008ff2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	4907      	ldr	r1, [pc, #28]	; (8009008 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008fea:	4808      	ldr	r0, [pc, #32]	; (800900c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008fec:	f7ff fd80 	bl	8008af0 <USBD_GetString>
 8008ff0:	e004      	b.n	8008ffc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	4904      	ldr	r1, [pc, #16]	; (8009008 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ff6:	4805      	ldr	r0, [pc, #20]	; (800900c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ff8:	f7ff fd7a 	bl	8008af0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ffc:	4b02      	ldr	r3, [pc, #8]	; (8009008 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	20001700 	.word	0x20001700
 800900c:	0800c580 	.word	0x0800c580

08009010 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009016:	4b0f      	ldr	r3, [pc, #60]	; (8009054 <Get_SerialNum+0x44>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800901c:	4b0e      	ldr	r3, [pc, #56]	; (8009058 <Get_SerialNum+0x48>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009022:	4b0e      	ldr	r3, [pc, #56]	; (800905c <Get_SerialNum+0x4c>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4413      	add	r3, r2
 800902e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d009      	beq.n	800904a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009036:	2208      	movs	r2, #8
 8009038:	4909      	ldr	r1, [pc, #36]	; (8009060 <Get_SerialNum+0x50>)
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f000 f814 	bl	8009068 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009040:	2204      	movs	r2, #4
 8009042:	4908      	ldr	r1, [pc, #32]	; (8009064 <Get_SerialNum+0x54>)
 8009044:	68b8      	ldr	r0, [r7, #8]
 8009046:	f000 f80f 	bl	8009068 <IntToUnicode>
  }
}
 800904a:	bf00      	nop
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	1fff7a10 	.word	0x1fff7a10
 8009058:	1fff7a14 	.word	0x1fff7a14
 800905c:	1fff7a18 	.word	0x1fff7a18
 8009060:	200000e2 	.word	0x200000e2
 8009064:	200000f2 	.word	0x200000f2

08009068 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009068:	b480      	push	{r7}
 800906a:	b087      	sub	sp, #28
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	4613      	mov	r3, r2
 8009074:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009076:	2300      	movs	r3, #0
 8009078:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800907a:	2300      	movs	r3, #0
 800907c:	75fb      	strb	r3, [r7, #23]
 800907e:	e027      	b.n	80090d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	0f1b      	lsrs	r3, r3, #28
 8009084:	2b09      	cmp	r3, #9
 8009086:	d80b      	bhi.n	80090a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	0f1b      	lsrs	r3, r3, #28
 800908c:	b2da      	uxtb	r2, r3
 800908e:	7dfb      	ldrb	r3, [r7, #23]
 8009090:	005b      	lsls	r3, r3, #1
 8009092:	4619      	mov	r1, r3
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	440b      	add	r3, r1
 8009098:	3230      	adds	r2, #48	; 0x30
 800909a:	b2d2      	uxtb	r2, r2
 800909c:	701a      	strb	r2, [r3, #0]
 800909e:	e00a      	b.n	80090b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	0f1b      	lsrs	r3, r3, #28
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	7dfb      	ldrb	r3, [r7, #23]
 80090a8:	005b      	lsls	r3, r3, #1
 80090aa:	4619      	mov	r1, r3
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	440b      	add	r3, r1
 80090b0:	3237      	adds	r2, #55	; 0x37
 80090b2:	b2d2      	uxtb	r2, r2
 80090b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	011b      	lsls	r3, r3, #4
 80090ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80090bc:	7dfb      	ldrb	r3, [r7, #23]
 80090be:	005b      	lsls	r3, r3, #1
 80090c0:	3301      	adds	r3, #1
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	4413      	add	r3, r2
 80090c6:	2200      	movs	r2, #0
 80090c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80090ca:	7dfb      	ldrb	r3, [r7, #23]
 80090cc:	3301      	adds	r3, #1
 80090ce:	75fb      	strb	r3, [r7, #23]
 80090d0:	7dfa      	ldrb	r2, [r7, #23]
 80090d2:	79fb      	ldrb	r3, [r7, #7]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d3d3      	bcc.n	8009080 <IntToUnicode+0x18>
  }
}
 80090d8:	bf00      	nop
 80090da:	bf00      	nop
 80090dc:	371c      	adds	r7, #28
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
	...

080090e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b08a      	sub	sp, #40	; 0x28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090f0:	f107 0314 	add.w	r3, r7, #20
 80090f4:	2200      	movs	r2, #0
 80090f6:	601a      	str	r2, [r3, #0]
 80090f8:	605a      	str	r2, [r3, #4]
 80090fa:	609a      	str	r2, [r3, #8]
 80090fc:	60da      	str	r2, [r3, #12]
 80090fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009108:	d13a      	bne.n	8009180 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800910a:	2300      	movs	r3, #0
 800910c:	613b      	str	r3, [r7, #16]
 800910e:	4b1e      	ldr	r3, [pc, #120]	; (8009188 <HAL_PCD_MspInit+0xa0>)
 8009110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009112:	4a1d      	ldr	r2, [pc, #116]	; (8009188 <HAL_PCD_MspInit+0xa0>)
 8009114:	f043 0301 	orr.w	r3, r3, #1
 8009118:	6313      	str	r3, [r2, #48]	; 0x30
 800911a:	4b1b      	ldr	r3, [pc, #108]	; (8009188 <HAL_PCD_MspInit+0xa0>)
 800911c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800911e:	f003 0301 	and.w	r3, r3, #1
 8009122:	613b      	str	r3, [r7, #16]
 8009124:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009126:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800912a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800912c:	2302      	movs	r3, #2
 800912e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009130:	2300      	movs	r3, #0
 8009132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009134:	2303      	movs	r3, #3
 8009136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009138:	230a      	movs	r3, #10
 800913a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800913c:	f107 0314 	add.w	r3, r7, #20
 8009140:	4619      	mov	r1, r3
 8009142:	4812      	ldr	r0, [pc, #72]	; (800918c <HAL_PCD_MspInit+0xa4>)
 8009144:	f7f9 fa8e 	bl	8002664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009148:	4b0f      	ldr	r3, [pc, #60]	; (8009188 <HAL_PCD_MspInit+0xa0>)
 800914a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800914c:	4a0e      	ldr	r2, [pc, #56]	; (8009188 <HAL_PCD_MspInit+0xa0>)
 800914e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009152:	6353      	str	r3, [r2, #52]	; 0x34
 8009154:	2300      	movs	r3, #0
 8009156:	60fb      	str	r3, [r7, #12]
 8009158:	4b0b      	ldr	r3, [pc, #44]	; (8009188 <HAL_PCD_MspInit+0xa0>)
 800915a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800915c:	4a0a      	ldr	r2, [pc, #40]	; (8009188 <HAL_PCD_MspInit+0xa0>)
 800915e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009162:	6453      	str	r3, [r2, #68]	; 0x44
 8009164:	4b08      	ldr	r3, [pc, #32]	; (8009188 <HAL_PCD_MspInit+0xa0>)
 8009166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800916c:	60fb      	str	r3, [r7, #12]
 800916e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009170:	2200      	movs	r2, #0
 8009172:	2100      	movs	r1, #0
 8009174:	2043      	movs	r0, #67	; 0x43
 8009176:	f7f9 fa3e 	bl	80025f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800917a:	2043      	movs	r0, #67	; 0x43
 800917c:	f7f9 fa57 	bl	800262e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009180:	bf00      	nop
 8009182:	3728      	adds	r7, #40	; 0x28
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	40023800 	.word	0x40023800
 800918c:	40020000 	.word	0x40020000

08009190 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80091a4:	4619      	mov	r1, r3
 80091a6:	4610      	mov	r0, r2
 80091a8:	f7fe fb43 	bl	8007832 <USBD_LL_SetupStage>
}
 80091ac:	bf00      	nop
 80091ae:	3708      	adds	r7, #8
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	460b      	mov	r3, r1
 80091be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80091c6:	78fa      	ldrb	r2, [r7, #3]
 80091c8:	6879      	ldr	r1, [r7, #4]
 80091ca:	4613      	mov	r3, r2
 80091cc:	00db      	lsls	r3, r3, #3
 80091ce:	4413      	add	r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	440b      	add	r3, r1
 80091d4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	78fb      	ldrb	r3, [r7, #3]
 80091dc:	4619      	mov	r1, r3
 80091de:	f7fe fb7d 	bl	80078dc <USBD_LL_DataOutStage>
}
 80091e2:	bf00      	nop
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b082      	sub	sp, #8
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	460b      	mov	r3, r1
 80091f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80091fc:	78fa      	ldrb	r2, [r7, #3]
 80091fe:	6879      	ldr	r1, [r7, #4]
 8009200:	4613      	mov	r3, r2
 8009202:	00db      	lsls	r3, r3, #3
 8009204:	4413      	add	r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	440b      	add	r3, r1
 800920a:	334c      	adds	r3, #76	; 0x4c
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	78fb      	ldrb	r3, [r7, #3]
 8009210:	4619      	mov	r1, r3
 8009212:	f7fe fc16 	bl	8007a42 <USBD_LL_DataInStage>
}
 8009216:	bf00      	nop
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b082      	sub	sp, #8
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800922c:	4618      	mov	r0, r3
 800922e:	f7fe fd4a 	bl	8007cc6 <USBD_LL_SOF>
}
 8009232:	bf00      	nop
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b084      	sub	sp, #16
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009242:	2301      	movs	r3, #1
 8009244:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d102      	bne.n	8009254 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800924e:	2300      	movs	r3, #0
 8009250:	73fb      	strb	r3, [r7, #15]
 8009252:	e008      	b.n	8009266 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	2b02      	cmp	r3, #2
 800925a:	d102      	bne.n	8009262 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800925c:	2301      	movs	r3, #1
 800925e:	73fb      	strb	r3, [r7, #15]
 8009260:	e001      	b.n	8009266 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009262:	f7f8 fa0f 	bl	8001684 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800926c:	7bfa      	ldrb	r2, [r7, #15]
 800926e:	4611      	mov	r1, r2
 8009270:	4618      	mov	r0, r3
 8009272:	f7fe fcea 	bl	8007c4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800927c:	4618      	mov	r0, r3
 800927e:	f7fe fc92 	bl	8007ba6 <USBD_LL_Reset>
}
 8009282:	bf00      	nop
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
	...

0800928c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800929a:	4618      	mov	r0, r3
 800929c:	f7fe fce5 	bl	8007c6a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	6812      	ldr	r2, [r2, #0]
 80092ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80092b2:	f043 0301 	orr.w	r3, r3, #1
 80092b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a1b      	ldr	r3, [r3, #32]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d005      	beq.n	80092cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092c0:	4b04      	ldr	r3, [pc, #16]	; (80092d4 <HAL_PCD_SuspendCallback+0x48>)
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	4a03      	ldr	r2, [pc, #12]	; (80092d4 <HAL_PCD_SuspendCallback+0x48>)
 80092c6:	f043 0306 	orr.w	r3, r3, #6
 80092ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80092cc:	bf00      	nop
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	e000ed00 	.word	0xe000ed00

080092d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fe fcd5 	bl	8007c96 <USBD_LL_Resume>
}
 80092ec:	bf00      	nop
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	460b      	mov	r3, r1
 80092fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009306:	78fa      	ldrb	r2, [r7, #3]
 8009308:	4611      	mov	r1, r2
 800930a:	4618      	mov	r0, r3
 800930c:	f7fe fd2d 	bl	8007d6a <USBD_LL_IsoOUTIncomplete>
}
 8009310:	bf00      	nop
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	460b      	mov	r3, r1
 8009322:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800932a:	78fa      	ldrb	r2, [r7, #3]
 800932c:	4611      	mov	r1, r2
 800932e:	4618      	mov	r0, r3
 8009330:	f7fe fce9 	bl	8007d06 <USBD_LL_IsoINIncomplete>
}
 8009334:	bf00      	nop
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800934a:	4618      	mov	r0, r3
 800934c:	f7fe fd3f 	bl	8007dce <USBD_LL_DevConnected>
}
 8009350:	bf00      	nop
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009366:	4618      	mov	r0, r3
 8009368:	f7fe fd3c 	bl	8007de4 <USBD_LL_DevDisconnected>
}
 800936c:	bf00      	nop
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d13c      	bne.n	80093fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009384:	4a20      	ldr	r2, [pc, #128]	; (8009408 <USBD_LL_Init+0x94>)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a1e      	ldr	r2, [pc, #120]	; (8009408 <USBD_LL_Init+0x94>)
 8009390:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009394:	4b1c      	ldr	r3, [pc, #112]	; (8009408 <USBD_LL_Init+0x94>)
 8009396:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800939a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800939c:	4b1a      	ldr	r3, [pc, #104]	; (8009408 <USBD_LL_Init+0x94>)
 800939e:	2204      	movs	r2, #4
 80093a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80093a2:	4b19      	ldr	r3, [pc, #100]	; (8009408 <USBD_LL_Init+0x94>)
 80093a4:	2202      	movs	r2, #2
 80093a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80093a8:	4b17      	ldr	r3, [pc, #92]	; (8009408 <USBD_LL_Init+0x94>)
 80093aa:	2200      	movs	r2, #0
 80093ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80093ae:	4b16      	ldr	r3, [pc, #88]	; (8009408 <USBD_LL_Init+0x94>)
 80093b0:	2202      	movs	r2, #2
 80093b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80093b4:	4b14      	ldr	r3, [pc, #80]	; (8009408 <USBD_LL_Init+0x94>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80093ba:	4b13      	ldr	r3, [pc, #76]	; (8009408 <USBD_LL_Init+0x94>)
 80093bc:	2200      	movs	r2, #0
 80093be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80093c0:	4b11      	ldr	r3, [pc, #68]	; (8009408 <USBD_LL_Init+0x94>)
 80093c2:	2200      	movs	r2, #0
 80093c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80093c6:	4b10      	ldr	r3, [pc, #64]	; (8009408 <USBD_LL_Init+0x94>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80093cc:	4b0e      	ldr	r3, [pc, #56]	; (8009408 <USBD_LL_Init+0x94>)
 80093ce:	2200      	movs	r2, #0
 80093d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80093d2:	480d      	ldr	r0, [pc, #52]	; (8009408 <USBD_LL_Init+0x94>)
 80093d4:	f7f9 fae2 	bl	800299c <HAL_PCD_Init>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d001      	beq.n	80093e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80093de:	f7f8 f951 	bl	8001684 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80093e2:	2180      	movs	r1, #128	; 0x80
 80093e4:	4808      	ldr	r0, [pc, #32]	; (8009408 <USBD_LL_Init+0x94>)
 80093e6:	f7fa fd3a 	bl	8003e5e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80093ea:	2240      	movs	r2, #64	; 0x40
 80093ec:	2100      	movs	r1, #0
 80093ee:	4806      	ldr	r0, [pc, #24]	; (8009408 <USBD_LL_Init+0x94>)
 80093f0:	f7fa fcee 	bl	8003dd0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80093f4:	2280      	movs	r2, #128	; 0x80
 80093f6:	2101      	movs	r1, #1
 80093f8:	4803      	ldr	r0, [pc, #12]	; (8009408 <USBD_LL_Init+0x94>)
 80093fa:	f7fa fce9 	bl	8003dd0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3708      	adds	r7, #8
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	20001900 	.word	0x20001900

0800940c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009414:	2300      	movs	r3, #0
 8009416:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009422:	4618      	mov	r0, r3
 8009424:	f7f9 fbd7 	bl	8002bd6 <HAL_PCD_Start>
 8009428:	4603      	mov	r3, r0
 800942a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800942c:	7bfb      	ldrb	r3, [r7, #15]
 800942e:	4618      	mov	r0, r3
 8009430:	f000 f942 	bl	80096b8 <USBD_Get_USB_Status>
 8009434:	4603      	mov	r3, r0
 8009436:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009438:	7bbb      	ldrb	r3, [r7, #14]
}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b084      	sub	sp, #16
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
 800944a:	4608      	mov	r0, r1
 800944c:	4611      	mov	r1, r2
 800944e:	461a      	mov	r2, r3
 8009450:	4603      	mov	r3, r0
 8009452:	70fb      	strb	r3, [r7, #3]
 8009454:	460b      	mov	r3, r1
 8009456:	70bb      	strb	r3, [r7, #2]
 8009458:	4613      	mov	r3, r2
 800945a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800945c:	2300      	movs	r3, #0
 800945e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009460:	2300      	movs	r3, #0
 8009462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800946a:	78bb      	ldrb	r3, [r7, #2]
 800946c:	883a      	ldrh	r2, [r7, #0]
 800946e:	78f9      	ldrb	r1, [r7, #3]
 8009470:	f7fa f8a8 	bl	80035c4 <HAL_PCD_EP_Open>
 8009474:	4603      	mov	r3, r0
 8009476:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009478:	7bfb      	ldrb	r3, [r7, #15]
 800947a:	4618      	mov	r0, r3
 800947c:	f000 f91c 	bl	80096b8 <USBD_Get_USB_Status>
 8009480:	4603      	mov	r3, r0
 8009482:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009484:	7bbb      	ldrb	r3, [r7, #14]
}
 8009486:	4618      	mov	r0, r3
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b084      	sub	sp, #16
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
 8009496:	460b      	mov	r3, r1
 8009498:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800949a:	2300      	movs	r3, #0
 800949c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094a8:	78fa      	ldrb	r2, [r7, #3]
 80094aa:	4611      	mov	r1, r2
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7fa f8f1 	bl	8003694 <HAL_PCD_EP_Close>
 80094b2:	4603      	mov	r3, r0
 80094b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094b6:	7bfb      	ldrb	r3, [r7, #15]
 80094b8:	4618      	mov	r0, r3
 80094ba:	f000 f8fd 	bl	80096b8 <USBD_Get_USB_Status>
 80094be:	4603      	mov	r3, r0
 80094c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	460b      	mov	r3, r1
 80094d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094d8:	2300      	movs	r3, #0
 80094da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094dc:	2300      	movs	r3, #0
 80094de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094e6:	78fa      	ldrb	r2, [r7, #3]
 80094e8:	4611      	mov	r1, r2
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fa f9c9 	bl	8003882 <HAL_PCD_EP_SetStall>
 80094f0:	4603      	mov	r3, r0
 80094f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
 80094f6:	4618      	mov	r0, r3
 80094f8:	f000 f8de 	bl	80096b8 <USBD_Get_USB_Status>
 80094fc:	4603      	mov	r3, r0
 80094fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009500:	7bbb      	ldrb	r3, [r7, #14]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b084      	sub	sp, #16
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
 8009512:	460b      	mov	r3, r1
 8009514:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009524:	78fa      	ldrb	r2, [r7, #3]
 8009526:	4611      	mov	r1, r2
 8009528:	4618      	mov	r0, r3
 800952a:	f7fa fa0e 	bl	800394a <HAL_PCD_EP_ClrStall>
 800952e:	4603      	mov	r3, r0
 8009530:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	4618      	mov	r0, r3
 8009536:	f000 f8bf 	bl	80096b8 <USBD_Get_USB_Status>
 800953a:	4603      	mov	r3, r0
 800953c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800953e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3710      	adds	r7, #16
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009548:	b480      	push	{r7}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	460b      	mov	r3, r1
 8009552:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800955a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800955c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009560:	2b00      	cmp	r3, #0
 8009562:	da0b      	bge.n	800957c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009564:	78fb      	ldrb	r3, [r7, #3]
 8009566:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800956a:	68f9      	ldr	r1, [r7, #12]
 800956c:	4613      	mov	r3, r2
 800956e:	00db      	lsls	r3, r3, #3
 8009570:	4413      	add	r3, r2
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	440b      	add	r3, r1
 8009576:	333e      	adds	r3, #62	; 0x3e
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	e00b      	b.n	8009594 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800957c:	78fb      	ldrb	r3, [r7, #3]
 800957e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009582:	68f9      	ldr	r1, [r7, #12]
 8009584:	4613      	mov	r3, r2
 8009586:	00db      	lsls	r3, r3, #3
 8009588:	4413      	add	r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	440b      	add	r3, r1
 800958e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009592:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009594:	4618      	mov	r0, r3
 8009596:	3714      	adds	r7, #20
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	460b      	mov	r3, r1
 80095aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095ac:	2300      	movs	r3, #0
 80095ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095b0:	2300      	movs	r3, #0
 80095b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095ba:	78fa      	ldrb	r2, [r7, #3]
 80095bc:	4611      	mov	r1, r2
 80095be:	4618      	mov	r0, r3
 80095c0:	f7f9 ffdb 	bl	800357a <HAL_PCD_SetAddress>
 80095c4:	4603      	mov	r3, r0
 80095c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 f874 	bl	80096b8 <USBD_Get_USB_Status>
 80095d0:	4603      	mov	r3, r0
 80095d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b086      	sub	sp, #24
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	60f8      	str	r0, [r7, #12]
 80095e6:	607a      	str	r2, [r7, #4]
 80095e8:	603b      	str	r3, [r7, #0]
 80095ea:	460b      	mov	r3, r1
 80095ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095ee:	2300      	movs	r3, #0
 80095f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80095fc:	7af9      	ldrb	r1, [r7, #11]
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	f7fa f8f4 	bl	80037ee <HAL_PCD_EP_Transmit>
 8009606:	4603      	mov	r3, r0
 8009608:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800960a:	7dfb      	ldrb	r3, [r7, #23]
 800960c:	4618      	mov	r0, r3
 800960e:	f000 f853 	bl	80096b8 <USBD_Get_USB_Status>
 8009612:	4603      	mov	r3, r0
 8009614:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009616:	7dbb      	ldrb	r3, [r7, #22]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3718      	adds	r7, #24
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b086      	sub	sp, #24
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	607a      	str	r2, [r7, #4]
 800962a:	603b      	str	r3, [r7, #0]
 800962c:	460b      	mov	r3, r1
 800962e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009630:	2300      	movs	r3, #0
 8009632:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009634:	2300      	movs	r3, #0
 8009636:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800963e:	7af9      	ldrb	r1, [r7, #11]
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	f7fa f870 	bl	8003728 <HAL_PCD_EP_Receive>
 8009648:	4603      	mov	r3, r0
 800964a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800964c:	7dfb      	ldrb	r3, [r7, #23]
 800964e:	4618      	mov	r0, r3
 8009650:	f000 f832 	bl	80096b8 <USBD_Get_USB_Status>
 8009654:	4603      	mov	r3, r0
 8009656:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009658:	7dbb      	ldrb	r3, [r7, #22]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3718      	adds	r7, #24
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b082      	sub	sp, #8
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	460b      	mov	r3, r1
 800966c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009674:	78fa      	ldrb	r2, [r7, #3]
 8009676:	4611      	mov	r1, r2
 8009678:	4618      	mov	r0, r3
 800967a:	f7fa f8a0 	bl	80037be <HAL_PCD_EP_GetRxCount>
 800967e:	4603      	mov	r3, r0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009690:	4b03      	ldr	r3, [pc, #12]	; (80096a0 <USBD_static_malloc+0x18>)
}
 8009692:	4618      	mov	r0, r3
 8009694:	370c      	adds	r7, #12
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	20001e0c 	.word	0x20001e0c

080096a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]

}
 80096ac:	bf00      	nop
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
 80096be:	4603      	mov	r3, r0
 80096c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80096c6:	79fb      	ldrb	r3, [r7, #7]
 80096c8:	2b03      	cmp	r3, #3
 80096ca:	d817      	bhi.n	80096fc <USBD_Get_USB_Status+0x44>
 80096cc:	a201      	add	r2, pc, #4	; (adr r2, 80096d4 <USBD_Get_USB_Status+0x1c>)
 80096ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d2:	bf00      	nop
 80096d4:	080096e5 	.word	0x080096e5
 80096d8:	080096eb 	.word	0x080096eb
 80096dc:	080096f1 	.word	0x080096f1
 80096e0:	080096f7 	.word	0x080096f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80096e4:	2300      	movs	r3, #0
 80096e6:	73fb      	strb	r3, [r7, #15]
    break;
 80096e8:	e00b      	b.n	8009702 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80096ea:	2303      	movs	r3, #3
 80096ec:	73fb      	strb	r3, [r7, #15]
    break;
 80096ee:	e008      	b.n	8009702 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80096f0:	2301      	movs	r3, #1
 80096f2:	73fb      	strb	r3, [r7, #15]
    break;
 80096f4:	e005      	b.n	8009702 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80096f6:	2303      	movs	r3, #3
 80096f8:	73fb      	strb	r3, [r7, #15]
    break;
 80096fa:	e002      	b.n	8009702 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80096fc:	2303      	movs	r3, #3
 80096fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009700:	bf00      	nop
  }
  return usb_status;
 8009702:	7bfb      	ldrb	r3, [r7, #15]
}
 8009704:	4618      	mov	r0, r3
 8009706:	3714      	adds	r7, #20
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <atof>:
 8009710:	2100      	movs	r1, #0
 8009712:	f000 be63 	b.w	800a3dc <strtod>
	...

08009718 <__errno>:
 8009718:	4b01      	ldr	r3, [pc, #4]	; (8009720 <__errno+0x8>)
 800971a:	6818      	ldr	r0, [r3, #0]
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	200000fc 	.word	0x200000fc

08009724 <__libc_init_array>:
 8009724:	b570      	push	{r4, r5, r6, lr}
 8009726:	4d0d      	ldr	r5, [pc, #52]	; (800975c <__libc_init_array+0x38>)
 8009728:	4c0d      	ldr	r4, [pc, #52]	; (8009760 <__libc_init_array+0x3c>)
 800972a:	1b64      	subs	r4, r4, r5
 800972c:	10a4      	asrs	r4, r4, #2
 800972e:	2600      	movs	r6, #0
 8009730:	42a6      	cmp	r6, r4
 8009732:	d109      	bne.n	8009748 <__libc_init_array+0x24>
 8009734:	4d0b      	ldr	r5, [pc, #44]	; (8009764 <__libc_init_array+0x40>)
 8009736:	4c0c      	ldr	r4, [pc, #48]	; (8009768 <__libc_init_array+0x44>)
 8009738:	f002 feda 	bl	800c4f0 <_init>
 800973c:	1b64      	subs	r4, r4, r5
 800973e:	10a4      	asrs	r4, r4, #2
 8009740:	2600      	movs	r6, #0
 8009742:	42a6      	cmp	r6, r4
 8009744:	d105      	bne.n	8009752 <__libc_init_array+0x2e>
 8009746:	bd70      	pop	{r4, r5, r6, pc}
 8009748:	f855 3b04 	ldr.w	r3, [r5], #4
 800974c:	4798      	blx	r3
 800974e:	3601      	adds	r6, #1
 8009750:	e7ee      	b.n	8009730 <__libc_init_array+0xc>
 8009752:	f855 3b04 	ldr.w	r3, [r5], #4
 8009756:	4798      	blx	r3
 8009758:	3601      	adds	r6, #1
 800975a:	e7f2      	b.n	8009742 <__libc_init_array+0x1e>
 800975c:	0800c9d4 	.word	0x0800c9d4
 8009760:	0800c9d4 	.word	0x0800c9d4
 8009764:	0800c9d4 	.word	0x0800c9d4
 8009768:	0800c9d8 	.word	0x0800c9d8

0800976c <memcpy>:
 800976c:	440a      	add	r2, r1
 800976e:	4291      	cmp	r1, r2
 8009770:	f100 33ff 	add.w	r3, r0, #4294967295
 8009774:	d100      	bne.n	8009778 <memcpy+0xc>
 8009776:	4770      	bx	lr
 8009778:	b510      	push	{r4, lr}
 800977a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800977e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009782:	4291      	cmp	r1, r2
 8009784:	d1f9      	bne.n	800977a <memcpy+0xe>
 8009786:	bd10      	pop	{r4, pc}

08009788 <memset>:
 8009788:	4402      	add	r2, r0
 800978a:	4603      	mov	r3, r0
 800978c:	4293      	cmp	r3, r2
 800978e:	d100      	bne.n	8009792 <memset+0xa>
 8009790:	4770      	bx	lr
 8009792:	f803 1b01 	strb.w	r1, [r3], #1
 8009796:	e7f9      	b.n	800978c <memset+0x4>

08009798 <sulp>:
 8009798:	b570      	push	{r4, r5, r6, lr}
 800979a:	4604      	mov	r4, r0
 800979c:	460d      	mov	r5, r1
 800979e:	ec45 4b10 	vmov	d0, r4, r5
 80097a2:	4616      	mov	r6, r2
 80097a4:	f001 fd1a 	bl	800b1dc <__ulp>
 80097a8:	ec51 0b10 	vmov	r0, r1, d0
 80097ac:	b17e      	cbz	r6, 80097ce <sulp+0x36>
 80097ae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80097b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	dd09      	ble.n	80097ce <sulp+0x36>
 80097ba:	051b      	lsls	r3, r3, #20
 80097bc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80097c0:	2400      	movs	r4, #0
 80097c2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80097c6:	4622      	mov	r2, r4
 80097c8:	462b      	mov	r3, r5
 80097ca:	f7f6 ff15 	bl	80005f8 <__aeabi_dmul>
 80097ce:	bd70      	pop	{r4, r5, r6, pc}

080097d0 <_strtod_l>:
 80097d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d4:	ed2d 8b02 	vpush	{d8}
 80097d8:	b09d      	sub	sp, #116	; 0x74
 80097da:	461f      	mov	r7, r3
 80097dc:	2300      	movs	r3, #0
 80097de:	9318      	str	r3, [sp, #96]	; 0x60
 80097e0:	4ba2      	ldr	r3, [pc, #648]	; (8009a6c <_strtod_l+0x29c>)
 80097e2:	9213      	str	r2, [sp, #76]	; 0x4c
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	9305      	str	r3, [sp, #20]
 80097e8:	4604      	mov	r4, r0
 80097ea:	4618      	mov	r0, r3
 80097ec:	4688      	mov	r8, r1
 80097ee:	f7f6 fcef 	bl	80001d0 <strlen>
 80097f2:	f04f 0a00 	mov.w	sl, #0
 80097f6:	4605      	mov	r5, r0
 80097f8:	f04f 0b00 	mov.w	fp, #0
 80097fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009800:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009802:	781a      	ldrb	r2, [r3, #0]
 8009804:	2a2b      	cmp	r2, #43	; 0x2b
 8009806:	d04e      	beq.n	80098a6 <_strtod_l+0xd6>
 8009808:	d83b      	bhi.n	8009882 <_strtod_l+0xb2>
 800980a:	2a0d      	cmp	r2, #13
 800980c:	d834      	bhi.n	8009878 <_strtod_l+0xa8>
 800980e:	2a08      	cmp	r2, #8
 8009810:	d834      	bhi.n	800987c <_strtod_l+0xac>
 8009812:	2a00      	cmp	r2, #0
 8009814:	d03e      	beq.n	8009894 <_strtod_l+0xc4>
 8009816:	2300      	movs	r3, #0
 8009818:	930a      	str	r3, [sp, #40]	; 0x28
 800981a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800981c:	7833      	ldrb	r3, [r6, #0]
 800981e:	2b30      	cmp	r3, #48	; 0x30
 8009820:	f040 80b0 	bne.w	8009984 <_strtod_l+0x1b4>
 8009824:	7873      	ldrb	r3, [r6, #1]
 8009826:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800982a:	2b58      	cmp	r3, #88	; 0x58
 800982c:	d168      	bne.n	8009900 <_strtod_l+0x130>
 800982e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009830:	9301      	str	r3, [sp, #4]
 8009832:	ab18      	add	r3, sp, #96	; 0x60
 8009834:	9702      	str	r7, [sp, #8]
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	4a8d      	ldr	r2, [pc, #564]	; (8009a70 <_strtod_l+0x2a0>)
 800983a:	ab19      	add	r3, sp, #100	; 0x64
 800983c:	a917      	add	r1, sp, #92	; 0x5c
 800983e:	4620      	mov	r0, r4
 8009840:	f000 fe40 	bl	800a4c4 <__gethex>
 8009844:	f010 0707 	ands.w	r7, r0, #7
 8009848:	4605      	mov	r5, r0
 800984a:	d005      	beq.n	8009858 <_strtod_l+0x88>
 800984c:	2f06      	cmp	r7, #6
 800984e:	d12c      	bne.n	80098aa <_strtod_l+0xda>
 8009850:	3601      	adds	r6, #1
 8009852:	2300      	movs	r3, #0
 8009854:	9617      	str	r6, [sp, #92]	; 0x5c
 8009856:	930a      	str	r3, [sp, #40]	; 0x28
 8009858:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800985a:	2b00      	cmp	r3, #0
 800985c:	f040 8590 	bne.w	800a380 <_strtod_l+0xbb0>
 8009860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009862:	b1eb      	cbz	r3, 80098a0 <_strtod_l+0xd0>
 8009864:	4652      	mov	r2, sl
 8009866:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800986a:	ec43 2b10 	vmov	d0, r2, r3
 800986e:	b01d      	add	sp, #116	; 0x74
 8009870:	ecbd 8b02 	vpop	{d8}
 8009874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009878:	2a20      	cmp	r2, #32
 800987a:	d1cc      	bne.n	8009816 <_strtod_l+0x46>
 800987c:	3301      	adds	r3, #1
 800987e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009880:	e7be      	b.n	8009800 <_strtod_l+0x30>
 8009882:	2a2d      	cmp	r2, #45	; 0x2d
 8009884:	d1c7      	bne.n	8009816 <_strtod_l+0x46>
 8009886:	2201      	movs	r2, #1
 8009888:	920a      	str	r2, [sp, #40]	; 0x28
 800988a:	1c5a      	adds	r2, r3, #1
 800988c:	9217      	str	r2, [sp, #92]	; 0x5c
 800988e:	785b      	ldrb	r3, [r3, #1]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1c2      	bne.n	800981a <_strtod_l+0x4a>
 8009894:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009896:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800989a:	2b00      	cmp	r3, #0
 800989c:	f040 856e 	bne.w	800a37c <_strtod_l+0xbac>
 80098a0:	4652      	mov	r2, sl
 80098a2:	465b      	mov	r3, fp
 80098a4:	e7e1      	b.n	800986a <_strtod_l+0x9a>
 80098a6:	2200      	movs	r2, #0
 80098a8:	e7ee      	b.n	8009888 <_strtod_l+0xb8>
 80098aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80098ac:	b13a      	cbz	r2, 80098be <_strtod_l+0xee>
 80098ae:	2135      	movs	r1, #53	; 0x35
 80098b0:	a81a      	add	r0, sp, #104	; 0x68
 80098b2:	f001 fd9e 	bl	800b3f2 <__copybits>
 80098b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80098b8:	4620      	mov	r0, r4
 80098ba:	f001 f95d 	bl	800ab78 <_Bfree>
 80098be:	3f01      	subs	r7, #1
 80098c0:	2f04      	cmp	r7, #4
 80098c2:	d806      	bhi.n	80098d2 <_strtod_l+0x102>
 80098c4:	e8df f007 	tbb	[pc, r7]
 80098c8:	1714030a 	.word	0x1714030a
 80098cc:	0a          	.byte	0x0a
 80098cd:	00          	.byte	0x00
 80098ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80098d2:	0728      	lsls	r0, r5, #28
 80098d4:	d5c0      	bpl.n	8009858 <_strtod_l+0x88>
 80098d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80098da:	e7bd      	b.n	8009858 <_strtod_l+0x88>
 80098dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80098e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80098e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80098e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80098ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80098ee:	e7f0      	b.n	80098d2 <_strtod_l+0x102>
 80098f0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009a74 <_strtod_l+0x2a4>
 80098f4:	e7ed      	b.n	80098d2 <_strtod_l+0x102>
 80098f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80098fa:	f04f 3aff 	mov.w	sl, #4294967295
 80098fe:	e7e8      	b.n	80098d2 <_strtod_l+0x102>
 8009900:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009902:	1c5a      	adds	r2, r3, #1
 8009904:	9217      	str	r2, [sp, #92]	; 0x5c
 8009906:	785b      	ldrb	r3, [r3, #1]
 8009908:	2b30      	cmp	r3, #48	; 0x30
 800990a:	d0f9      	beq.n	8009900 <_strtod_l+0x130>
 800990c:	2b00      	cmp	r3, #0
 800990e:	d0a3      	beq.n	8009858 <_strtod_l+0x88>
 8009910:	2301      	movs	r3, #1
 8009912:	f04f 0900 	mov.w	r9, #0
 8009916:	9304      	str	r3, [sp, #16]
 8009918:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800991a:	9308      	str	r3, [sp, #32]
 800991c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009920:	464f      	mov	r7, r9
 8009922:	220a      	movs	r2, #10
 8009924:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009926:	7806      	ldrb	r6, [r0, #0]
 8009928:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800992c:	b2d9      	uxtb	r1, r3
 800992e:	2909      	cmp	r1, #9
 8009930:	d92a      	bls.n	8009988 <_strtod_l+0x1b8>
 8009932:	9905      	ldr	r1, [sp, #20]
 8009934:	462a      	mov	r2, r5
 8009936:	f001 fe63 	bl	800b600 <strncmp>
 800993a:	b398      	cbz	r0, 80099a4 <_strtod_l+0x1d4>
 800993c:	2000      	movs	r0, #0
 800993e:	4632      	mov	r2, r6
 8009940:	463d      	mov	r5, r7
 8009942:	9005      	str	r0, [sp, #20]
 8009944:	4603      	mov	r3, r0
 8009946:	2a65      	cmp	r2, #101	; 0x65
 8009948:	d001      	beq.n	800994e <_strtod_l+0x17e>
 800994a:	2a45      	cmp	r2, #69	; 0x45
 800994c:	d118      	bne.n	8009980 <_strtod_l+0x1b0>
 800994e:	b91d      	cbnz	r5, 8009958 <_strtod_l+0x188>
 8009950:	9a04      	ldr	r2, [sp, #16]
 8009952:	4302      	orrs	r2, r0
 8009954:	d09e      	beq.n	8009894 <_strtod_l+0xc4>
 8009956:	2500      	movs	r5, #0
 8009958:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800995c:	f108 0201 	add.w	r2, r8, #1
 8009960:	9217      	str	r2, [sp, #92]	; 0x5c
 8009962:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009966:	2a2b      	cmp	r2, #43	; 0x2b
 8009968:	d075      	beq.n	8009a56 <_strtod_l+0x286>
 800996a:	2a2d      	cmp	r2, #45	; 0x2d
 800996c:	d07b      	beq.n	8009a66 <_strtod_l+0x296>
 800996e:	f04f 0c00 	mov.w	ip, #0
 8009972:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009976:	2909      	cmp	r1, #9
 8009978:	f240 8082 	bls.w	8009a80 <_strtod_l+0x2b0>
 800997c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009980:	2600      	movs	r6, #0
 8009982:	e09d      	b.n	8009ac0 <_strtod_l+0x2f0>
 8009984:	2300      	movs	r3, #0
 8009986:	e7c4      	b.n	8009912 <_strtod_l+0x142>
 8009988:	2f08      	cmp	r7, #8
 800998a:	bfd8      	it	le
 800998c:	9907      	ldrle	r1, [sp, #28]
 800998e:	f100 0001 	add.w	r0, r0, #1
 8009992:	bfda      	itte	le
 8009994:	fb02 3301 	mlale	r3, r2, r1, r3
 8009998:	9307      	strle	r3, [sp, #28]
 800999a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800999e:	3701      	adds	r7, #1
 80099a0:	9017      	str	r0, [sp, #92]	; 0x5c
 80099a2:	e7bf      	b.n	8009924 <_strtod_l+0x154>
 80099a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80099a6:	195a      	adds	r2, r3, r5
 80099a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80099aa:	5d5a      	ldrb	r2, [r3, r5]
 80099ac:	2f00      	cmp	r7, #0
 80099ae:	d037      	beq.n	8009a20 <_strtod_l+0x250>
 80099b0:	9005      	str	r0, [sp, #20]
 80099b2:	463d      	mov	r5, r7
 80099b4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80099b8:	2b09      	cmp	r3, #9
 80099ba:	d912      	bls.n	80099e2 <_strtod_l+0x212>
 80099bc:	2301      	movs	r3, #1
 80099be:	e7c2      	b.n	8009946 <_strtod_l+0x176>
 80099c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80099c2:	1c5a      	adds	r2, r3, #1
 80099c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80099c6:	785a      	ldrb	r2, [r3, #1]
 80099c8:	3001      	adds	r0, #1
 80099ca:	2a30      	cmp	r2, #48	; 0x30
 80099cc:	d0f8      	beq.n	80099c0 <_strtod_l+0x1f0>
 80099ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80099d2:	2b08      	cmp	r3, #8
 80099d4:	f200 84d9 	bhi.w	800a38a <_strtod_l+0xbba>
 80099d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80099da:	9005      	str	r0, [sp, #20]
 80099dc:	2000      	movs	r0, #0
 80099de:	9308      	str	r3, [sp, #32]
 80099e0:	4605      	mov	r5, r0
 80099e2:	3a30      	subs	r2, #48	; 0x30
 80099e4:	f100 0301 	add.w	r3, r0, #1
 80099e8:	d014      	beq.n	8009a14 <_strtod_l+0x244>
 80099ea:	9905      	ldr	r1, [sp, #20]
 80099ec:	4419      	add	r1, r3
 80099ee:	9105      	str	r1, [sp, #20]
 80099f0:	462b      	mov	r3, r5
 80099f2:	eb00 0e05 	add.w	lr, r0, r5
 80099f6:	210a      	movs	r1, #10
 80099f8:	4573      	cmp	r3, lr
 80099fa:	d113      	bne.n	8009a24 <_strtod_l+0x254>
 80099fc:	182b      	adds	r3, r5, r0
 80099fe:	2b08      	cmp	r3, #8
 8009a00:	f105 0501 	add.w	r5, r5, #1
 8009a04:	4405      	add	r5, r0
 8009a06:	dc1c      	bgt.n	8009a42 <_strtod_l+0x272>
 8009a08:	9907      	ldr	r1, [sp, #28]
 8009a0a:	230a      	movs	r3, #10
 8009a0c:	fb03 2301 	mla	r3, r3, r1, r2
 8009a10:	9307      	str	r3, [sp, #28]
 8009a12:	2300      	movs	r3, #0
 8009a14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009a16:	1c51      	adds	r1, r2, #1
 8009a18:	9117      	str	r1, [sp, #92]	; 0x5c
 8009a1a:	7852      	ldrb	r2, [r2, #1]
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	e7c9      	b.n	80099b4 <_strtod_l+0x1e4>
 8009a20:	4638      	mov	r0, r7
 8009a22:	e7d2      	b.n	80099ca <_strtod_l+0x1fa>
 8009a24:	2b08      	cmp	r3, #8
 8009a26:	dc04      	bgt.n	8009a32 <_strtod_l+0x262>
 8009a28:	9e07      	ldr	r6, [sp, #28]
 8009a2a:	434e      	muls	r6, r1
 8009a2c:	9607      	str	r6, [sp, #28]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	e7e2      	b.n	80099f8 <_strtod_l+0x228>
 8009a32:	f103 0c01 	add.w	ip, r3, #1
 8009a36:	f1bc 0f10 	cmp.w	ip, #16
 8009a3a:	bfd8      	it	le
 8009a3c:	fb01 f909 	mulle.w	r9, r1, r9
 8009a40:	e7f5      	b.n	8009a2e <_strtod_l+0x25e>
 8009a42:	2d10      	cmp	r5, #16
 8009a44:	bfdc      	itt	le
 8009a46:	230a      	movle	r3, #10
 8009a48:	fb03 2909 	mlale	r9, r3, r9, r2
 8009a4c:	e7e1      	b.n	8009a12 <_strtod_l+0x242>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	9305      	str	r3, [sp, #20]
 8009a52:	2301      	movs	r3, #1
 8009a54:	e77c      	b.n	8009950 <_strtod_l+0x180>
 8009a56:	f04f 0c00 	mov.w	ip, #0
 8009a5a:	f108 0202 	add.w	r2, r8, #2
 8009a5e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009a60:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009a64:	e785      	b.n	8009972 <_strtod_l+0x1a2>
 8009a66:	f04f 0c01 	mov.w	ip, #1
 8009a6a:	e7f6      	b.n	8009a5a <_strtod_l+0x28a>
 8009a6c:	0800c678 	.word	0x0800c678
 8009a70:	0800c5b0 	.word	0x0800c5b0
 8009a74:	7ff00000 	.word	0x7ff00000
 8009a78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009a7a:	1c51      	adds	r1, r2, #1
 8009a7c:	9117      	str	r1, [sp, #92]	; 0x5c
 8009a7e:	7852      	ldrb	r2, [r2, #1]
 8009a80:	2a30      	cmp	r2, #48	; 0x30
 8009a82:	d0f9      	beq.n	8009a78 <_strtod_l+0x2a8>
 8009a84:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009a88:	2908      	cmp	r1, #8
 8009a8a:	f63f af79 	bhi.w	8009980 <_strtod_l+0x1b0>
 8009a8e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009a92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009a94:	9206      	str	r2, [sp, #24]
 8009a96:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009a98:	1c51      	adds	r1, r2, #1
 8009a9a:	9117      	str	r1, [sp, #92]	; 0x5c
 8009a9c:	7852      	ldrb	r2, [r2, #1]
 8009a9e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009aa2:	2e09      	cmp	r6, #9
 8009aa4:	d937      	bls.n	8009b16 <_strtod_l+0x346>
 8009aa6:	9e06      	ldr	r6, [sp, #24]
 8009aa8:	1b89      	subs	r1, r1, r6
 8009aaa:	2908      	cmp	r1, #8
 8009aac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009ab0:	dc02      	bgt.n	8009ab8 <_strtod_l+0x2e8>
 8009ab2:	4576      	cmp	r6, lr
 8009ab4:	bfa8      	it	ge
 8009ab6:	4676      	movge	r6, lr
 8009ab8:	f1bc 0f00 	cmp.w	ip, #0
 8009abc:	d000      	beq.n	8009ac0 <_strtod_l+0x2f0>
 8009abe:	4276      	negs	r6, r6
 8009ac0:	2d00      	cmp	r5, #0
 8009ac2:	d14d      	bne.n	8009b60 <_strtod_l+0x390>
 8009ac4:	9904      	ldr	r1, [sp, #16]
 8009ac6:	4301      	orrs	r1, r0
 8009ac8:	f47f aec6 	bne.w	8009858 <_strtod_l+0x88>
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f47f aee1 	bne.w	8009894 <_strtod_l+0xc4>
 8009ad2:	2a69      	cmp	r2, #105	; 0x69
 8009ad4:	d027      	beq.n	8009b26 <_strtod_l+0x356>
 8009ad6:	dc24      	bgt.n	8009b22 <_strtod_l+0x352>
 8009ad8:	2a49      	cmp	r2, #73	; 0x49
 8009ada:	d024      	beq.n	8009b26 <_strtod_l+0x356>
 8009adc:	2a4e      	cmp	r2, #78	; 0x4e
 8009ade:	f47f aed9 	bne.w	8009894 <_strtod_l+0xc4>
 8009ae2:	499f      	ldr	r1, [pc, #636]	; (8009d60 <_strtod_l+0x590>)
 8009ae4:	a817      	add	r0, sp, #92	; 0x5c
 8009ae6:	f000 ff45 	bl	800a974 <__match>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	f43f aed2 	beq.w	8009894 <_strtod_l+0xc4>
 8009af0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	2b28      	cmp	r3, #40	; 0x28
 8009af6:	d12d      	bne.n	8009b54 <_strtod_l+0x384>
 8009af8:	499a      	ldr	r1, [pc, #616]	; (8009d64 <_strtod_l+0x594>)
 8009afa:	aa1a      	add	r2, sp, #104	; 0x68
 8009afc:	a817      	add	r0, sp, #92	; 0x5c
 8009afe:	f000 ff4d 	bl	800a99c <__hexnan>
 8009b02:	2805      	cmp	r0, #5
 8009b04:	d126      	bne.n	8009b54 <_strtod_l+0x384>
 8009b06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009b08:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009b0c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009b10:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009b14:	e6a0      	b.n	8009858 <_strtod_l+0x88>
 8009b16:	210a      	movs	r1, #10
 8009b18:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009b1c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009b20:	e7b9      	b.n	8009a96 <_strtod_l+0x2c6>
 8009b22:	2a6e      	cmp	r2, #110	; 0x6e
 8009b24:	e7db      	b.n	8009ade <_strtod_l+0x30e>
 8009b26:	4990      	ldr	r1, [pc, #576]	; (8009d68 <_strtod_l+0x598>)
 8009b28:	a817      	add	r0, sp, #92	; 0x5c
 8009b2a:	f000 ff23 	bl	800a974 <__match>
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	f43f aeb0 	beq.w	8009894 <_strtod_l+0xc4>
 8009b34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b36:	498d      	ldr	r1, [pc, #564]	; (8009d6c <_strtod_l+0x59c>)
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	a817      	add	r0, sp, #92	; 0x5c
 8009b3c:	9317      	str	r3, [sp, #92]	; 0x5c
 8009b3e:	f000 ff19 	bl	800a974 <__match>
 8009b42:	b910      	cbnz	r0, 8009b4a <_strtod_l+0x37a>
 8009b44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b46:	3301      	adds	r3, #1
 8009b48:	9317      	str	r3, [sp, #92]	; 0x5c
 8009b4a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009d7c <_strtod_l+0x5ac>
 8009b4e:	f04f 0a00 	mov.w	sl, #0
 8009b52:	e681      	b.n	8009858 <_strtod_l+0x88>
 8009b54:	4886      	ldr	r0, [pc, #536]	; (8009d70 <_strtod_l+0x5a0>)
 8009b56:	f001 fd3b 	bl	800b5d0 <nan>
 8009b5a:	ec5b ab10 	vmov	sl, fp, d0
 8009b5e:	e67b      	b.n	8009858 <_strtod_l+0x88>
 8009b60:	9b05      	ldr	r3, [sp, #20]
 8009b62:	9807      	ldr	r0, [sp, #28]
 8009b64:	1af3      	subs	r3, r6, r3
 8009b66:	2f00      	cmp	r7, #0
 8009b68:	bf08      	it	eq
 8009b6a:	462f      	moveq	r7, r5
 8009b6c:	2d10      	cmp	r5, #16
 8009b6e:	9306      	str	r3, [sp, #24]
 8009b70:	46a8      	mov	r8, r5
 8009b72:	bfa8      	it	ge
 8009b74:	f04f 0810 	movge.w	r8, #16
 8009b78:	f7f6 fcc4 	bl	8000504 <__aeabi_ui2d>
 8009b7c:	2d09      	cmp	r5, #9
 8009b7e:	4682      	mov	sl, r0
 8009b80:	468b      	mov	fp, r1
 8009b82:	dd13      	ble.n	8009bac <_strtod_l+0x3dc>
 8009b84:	4b7b      	ldr	r3, [pc, #492]	; (8009d74 <_strtod_l+0x5a4>)
 8009b86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009b8a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009b8e:	f7f6 fd33 	bl	80005f8 <__aeabi_dmul>
 8009b92:	4682      	mov	sl, r0
 8009b94:	4648      	mov	r0, r9
 8009b96:	468b      	mov	fp, r1
 8009b98:	f7f6 fcb4 	bl	8000504 <__aeabi_ui2d>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	4650      	mov	r0, sl
 8009ba2:	4659      	mov	r1, fp
 8009ba4:	f7f6 fb72 	bl	800028c <__adddf3>
 8009ba8:	4682      	mov	sl, r0
 8009baa:	468b      	mov	fp, r1
 8009bac:	2d0f      	cmp	r5, #15
 8009bae:	dc38      	bgt.n	8009c22 <_strtod_l+0x452>
 8009bb0:	9b06      	ldr	r3, [sp, #24]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	f43f ae50 	beq.w	8009858 <_strtod_l+0x88>
 8009bb8:	dd24      	ble.n	8009c04 <_strtod_l+0x434>
 8009bba:	2b16      	cmp	r3, #22
 8009bbc:	dc0b      	bgt.n	8009bd6 <_strtod_l+0x406>
 8009bbe:	496d      	ldr	r1, [pc, #436]	; (8009d74 <_strtod_l+0x5a4>)
 8009bc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009bc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bc8:	4652      	mov	r2, sl
 8009bca:	465b      	mov	r3, fp
 8009bcc:	f7f6 fd14 	bl	80005f8 <__aeabi_dmul>
 8009bd0:	4682      	mov	sl, r0
 8009bd2:	468b      	mov	fp, r1
 8009bd4:	e640      	b.n	8009858 <_strtod_l+0x88>
 8009bd6:	9a06      	ldr	r2, [sp, #24]
 8009bd8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	db20      	blt.n	8009c22 <_strtod_l+0x452>
 8009be0:	4c64      	ldr	r4, [pc, #400]	; (8009d74 <_strtod_l+0x5a4>)
 8009be2:	f1c5 050f 	rsb	r5, r5, #15
 8009be6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009bea:	4652      	mov	r2, sl
 8009bec:	465b      	mov	r3, fp
 8009bee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bf2:	f7f6 fd01 	bl	80005f8 <__aeabi_dmul>
 8009bf6:	9b06      	ldr	r3, [sp, #24]
 8009bf8:	1b5d      	subs	r5, r3, r5
 8009bfa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009bfe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009c02:	e7e3      	b.n	8009bcc <_strtod_l+0x3fc>
 8009c04:	9b06      	ldr	r3, [sp, #24]
 8009c06:	3316      	adds	r3, #22
 8009c08:	db0b      	blt.n	8009c22 <_strtod_l+0x452>
 8009c0a:	9b05      	ldr	r3, [sp, #20]
 8009c0c:	1b9e      	subs	r6, r3, r6
 8009c0e:	4b59      	ldr	r3, [pc, #356]	; (8009d74 <_strtod_l+0x5a4>)
 8009c10:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009c14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c18:	4650      	mov	r0, sl
 8009c1a:	4659      	mov	r1, fp
 8009c1c:	f7f6 fe16 	bl	800084c <__aeabi_ddiv>
 8009c20:	e7d6      	b.n	8009bd0 <_strtod_l+0x400>
 8009c22:	9b06      	ldr	r3, [sp, #24]
 8009c24:	eba5 0808 	sub.w	r8, r5, r8
 8009c28:	4498      	add	r8, r3
 8009c2a:	f1b8 0f00 	cmp.w	r8, #0
 8009c2e:	dd74      	ble.n	8009d1a <_strtod_l+0x54a>
 8009c30:	f018 030f 	ands.w	r3, r8, #15
 8009c34:	d00a      	beq.n	8009c4c <_strtod_l+0x47c>
 8009c36:	494f      	ldr	r1, [pc, #316]	; (8009d74 <_strtod_l+0x5a4>)
 8009c38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009c3c:	4652      	mov	r2, sl
 8009c3e:	465b      	mov	r3, fp
 8009c40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c44:	f7f6 fcd8 	bl	80005f8 <__aeabi_dmul>
 8009c48:	4682      	mov	sl, r0
 8009c4a:	468b      	mov	fp, r1
 8009c4c:	f038 080f 	bics.w	r8, r8, #15
 8009c50:	d04f      	beq.n	8009cf2 <_strtod_l+0x522>
 8009c52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009c56:	dd22      	ble.n	8009c9e <_strtod_l+0x4ce>
 8009c58:	2500      	movs	r5, #0
 8009c5a:	462e      	mov	r6, r5
 8009c5c:	9507      	str	r5, [sp, #28]
 8009c5e:	9505      	str	r5, [sp, #20]
 8009c60:	2322      	movs	r3, #34	; 0x22
 8009c62:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009d7c <_strtod_l+0x5ac>
 8009c66:	6023      	str	r3, [r4, #0]
 8009c68:	f04f 0a00 	mov.w	sl, #0
 8009c6c:	9b07      	ldr	r3, [sp, #28]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	f43f adf2 	beq.w	8009858 <_strtod_l+0x88>
 8009c74:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009c76:	4620      	mov	r0, r4
 8009c78:	f000 ff7e 	bl	800ab78 <_Bfree>
 8009c7c:	9905      	ldr	r1, [sp, #20]
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f000 ff7a 	bl	800ab78 <_Bfree>
 8009c84:	4631      	mov	r1, r6
 8009c86:	4620      	mov	r0, r4
 8009c88:	f000 ff76 	bl	800ab78 <_Bfree>
 8009c8c:	9907      	ldr	r1, [sp, #28]
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f000 ff72 	bl	800ab78 <_Bfree>
 8009c94:	4629      	mov	r1, r5
 8009c96:	4620      	mov	r0, r4
 8009c98:	f000 ff6e 	bl	800ab78 <_Bfree>
 8009c9c:	e5dc      	b.n	8009858 <_strtod_l+0x88>
 8009c9e:	4b36      	ldr	r3, [pc, #216]	; (8009d78 <_strtod_l+0x5a8>)
 8009ca0:	9304      	str	r3, [sp, #16]
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009ca8:	4650      	mov	r0, sl
 8009caa:	4659      	mov	r1, fp
 8009cac:	4699      	mov	r9, r3
 8009cae:	f1b8 0f01 	cmp.w	r8, #1
 8009cb2:	dc21      	bgt.n	8009cf8 <_strtod_l+0x528>
 8009cb4:	b10b      	cbz	r3, 8009cba <_strtod_l+0x4ea>
 8009cb6:	4682      	mov	sl, r0
 8009cb8:	468b      	mov	fp, r1
 8009cba:	4b2f      	ldr	r3, [pc, #188]	; (8009d78 <_strtod_l+0x5a8>)
 8009cbc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009cc0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009cc4:	4652      	mov	r2, sl
 8009cc6:	465b      	mov	r3, fp
 8009cc8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009ccc:	f7f6 fc94 	bl	80005f8 <__aeabi_dmul>
 8009cd0:	4b2a      	ldr	r3, [pc, #168]	; (8009d7c <_strtod_l+0x5ac>)
 8009cd2:	460a      	mov	r2, r1
 8009cd4:	400b      	ands	r3, r1
 8009cd6:	492a      	ldr	r1, [pc, #168]	; (8009d80 <_strtod_l+0x5b0>)
 8009cd8:	428b      	cmp	r3, r1
 8009cda:	4682      	mov	sl, r0
 8009cdc:	d8bc      	bhi.n	8009c58 <_strtod_l+0x488>
 8009cde:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009ce2:	428b      	cmp	r3, r1
 8009ce4:	bf86      	itte	hi
 8009ce6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009d84 <_strtod_l+0x5b4>
 8009cea:	f04f 3aff 	movhi.w	sl, #4294967295
 8009cee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	9304      	str	r3, [sp, #16]
 8009cf6:	e084      	b.n	8009e02 <_strtod_l+0x632>
 8009cf8:	f018 0f01 	tst.w	r8, #1
 8009cfc:	d005      	beq.n	8009d0a <_strtod_l+0x53a>
 8009cfe:	9b04      	ldr	r3, [sp, #16]
 8009d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d04:	f7f6 fc78 	bl	80005f8 <__aeabi_dmul>
 8009d08:	2301      	movs	r3, #1
 8009d0a:	9a04      	ldr	r2, [sp, #16]
 8009d0c:	3208      	adds	r2, #8
 8009d0e:	f109 0901 	add.w	r9, r9, #1
 8009d12:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009d16:	9204      	str	r2, [sp, #16]
 8009d18:	e7c9      	b.n	8009cae <_strtod_l+0x4de>
 8009d1a:	d0ea      	beq.n	8009cf2 <_strtod_l+0x522>
 8009d1c:	f1c8 0800 	rsb	r8, r8, #0
 8009d20:	f018 020f 	ands.w	r2, r8, #15
 8009d24:	d00a      	beq.n	8009d3c <_strtod_l+0x56c>
 8009d26:	4b13      	ldr	r3, [pc, #76]	; (8009d74 <_strtod_l+0x5a4>)
 8009d28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d2c:	4650      	mov	r0, sl
 8009d2e:	4659      	mov	r1, fp
 8009d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d34:	f7f6 fd8a 	bl	800084c <__aeabi_ddiv>
 8009d38:	4682      	mov	sl, r0
 8009d3a:	468b      	mov	fp, r1
 8009d3c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009d40:	d0d7      	beq.n	8009cf2 <_strtod_l+0x522>
 8009d42:	f1b8 0f1f 	cmp.w	r8, #31
 8009d46:	dd1f      	ble.n	8009d88 <_strtod_l+0x5b8>
 8009d48:	2500      	movs	r5, #0
 8009d4a:	462e      	mov	r6, r5
 8009d4c:	9507      	str	r5, [sp, #28]
 8009d4e:	9505      	str	r5, [sp, #20]
 8009d50:	2322      	movs	r3, #34	; 0x22
 8009d52:	f04f 0a00 	mov.w	sl, #0
 8009d56:	f04f 0b00 	mov.w	fp, #0
 8009d5a:	6023      	str	r3, [r4, #0]
 8009d5c:	e786      	b.n	8009c6c <_strtod_l+0x49c>
 8009d5e:	bf00      	nop
 8009d60:	0800c5ad 	.word	0x0800c5ad
 8009d64:	0800c5c4 	.word	0x0800c5c4
 8009d68:	0800c5a4 	.word	0x0800c5a4
 8009d6c:	0800c5a7 	.word	0x0800c5a7
 8009d70:	0800c837 	.word	0x0800c837
 8009d74:	0800c728 	.word	0x0800c728
 8009d78:	0800c700 	.word	0x0800c700
 8009d7c:	7ff00000 	.word	0x7ff00000
 8009d80:	7ca00000 	.word	0x7ca00000
 8009d84:	7fefffff 	.word	0x7fefffff
 8009d88:	f018 0310 	ands.w	r3, r8, #16
 8009d8c:	bf18      	it	ne
 8009d8e:	236a      	movne	r3, #106	; 0x6a
 8009d90:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a140 <_strtod_l+0x970>
 8009d94:	9304      	str	r3, [sp, #16]
 8009d96:	4650      	mov	r0, sl
 8009d98:	4659      	mov	r1, fp
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	f018 0f01 	tst.w	r8, #1
 8009da0:	d004      	beq.n	8009dac <_strtod_l+0x5dc>
 8009da2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009da6:	f7f6 fc27 	bl	80005f8 <__aeabi_dmul>
 8009daa:	2301      	movs	r3, #1
 8009dac:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009db0:	f109 0908 	add.w	r9, r9, #8
 8009db4:	d1f2      	bne.n	8009d9c <_strtod_l+0x5cc>
 8009db6:	b10b      	cbz	r3, 8009dbc <_strtod_l+0x5ec>
 8009db8:	4682      	mov	sl, r0
 8009dba:	468b      	mov	fp, r1
 8009dbc:	9b04      	ldr	r3, [sp, #16]
 8009dbe:	b1c3      	cbz	r3, 8009df2 <_strtod_l+0x622>
 8009dc0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009dc4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	4659      	mov	r1, fp
 8009dcc:	dd11      	ble.n	8009df2 <_strtod_l+0x622>
 8009dce:	2b1f      	cmp	r3, #31
 8009dd0:	f340 8124 	ble.w	800a01c <_strtod_l+0x84c>
 8009dd4:	2b34      	cmp	r3, #52	; 0x34
 8009dd6:	bfde      	ittt	le
 8009dd8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009ddc:	f04f 33ff 	movle.w	r3, #4294967295
 8009de0:	fa03 f202 	lslle.w	r2, r3, r2
 8009de4:	f04f 0a00 	mov.w	sl, #0
 8009de8:	bfcc      	ite	gt
 8009dea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009dee:	ea02 0b01 	andle.w	fp, r2, r1
 8009df2:	2200      	movs	r2, #0
 8009df4:	2300      	movs	r3, #0
 8009df6:	4650      	mov	r0, sl
 8009df8:	4659      	mov	r1, fp
 8009dfa:	f7f6 fe65 	bl	8000ac8 <__aeabi_dcmpeq>
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	d1a2      	bne.n	8009d48 <_strtod_l+0x578>
 8009e02:	9b07      	ldr	r3, [sp, #28]
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	9908      	ldr	r1, [sp, #32]
 8009e08:	462b      	mov	r3, r5
 8009e0a:	463a      	mov	r2, r7
 8009e0c:	4620      	mov	r0, r4
 8009e0e:	f000 ff1b 	bl	800ac48 <__s2b>
 8009e12:	9007      	str	r0, [sp, #28]
 8009e14:	2800      	cmp	r0, #0
 8009e16:	f43f af1f 	beq.w	8009c58 <_strtod_l+0x488>
 8009e1a:	9b05      	ldr	r3, [sp, #20]
 8009e1c:	1b9e      	subs	r6, r3, r6
 8009e1e:	9b06      	ldr	r3, [sp, #24]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	bfb4      	ite	lt
 8009e24:	4633      	movlt	r3, r6
 8009e26:	2300      	movge	r3, #0
 8009e28:	930c      	str	r3, [sp, #48]	; 0x30
 8009e2a:	9b06      	ldr	r3, [sp, #24]
 8009e2c:	2500      	movs	r5, #0
 8009e2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009e32:	9312      	str	r3, [sp, #72]	; 0x48
 8009e34:	462e      	mov	r6, r5
 8009e36:	9b07      	ldr	r3, [sp, #28]
 8009e38:	4620      	mov	r0, r4
 8009e3a:	6859      	ldr	r1, [r3, #4]
 8009e3c:	f000 fe5c 	bl	800aaf8 <_Balloc>
 8009e40:	9005      	str	r0, [sp, #20]
 8009e42:	2800      	cmp	r0, #0
 8009e44:	f43f af0c 	beq.w	8009c60 <_strtod_l+0x490>
 8009e48:	9b07      	ldr	r3, [sp, #28]
 8009e4a:	691a      	ldr	r2, [r3, #16]
 8009e4c:	3202      	adds	r2, #2
 8009e4e:	f103 010c 	add.w	r1, r3, #12
 8009e52:	0092      	lsls	r2, r2, #2
 8009e54:	300c      	adds	r0, #12
 8009e56:	f7ff fc89 	bl	800976c <memcpy>
 8009e5a:	ec4b ab10 	vmov	d0, sl, fp
 8009e5e:	aa1a      	add	r2, sp, #104	; 0x68
 8009e60:	a919      	add	r1, sp, #100	; 0x64
 8009e62:	4620      	mov	r0, r4
 8009e64:	f001 fa36 	bl	800b2d4 <__d2b>
 8009e68:	ec4b ab18 	vmov	d8, sl, fp
 8009e6c:	9018      	str	r0, [sp, #96]	; 0x60
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	f43f aef6 	beq.w	8009c60 <_strtod_l+0x490>
 8009e74:	2101      	movs	r1, #1
 8009e76:	4620      	mov	r0, r4
 8009e78:	f000 ff80 	bl	800ad7c <__i2b>
 8009e7c:	4606      	mov	r6, r0
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	f43f aeee 	beq.w	8009c60 <_strtod_l+0x490>
 8009e84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e86:	9904      	ldr	r1, [sp, #16]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	bfab      	itete	ge
 8009e8c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009e8e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009e90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009e92:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009e96:	bfac      	ite	ge
 8009e98:	eb03 0902 	addge.w	r9, r3, r2
 8009e9c:	1ad7      	sublt	r7, r2, r3
 8009e9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009ea0:	eba3 0801 	sub.w	r8, r3, r1
 8009ea4:	4490      	add	r8, r2
 8009ea6:	4ba1      	ldr	r3, [pc, #644]	; (800a12c <_strtod_l+0x95c>)
 8009ea8:	f108 38ff 	add.w	r8, r8, #4294967295
 8009eac:	4598      	cmp	r8, r3
 8009eae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009eb2:	f280 80c7 	bge.w	800a044 <_strtod_l+0x874>
 8009eb6:	eba3 0308 	sub.w	r3, r3, r8
 8009eba:	2b1f      	cmp	r3, #31
 8009ebc:	eba2 0203 	sub.w	r2, r2, r3
 8009ec0:	f04f 0101 	mov.w	r1, #1
 8009ec4:	f300 80b1 	bgt.w	800a02a <_strtod_l+0x85a>
 8009ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8009ecc:	930d      	str	r3, [sp, #52]	; 0x34
 8009ece:	2300      	movs	r3, #0
 8009ed0:	9308      	str	r3, [sp, #32]
 8009ed2:	eb09 0802 	add.w	r8, r9, r2
 8009ed6:	9b04      	ldr	r3, [sp, #16]
 8009ed8:	45c1      	cmp	r9, r8
 8009eda:	4417      	add	r7, r2
 8009edc:	441f      	add	r7, r3
 8009ede:	464b      	mov	r3, r9
 8009ee0:	bfa8      	it	ge
 8009ee2:	4643      	movge	r3, r8
 8009ee4:	42bb      	cmp	r3, r7
 8009ee6:	bfa8      	it	ge
 8009ee8:	463b      	movge	r3, r7
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	bfc2      	ittt	gt
 8009eee:	eba8 0803 	subgt.w	r8, r8, r3
 8009ef2:	1aff      	subgt	r7, r7, r3
 8009ef4:	eba9 0903 	subgt.w	r9, r9, r3
 8009ef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	dd17      	ble.n	8009f2e <_strtod_l+0x75e>
 8009efe:	4631      	mov	r1, r6
 8009f00:	461a      	mov	r2, r3
 8009f02:	4620      	mov	r0, r4
 8009f04:	f000 fffa 	bl	800aefc <__pow5mult>
 8009f08:	4606      	mov	r6, r0
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	f43f aea8 	beq.w	8009c60 <_strtod_l+0x490>
 8009f10:	4601      	mov	r1, r0
 8009f12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009f14:	4620      	mov	r0, r4
 8009f16:	f000 ff47 	bl	800ada8 <__multiply>
 8009f1a:	900b      	str	r0, [sp, #44]	; 0x2c
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	f43f ae9f 	beq.w	8009c60 <_strtod_l+0x490>
 8009f22:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009f24:	4620      	mov	r0, r4
 8009f26:	f000 fe27 	bl	800ab78 <_Bfree>
 8009f2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f2c:	9318      	str	r3, [sp, #96]	; 0x60
 8009f2e:	f1b8 0f00 	cmp.w	r8, #0
 8009f32:	f300 808c 	bgt.w	800a04e <_strtod_l+0x87e>
 8009f36:	9b06      	ldr	r3, [sp, #24]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	dd08      	ble.n	8009f4e <_strtod_l+0x77e>
 8009f3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f3e:	9905      	ldr	r1, [sp, #20]
 8009f40:	4620      	mov	r0, r4
 8009f42:	f000 ffdb 	bl	800aefc <__pow5mult>
 8009f46:	9005      	str	r0, [sp, #20]
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	f43f ae89 	beq.w	8009c60 <_strtod_l+0x490>
 8009f4e:	2f00      	cmp	r7, #0
 8009f50:	dd08      	ble.n	8009f64 <_strtod_l+0x794>
 8009f52:	9905      	ldr	r1, [sp, #20]
 8009f54:	463a      	mov	r2, r7
 8009f56:	4620      	mov	r0, r4
 8009f58:	f001 f82a 	bl	800afb0 <__lshift>
 8009f5c:	9005      	str	r0, [sp, #20]
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	f43f ae7e 	beq.w	8009c60 <_strtod_l+0x490>
 8009f64:	f1b9 0f00 	cmp.w	r9, #0
 8009f68:	dd08      	ble.n	8009f7c <_strtod_l+0x7ac>
 8009f6a:	4631      	mov	r1, r6
 8009f6c:	464a      	mov	r2, r9
 8009f6e:	4620      	mov	r0, r4
 8009f70:	f001 f81e 	bl	800afb0 <__lshift>
 8009f74:	4606      	mov	r6, r0
 8009f76:	2800      	cmp	r0, #0
 8009f78:	f43f ae72 	beq.w	8009c60 <_strtod_l+0x490>
 8009f7c:	9a05      	ldr	r2, [sp, #20]
 8009f7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009f80:	4620      	mov	r0, r4
 8009f82:	f001 f8a1 	bl	800b0c8 <__mdiff>
 8009f86:	4605      	mov	r5, r0
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	f43f ae69 	beq.w	8009c60 <_strtod_l+0x490>
 8009f8e:	68c3      	ldr	r3, [r0, #12]
 8009f90:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f92:	2300      	movs	r3, #0
 8009f94:	60c3      	str	r3, [r0, #12]
 8009f96:	4631      	mov	r1, r6
 8009f98:	f001 f87a 	bl	800b090 <__mcmp>
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	da60      	bge.n	800a062 <_strtod_l+0x892>
 8009fa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fa2:	ea53 030a 	orrs.w	r3, r3, sl
 8009fa6:	f040 8082 	bne.w	800a0ae <_strtod_l+0x8de>
 8009faa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d17d      	bne.n	800a0ae <_strtod_l+0x8de>
 8009fb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009fb6:	0d1b      	lsrs	r3, r3, #20
 8009fb8:	051b      	lsls	r3, r3, #20
 8009fba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009fbe:	d976      	bls.n	800a0ae <_strtod_l+0x8de>
 8009fc0:	696b      	ldr	r3, [r5, #20]
 8009fc2:	b913      	cbnz	r3, 8009fca <_strtod_l+0x7fa>
 8009fc4:	692b      	ldr	r3, [r5, #16]
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	dd71      	ble.n	800a0ae <_strtod_l+0x8de>
 8009fca:	4629      	mov	r1, r5
 8009fcc:	2201      	movs	r2, #1
 8009fce:	4620      	mov	r0, r4
 8009fd0:	f000 ffee 	bl	800afb0 <__lshift>
 8009fd4:	4631      	mov	r1, r6
 8009fd6:	4605      	mov	r5, r0
 8009fd8:	f001 f85a 	bl	800b090 <__mcmp>
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	dd66      	ble.n	800a0ae <_strtod_l+0x8de>
 8009fe0:	9904      	ldr	r1, [sp, #16]
 8009fe2:	4a53      	ldr	r2, [pc, #332]	; (800a130 <_strtod_l+0x960>)
 8009fe4:	465b      	mov	r3, fp
 8009fe6:	2900      	cmp	r1, #0
 8009fe8:	f000 8081 	beq.w	800a0ee <_strtod_l+0x91e>
 8009fec:	ea02 010b 	and.w	r1, r2, fp
 8009ff0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009ff4:	dc7b      	bgt.n	800a0ee <_strtod_l+0x91e>
 8009ff6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009ffa:	f77f aea9 	ble.w	8009d50 <_strtod_l+0x580>
 8009ffe:	4b4d      	ldr	r3, [pc, #308]	; (800a134 <_strtod_l+0x964>)
 800a000:	4650      	mov	r0, sl
 800a002:	4659      	mov	r1, fp
 800a004:	2200      	movs	r2, #0
 800a006:	f7f6 faf7 	bl	80005f8 <__aeabi_dmul>
 800a00a:	460b      	mov	r3, r1
 800a00c:	4303      	orrs	r3, r0
 800a00e:	bf08      	it	eq
 800a010:	2322      	moveq	r3, #34	; 0x22
 800a012:	4682      	mov	sl, r0
 800a014:	468b      	mov	fp, r1
 800a016:	bf08      	it	eq
 800a018:	6023      	streq	r3, [r4, #0]
 800a01a:	e62b      	b.n	8009c74 <_strtod_l+0x4a4>
 800a01c:	f04f 32ff 	mov.w	r2, #4294967295
 800a020:	fa02 f303 	lsl.w	r3, r2, r3
 800a024:	ea03 0a0a 	and.w	sl, r3, sl
 800a028:	e6e3      	b.n	8009df2 <_strtod_l+0x622>
 800a02a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a02e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a032:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a036:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a03a:	fa01 f308 	lsl.w	r3, r1, r8
 800a03e:	9308      	str	r3, [sp, #32]
 800a040:	910d      	str	r1, [sp, #52]	; 0x34
 800a042:	e746      	b.n	8009ed2 <_strtod_l+0x702>
 800a044:	2300      	movs	r3, #0
 800a046:	9308      	str	r3, [sp, #32]
 800a048:	2301      	movs	r3, #1
 800a04a:	930d      	str	r3, [sp, #52]	; 0x34
 800a04c:	e741      	b.n	8009ed2 <_strtod_l+0x702>
 800a04e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a050:	4642      	mov	r2, r8
 800a052:	4620      	mov	r0, r4
 800a054:	f000 ffac 	bl	800afb0 <__lshift>
 800a058:	9018      	str	r0, [sp, #96]	; 0x60
 800a05a:	2800      	cmp	r0, #0
 800a05c:	f47f af6b 	bne.w	8009f36 <_strtod_l+0x766>
 800a060:	e5fe      	b.n	8009c60 <_strtod_l+0x490>
 800a062:	465f      	mov	r7, fp
 800a064:	d16e      	bne.n	800a144 <_strtod_l+0x974>
 800a066:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a068:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a06c:	b342      	cbz	r2, 800a0c0 <_strtod_l+0x8f0>
 800a06e:	4a32      	ldr	r2, [pc, #200]	; (800a138 <_strtod_l+0x968>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d128      	bne.n	800a0c6 <_strtod_l+0x8f6>
 800a074:	9b04      	ldr	r3, [sp, #16]
 800a076:	4651      	mov	r1, sl
 800a078:	b1eb      	cbz	r3, 800a0b6 <_strtod_l+0x8e6>
 800a07a:	4b2d      	ldr	r3, [pc, #180]	; (800a130 <_strtod_l+0x960>)
 800a07c:	403b      	ands	r3, r7
 800a07e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a082:	f04f 32ff 	mov.w	r2, #4294967295
 800a086:	d819      	bhi.n	800a0bc <_strtod_l+0x8ec>
 800a088:	0d1b      	lsrs	r3, r3, #20
 800a08a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a08e:	fa02 f303 	lsl.w	r3, r2, r3
 800a092:	4299      	cmp	r1, r3
 800a094:	d117      	bne.n	800a0c6 <_strtod_l+0x8f6>
 800a096:	4b29      	ldr	r3, [pc, #164]	; (800a13c <_strtod_l+0x96c>)
 800a098:	429f      	cmp	r7, r3
 800a09a:	d102      	bne.n	800a0a2 <_strtod_l+0x8d2>
 800a09c:	3101      	adds	r1, #1
 800a09e:	f43f addf 	beq.w	8009c60 <_strtod_l+0x490>
 800a0a2:	4b23      	ldr	r3, [pc, #140]	; (800a130 <_strtod_l+0x960>)
 800a0a4:	403b      	ands	r3, r7
 800a0a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a0aa:	f04f 0a00 	mov.w	sl, #0
 800a0ae:	9b04      	ldr	r3, [sp, #16]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d1a4      	bne.n	8009ffe <_strtod_l+0x82e>
 800a0b4:	e5de      	b.n	8009c74 <_strtod_l+0x4a4>
 800a0b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ba:	e7ea      	b.n	800a092 <_strtod_l+0x8c2>
 800a0bc:	4613      	mov	r3, r2
 800a0be:	e7e8      	b.n	800a092 <_strtod_l+0x8c2>
 800a0c0:	ea53 030a 	orrs.w	r3, r3, sl
 800a0c4:	d08c      	beq.n	8009fe0 <_strtod_l+0x810>
 800a0c6:	9b08      	ldr	r3, [sp, #32]
 800a0c8:	b1db      	cbz	r3, 800a102 <_strtod_l+0x932>
 800a0ca:	423b      	tst	r3, r7
 800a0cc:	d0ef      	beq.n	800a0ae <_strtod_l+0x8de>
 800a0ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0d0:	9a04      	ldr	r2, [sp, #16]
 800a0d2:	4650      	mov	r0, sl
 800a0d4:	4659      	mov	r1, fp
 800a0d6:	b1c3      	cbz	r3, 800a10a <_strtod_l+0x93a>
 800a0d8:	f7ff fb5e 	bl	8009798 <sulp>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	460b      	mov	r3, r1
 800a0e0:	ec51 0b18 	vmov	r0, r1, d8
 800a0e4:	f7f6 f8d2 	bl	800028c <__adddf3>
 800a0e8:	4682      	mov	sl, r0
 800a0ea:	468b      	mov	fp, r1
 800a0ec:	e7df      	b.n	800a0ae <_strtod_l+0x8de>
 800a0ee:	4013      	ands	r3, r2
 800a0f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a0f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a0f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a0fc:	f04f 3aff 	mov.w	sl, #4294967295
 800a100:	e7d5      	b.n	800a0ae <_strtod_l+0x8de>
 800a102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a104:	ea13 0f0a 	tst.w	r3, sl
 800a108:	e7e0      	b.n	800a0cc <_strtod_l+0x8fc>
 800a10a:	f7ff fb45 	bl	8009798 <sulp>
 800a10e:	4602      	mov	r2, r0
 800a110:	460b      	mov	r3, r1
 800a112:	ec51 0b18 	vmov	r0, r1, d8
 800a116:	f7f6 f8b7 	bl	8000288 <__aeabi_dsub>
 800a11a:	2200      	movs	r2, #0
 800a11c:	2300      	movs	r3, #0
 800a11e:	4682      	mov	sl, r0
 800a120:	468b      	mov	fp, r1
 800a122:	f7f6 fcd1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a126:	2800      	cmp	r0, #0
 800a128:	d0c1      	beq.n	800a0ae <_strtod_l+0x8de>
 800a12a:	e611      	b.n	8009d50 <_strtod_l+0x580>
 800a12c:	fffffc02 	.word	0xfffffc02
 800a130:	7ff00000 	.word	0x7ff00000
 800a134:	39500000 	.word	0x39500000
 800a138:	000fffff 	.word	0x000fffff
 800a13c:	7fefffff 	.word	0x7fefffff
 800a140:	0800c5d8 	.word	0x0800c5d8
 800a144:	4631      	mov	r1, r6
 800a146:	4628      	mov	r0, r5
 800a148:	f001 f920 	bl	800b38c <__ratio>
 800a14c:	ec59 8b10 	vmov	r8, r9, d0
 800a150:	ee10 0a10 	vmov	r0, s0
 800a154:	2200      	movs	r2, #0
 800a156:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a15a:	4649      	mov	r1, r9
 800a15c:	f7f6 fcc8 	bl	8000af0 <__aeabi_dcmple>
 800a160:	2800      	cmp	r0, #0
 800a162:	d07a      	beq.n	800a25a <_strtod_l+0xa8a>
 800a164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a166:	2b00      	cmp	r3, #0
 800a168:	d04a      	beq.n	800a200 <_strtod_l+0xa30>
 800a16a:	4b95      	ldr	r3, [pc, #596]	; (800a3c0 <_strtod_l+0xbf0>)
 800a16c:	2200      	movs	r2, #0
 800a16e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a172:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a3c0 <_strtod_l+0xbf0>
 800a176:	f04f 0800 	mov.w	r8, #0
 800a17a:	4b92      	ldr	r3, [pc, #584]	; (800a3c4 <_strtod_l+0xbf4>)
 800a17c:	403b      	ands	r3, r7
 800a17e:	930d      	str	r3, [sp, #52]	; 0x34
 800a180:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a182:	4b91      	ldr	r3, [pc, #580]	; (800a3c8 <_strtod_l+0xbf8>)
 800a184:	429a      	cmp	r2, r3
 800a186:	f040 80b0 	bne.w	800a2ea <_strtod_l+0xb1a>
 800a18a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a18e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a192:	ec4b ab10 	vmov	d0, sl, fp
 800a196:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a19a:	f001 f81f 	bl	800b1dc <__ulp>
 800a19e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a1a2:	ec53 2b10 	vmov	r2, r3, d0
 800a1a6:	f7f6 fa27 	bl	80005f8 <__aeabi_dmul>
 800a1aa:	4652      	mov	r2, sl
 800a1ac:	465b      	mov	r3, fp
 800a1ae:	f7f6 f86d 	bl	800028c <__adddf3>
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	4983      	ldr	r1, [pc, #524]	; (800a3c4 <_strtod_l+0xbf4>)
 800a1b6:	4a85      	ldr	r2, [pc, #532]	; (800a3cc <_strtod_l+0xbfc>)
 800a1b8:	4019      	ands	r1, r3
 800a1ba:	4291      	cmp	r1, r2
 800a1bc:	4682      	mov	sl, r0
 800a1be:	d960      	bls.n	800a282 <_strtod_l+0xab2>
 800a1c0:	ee18 3a90 	vmov	r3, s17
 800a1c4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d104      	bne.n	800a1d6 <_strtod_l+0xa06>
 800a1cc:	ee18 3a10 	vmov	r3, s16
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	f43f ad45 	beq.w	8009c60 <_strtod_l+0x490>
 800a1d6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a3d8 <_strtod_l+0xc08>
 800a1da:	f04f 3aff 	mov.w	sl, #4294967295
 800a1de:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f000 fcc9 	bl	800ab78 <_Bfree>
 800a1e6:	9905      	ldr	r1, [sp, #20]
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	f000 fcc5 	bl	800ab78 <_Bfree>
 800a1ee:	4631      	mov	r1, r6
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f000 fcc1 	bl	800ab78 <_Bfree>
 800a1f6:	4629      	mov	r1, r5
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	f000 fcbd 	bl	800ab78 <_Bfree>
 800a1fe:	e61a      	b.n	8009e36 <_strtod_l+0x666>
 800a200:	f1ba 0f00 	cmp.w	sl, #0
 800a204:	d11b      	bne.n	800a23e <_strtod_l+0xa6e>
 800a206:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a20a:	b9f3      	cbnz	r3, 800a24a <_strtod_l+0xa7a>
 800a20c:	4b6c      	ldr	r3, [pc, #432]	; (800a3c0 <_strtod_l+0xbf0>)
 800a20e:	2200      	movs	r2, #0
 800a210:	4640      	mov	r0, r8
 800a212:	4649      	mov	r1, r9
 800a214:	f7f6 fc62 	bl	8000adc <__aeabi_dcmplt>
 800a218:	b9d0      	cbnz	r0, 800a250 <_strtod_l+0xa80>
 800a21a:	4640      	mov	r0, r8
 800a21c:	4649      	mov	r1, r9
 800a21e:	4b6c      	ldr	r3, [pc, #432]	; (800a3d0 <_strtod_l+0xc00>)
 800a220:	2200      	movs	r2, #0
 800a222:	f7f6 f9e9 	bl	80005f8 <__aeabi_dmul>
 800a226:	4680      	mov	r8, r0
 800a228:	4689      	mov	r9, r1
 800a22a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a22e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a232:	9315      	str	r3, [sp, #84]	; 0x54
 800a234:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a238:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a23c:	e79d      	b.n	800a17a <_strtod_l+0x9aa>
 800a23e:	f1ba 0f01 	cmp.w	sl, #1
 800a242:	d102      	bne.n	800a24a <_strtod_l+0xa7a>
 800a244:	2f00      	cmp	r7, #0
 800a246:	f43f ad83 	beq.w	8009d50 <_strtod_l+0x580>
 800a24a:	4b62      	ldr	r3, [pc, #392]	; (800a3d4 <_strtod_l+0xc04>)
 800a24c:	2200      	movs	r2, #0
 800a24e:	e78e      	b.n	800a16e <_strtod_l+0x99e>
 800a250:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a3d0 <_strtod_l+0xc00>
 800a254:	f04f 0800 	mov.w	r8, #0
 800a258:	e7e7      	b.n	800a22a <_strtod_l+0xa5a>
 800a25a:	4b5d      	ldr	r3, [pc, #372]	; (800a3d0 <_strtod_l+0xc00>)
 800a25c:	4640      	mov	r0, r8
 800a25e:	4649      	mov	r1, r9
 800a260:	2200      	movs	r2, #0
 800a262:	f7f6 f9c9 	bl	80005f8 <__aeabi_dmul>
 800a266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a268:	4680      	mov	r8, r0
 800a26a:	4689      	mov	r9, r1
 800a26c:	b933      	cbnz	r3, 800a27c <_strtod_l+0xaac>
 800a26e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a272:	900e      	str	r0, [sp, #56]	; 0x38
 800a274:	930f      	str	r3, [sp, #60]	; 0x3c
 800a276:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a27a:	e7dd      	b.n	800a238 <_strtod_l+0xa68>
 800a27c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a280:	e7f9      	b.n	800a276 <_strtod_l+0xaa6>
 800a282:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a286:	9b04      	ldr	r3, [sp, #16]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d1a8      	bne.n	800a1de <_strtod_l+0xa0e>
 800a28c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a290:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a292:	0d1b      	lsrs	r3, r3, #20
 800a294:	051b      	lsls	r3, r3, #20
 800a296:	429a      	cmp	r2, r3
 800a298:	d1a1      	bne.n	800a1de <_strtod_l+0xa0e>
 800a29a:	4640      	mov	r0, r8
 800a29c:	4649      	mov	r1, r9
 800a29e:	f7f6 fc7d 	bl	8000b9c <__aeabi_d2lz>
 800a2a2:	f7f6 f97b 	bl	800059c <__aeabi_l2d>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	4640      	mov	r0, r8
 800a2ac:	4649      	mov	r1, r9
 800a2ae:	f7f5 ffeb 	bl	8000288 <__aeabi_dsub>
 800a2b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2b8:	ea43 030a 	orr.w	r3, r3, sl
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	4680      	mov	r8, r0
 800a2c0:	4689      	mov	r9, r1
 800a2c2:	d055      	beq.n	800a370 <_strtod_l+0xba0>
 800a2c4:	a336      	add	r3, pc, #216	; (adr r3, 800a3a0 <_strtod_l+0xbd0>)
 800a2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ca:	f7f6 fc07 	bl	8000adc <__aeabi_dcmplt>
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	f47f acd0 	bne.w	8009c74 <_strtod_l+0x4a4>
 800a2d4:	a334      	add	r3, pc, #208	; (adr r3, 800a3a8 <_strtod_l+0xbd8>)
 800a2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2da:	4640      	mov	r0, r8
 800a2dc:	4649      	mov	r1, r9
 800a2de:	f7f6 fc1b 	bl	8000b18 <__aeabi_dcmpgt>
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	f43f af7b 	beq.w	800a1de <_strtod_l+0xa0e>
 800a2e8:	e4c4      	b.n	8009c74 <_strtod_l+0x4a4>
 800a2ea:	9b04      	ldr	r3, [sp, #16]
 800a2ec:	b333      	cbz	r3, 800a33c <_strtod_l+0xb6c>
 800a2ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a2f4:	d822      	bhi.n	800a33c <_strtod_l+0xb6c>
 800a2f6:	a32e      	add	r3, pc, #184	; (adr r3, 800a3b0 <_strtod_l+0xbe0>)
 800a2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fc:	4640      	mov	r0, r8
 800a2fe:	4649      	mov	r1, r9
 800a300:	f7f6 fbf6 	bl	8000af0 <__aeabi_dcmple>
 800a304:	b1a0      	cbz	r0, 800a330 <_strtod_l+0xb60>
 800a306:	4649      	mov	r1, r9
 800a308:	4640      	mov	r0, r8
 800a30a:	f7f6 fc0f 	bl	8000b2c <__aeabi_d2uiz>
 800a30e:	2801      	cmp	r0, #1
 800a310:	bf38      	it	cc
 800a312:	2001      	movcc	r0, #1
 800a314:	f7f6 f8f6 	bl	8000504 <__aeabi_ui2d>
 800a318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a31a:	4680      	mov	r8, r0
 800a31c:	4689      	mov	r9, r1
 800a31e:	bb23      	cbnz	r3, 800a36a <_strtod_l+0xb9a>
 800a320:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a324:	9010      	str	r0, [sp, #64]	; 0x40
 800a326:	9311      	str	r3, [sp, #68]	; 0x44
 800a328:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a32c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a332:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a334:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a338:	1a9b      	subs	r3, r3, r2
 800a33a:	9309      	str	r3, [sp, #36]	; 0x24
 800a33c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a340:	eeb0 0a48 	vmov.f32	s0, s16
 800a344:	eef0 0a68 	vmov.f32	s1, s17
 800a348:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a34c:	f000 ff46 	bl	800b1dc <__ulp>
 800a350:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a354:	ec53 2b10 	vmov	r2, r3, d0
 800a358:	f7f6 f94e 	bl	80005f8 <__aeabi_dmul>
 800a35c:	ec53 2b18 	vmov	r2, r3, d8
 800a360:	f7f5 ff94 	bl	800028c <__adddf3>
 800a364:	4682      	mov	sl, r0
 800a366:	468b      	mov	fp, r1
 800a368:	e78d      	b.n	800a286 <_strtod_l+0xab6>
 800a36a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a36e:	e7db      	b.n	800a328 <_strtod_l+0xb58>
 800a370:	a311      	add	r3, pc, #68	; (adr r3, 800a3b8 <_strtod_l+0xbe8>)
 800a372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a376:	f7f6 fbb1 	bl	8000adc <__aeabi_dcmplt>
 800a37a:	e7b2      	b.n	800a2e2 <_strtod_l+0xb12>
 800a37c:	2300      	movs	r3, #0
 800a37e:	930a      	str	r3, [sp, #40]	; 0x28
 800a380:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a382:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a384:	6013      	str	r3, [r2, #0]
 800a386:	f7ff ba6b 	b.w	8009860 <_strtod_l+0x90>
 800a38a:	2a65      	cmp	r2, #101	; 0x65
 800a38c:	f43f ab5f 	beq.w	8009a4e <_strtod_l+0x27e>
 800a390:	2a45      	cmp	r2, #69	; 0x45
 800a392:	f43f ab5c 	beq.w	8009a4e <_strtod_l+0x27e>
 800a396:	2301      	movs	r3, #1
 800a398:	f7ff bb94 	b.w	8009ac4 <_strtod_l+0x2f4>
 800a39c:	f3af 8000 	nop.w
 800a3a0:	94a03595 	.word	0x94a03595
 800a3a4:	3fdfffff 	.word	0x3fdfffff
 800a3a8:	35afe535 	.word	0x35afe535
 800a3ac:	3fe00000 	.word	0x3fe00000
 800a3b0:	ffc00000 	.word	0xffc00000
 800a3b4:	41dfffff 	.word	0x41dfffff
 800a3b8:	94a03595 	.word	0x94a03595
 800a3bc:	3fcfffff 	.word	0x3fcfffff
 800a3c0:	3ff00000 	.word	0x3ff00000
 800a3c4:	7ff00000 	.word	0x7ff00000
 800a3c8:	7fe00000 	.word	0x7fe00000
 800a3cc:	7c9fffff 	.word	0x7c9fffff
 800a3d0:	3fe00000 	.word	0x3fe00000
 800a3d4:	bff00000 	.word	0xbff00000
 800a3d8:	7fefffff 	.word	0x7fefffff

0800a3dc <strtod>:
 800a3dc:	460a      	mov	r2, r1
 800a3de:	4601      	mov	r1, r0
 800a3e0:	4802      	ldr	r0, [pc, #8]	; (800a3ec <strtod+0x10>)
 800a3e2:	4b03      	ldr	r3, [pc, #12]	; (800a3f0 <strtod+0x14>)
 800a3e4:	6800      	ldr	r0, [r0, #0]
 800a3e6:	f7ff b9f3 	b.w	80097d0 <_strtod_l>
 800a3ea:	bf00      	nop
 800a3ec:	200000fc 	.word	0x200000fc
 800a3f0:	20000164 	.word	0x20000164

0800a3f4 <rshift>:
 800a3f4:	6903      	ldr	r3, [r0, #16]
 800a3f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a3fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a402:	f100 0414 	add.w	r4, r0, #20
 800a406:	dd45      	ble.n	800a494 <rshift+0xa0>
 800a408:	f011 011f 	ands.w	r1, r1, #31
 800a40c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a410:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a414:	d10c      	bne.n	800a430 <rshift+0x3c>
 800a416:	f100 0710 	add.w	r7, r0, #16
 800a41a:	4629      	mov	r1, r5
 800a41c:	42b1      	cmp	r1, r6
 800a41e:	d334      	bcc.n	800a48a <rshift+0x96>
 800a420:	1a9b      	subs	r3, r3, r2
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	1eea      	subs	r2, r5, #3
 800a426:	4296      	cmp	r6, r2
 800a428:	bf38      	it	cc
 800a42a:	2300      	movcc	r3, #0
 800a42c:	4423      	add	r3, r4
 800a42e:	e015      	b.n	800a45c <rshift+0x68>
 800a430:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a434:	f1c1 0820 	rsb	r8, r1, #32
 800a438:	40cf      	lsrs	r7, r1
 800a43a:	f105 0e04 	add.w	lr, r5, #4
 800a43e:	46a1      	mov	r9, r4
 800a440:	4576      	cmp	r6, lr
 800a442:	46f4      	mov	ip, lr
 800a444:	d815      	bhi.n	800a472 <rshift+0x7e>
 800a446:	1a9a      	subs	r2, r3, r2
 800a448:	0092      	lsls	r2, r2, #2
 800a44a:	3a04      	subs	r2, #4
 800a44c:	3501      	adds	r5, #1
 800a44e:	42ae      	cmp	r6, r5
 800a450:	bf38      	it	cc
 800a452:	2200      	movcc	r2, #0
 800a454:	18a3      	adds	r3, r4, r2
 800a456:	50a7      	str	r7, [r4, r2]
 800a458:	b107      	cbz	r7, 800a45c <rshift+0x68>
 800a45a:	3304      	adds	r3, #4
 800a45c:	1b1a      	subs	r2, r3, r4
 800a45e:	42a3      	cmp	r3, r4
 800a460:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a464:	bf08      	it	eq
 800a466:	2300      	moveq	r3, #0
 800a468:	6102      	str	r2, [r0, #16]
 800a46a:	bf08      	it	eq
 800a46c:	6143      	streq	r3, [r0, #20]
 800a46e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a472:	f8dc c000 	ldr.w	ip, [ip]
 800a476:	fa0c fc08 	lsl.w	ip, ip, r8
 800a47a:	ea4c 0707 	orr.w	r7, ip, r7
 800a47e:	f849 7b04 	str.w	r7, [r9], #4
 800a482:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a486:	40cf      	lsrs	r7, r1
 800a488:	e7da      	b.n	800a440 <rshift+0x4c>
 800a48a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a48e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a492:	e7c3      	b.n	800a41c <rshift+0x28>
 800a494:	4623      	mov	r3, r4
 800a496:	e7e1      	b.n	800a45c <rshift+0x68>

0800a498 <__hexdig_fun>:
 800a498:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a49c:	2b09      	cmp	r3, #9
 800a49e:	d802      	bhi.n	800a4a6 <__hexdig_fun+0xe>
 800a4a0:	3820      	subs	r0, #32
 800a4a2:	b2c0      	uxtb	r0, r0
 800a4a4:	4770      	bx	lr
 800a4a6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a4aa:	2b05      	cmp	r3, #5
 800a4ac:	d801      	bhi.n	800a4b2 <__hexdig_fun+0x1a>
 800a4ae:	3847      	subs	r0, #71	; 0x47
 800a4b0:	e7f7      	b.n	800a4a2 <__hexdig_fun+0xa>
 800a4b2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a4b6:	2b05      	cmp	r3, #5
 800a4b8:	d801      	bhi.n	800a4be <__hexdig_fun+0x26>
 800a4ba:	3827      	subs	r0, #39	; 0x27
 800a4bc:	e7f1      	b.n	800a4a2 <__hexdig_fun+0xa>
 800a4be:	2000      	movs	r0, #0
 800a4c0:	4770      	bx	lr
	...

0800a4c4 <__gethex>:
 800a4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c8:	ed2d 8b02 	vpush	{d8}
 800a4cc:	b089      	sub	sp, #36	; 0x24
 800a4ce:	ee08 0a10 	vmov	s16, r0
 800a4d2:	9304      	str	r3, [sp, #16]
 800a4d4:	4bb4      	ldr	r3, [pc, #720]	; (800a7a8 <__gethex+0x2e4>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	9301      	str	r3, [sp, #4]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	468b      	mov	fp, r1
 800a4de:	4690      	mov	r8, r2
 800a4e0:	f7f5 fe76 	bl	80001d0 <strlen>
 800a4e4:	9b01      	ldr	r3, [sp, #4]
 800a4e6:	f8db 2000 	ldr.w	r2, [fp]
 800a4ea:	4403      	add	r3, r0
 800a4ec:	4682      	mov	sl, r0
 800a4ee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a4f2:	9305      	str	r3, [sp, #20]
 800a4f4:	1c93      	adds	r3, r2, #2
 800a4f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a4fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a4fe:	32fe      	adds	r2, #254	; 0xfe
 800a500:	18d1      	adds	r1, r2, r3
 800a502:	461f      	mov	r7, r3
 800a504:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a508:	9100      	str	r1, [sp, #0]
 800a50a:	2830      	cmp	r0, #48	; 0x30
 800a50c:	d0f8      	beq.n	800a500 <__gethex+0x3c>
 800a50e:	f7ff ffc3 	bl	800a498 <__hexdig_fun>
 800a512:	4604      	mov	r4, r0
 800a514:	2800      	cmp	r0, #0
 800a516:	d13a      	bne.n	800a58e <__gethex+0xca>
 800a518:	9901      	ldr	r1, [sp, #4]
 800a51a:	4652      	mov	r2, sl
 800a51c:	4638      	mov	r0, r7
 800a51e:	f001 f86f 	bl	800b600 <strncmp>
 800a522:	4605      	mov	r5, r0
 800a524:	2800      	cmp	r0, #0
 800a526:	d168      	bne.n	800a5fa <__gethex+0x136>
 800a528:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a52c:	eb07 060a 	add.w	r6, r7, sl
 800a530:	f7ff ffb2 	bl	800a498 <__hexdig_fun>
 800a534:	2800      	cmp	r0, #0
 800a536:	d062      	beq.n	800a5fe <__gethex+0x13a>
 800a538:	4633      	mov	r3, r6
 800a53a:	7818      	ldrb	r0, [r3, #0]
 800a53c:	2830      	cmp	r0, #48	; 0x30
 800a53e:	461f      	mov	r7, r3
 800a540:	f103 0301 	add.w	r3, r3, #1
 800a544:	d0f9      	beq.n	800a53a <__gethex+0x76>
 800a546:	f7ff ffa7 	bl	800a498 <__hexdig_fun>
 800a54a:	2301      	movs	r3, #1
 800a54c:	fab0 f480 	clz	r4, r0
 800a550:	0964      	lsrs	r4, r4, #5
 800a552:	4635      	mov	r5, r6
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	463a      	mov	r2, r7
 800a558:	4616      	mov	r6, r2
 800a55a:	3201      	adds	r2, #1
 800a55c:	7830      	ldrb	r0, [r6, #0]
 800a55e:	f7ff ff9b 	bl	800a498 <__hexdig_fun>
 800a562:	2800      	cmp	r0, #0
 800a564:	d1f8      	bne.n	800a558 <__gethex+0x94>
 800a566:	9901      	ldr	r1, [sp, #4]
 800a568:	4652      	mov	r2, sl
 800a56a:	4630      	mov	r0, r6
 800a56c:	f001 f848 	bl	800b600 <strncmp>
 800a570:	b980      	cbnz	r0, 800a594 <__gethex+0xd0>
 800a572:	b94d      	cbnz	r5, 800a588 <__gethex+0xc4>
 800a574:	eb06 050a 	add.w	r5, r6, sl
 800a578:	462a      	mov	r2, r5
 800a57a:	4616      	mov	r6, r2
 800a57c:	3201      	adds	r2, #1
 800a57e:	7830      	ldrb	r0, [r6, #0]
 800a580:	f7ff ff8a 	bl	800a498 <__hexdig_fun>
 800a584:	2800      	cmp	r0, #0
 800a586:	d1f8      	bne.n	800a57a <__gethex+0xb6>
 800a588:	1bad      	subs	r5, r5, r6
 800a58a:	00ad      	lsls	r5, r5, #2
 800a58c:	e004      	b.n	800a598 <__gethex+0xd4>
 800a58e:	2400      	movs	r4, #0
 800a590:	4625      	mov	r5, r4
 800a592:	e7e0      	b.n	800a556 <__gethex+0x92>
 800a594:	2d00      	cmp	r5, #0
 800a596:	d1f7      	bne.n	800a588 <__gethex+0xc4>
 800a598:	7833      	ldrb	r3, [r6, #0]
 800a59a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a59e:	2b50      	cmp	r3, #80	; 0x50
 800a5a0:	d13b      	bne.n	800a61a <__gethex+0x156>
 800a5a2:	7873      	ldrb	r3, [r6, #1]
 800a5a4:	2b2b      	cmp	r3, #43	; 0x2b
 800a5a6:	d02c      	beq.n	800a602 <__gethex+0x13e>
 800a5a8:	2b2d      	cmp	r3, #45	; 0x2d
 800a5aa:	d02e      	beq.n	800a60a <__gethex+0x146>
 800a5ac:	1c71      	adds	r1, r6, #1
 800a5ae:	f04f 0900 	mov.w	r9, #0
 800a5b2:	7808      	ldrb	r0, [r1, #0]
 800a5b4:	f7ff ff70 	bl	800a498 <__hexdig_fun>
 800a5b8:	1e43      	subs	r3, r0, #1
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	2b18      	cmp	r3, #24
 800a5be:	d82c      	bhi.n	800a61a <__gethex+0x156>
 800a5c0:	f1a0 0210 	sub.w	r2, r0, #16
 800a5c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a5c8:	f7ff ff66 	bl	800a498 <__hexdig_fun>
 800a5cc:	1e43      	subs	r3, r0, #1
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	2b18      	cmp	r3, #24
 800a5d2:	d91d      	bls.n	800a610 <__gethex+0x14c>
 800a5d4:	f1b9 0f00 	cmp.w	r9, #0
 800a5d8:	d000      	beq.n	800a5dc <__gethex+0x118>
 800a5da:	4252      	negs	r2, r2
 800a5dc:	4415      	add	r5, r2
 800a5de:	f8cb 1000 	str.w	r1, [fp]
 800a5e2:	b1e4      	cbz	r4, 800a61e <__gethex+0x15a>
 800a5e4:	9b00      	ldr	r3, [sp, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	bf14      	ite	ne
 800a5ea:	2700      	movne	r7, #0
 800a5ec:	2706      	moveq	r7, #6
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	b009      	add	sp, #36	; 0x24
 800a5f2:	ecbd 8b02 	vpop	{d8}
 800a5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5fa:	463e      	mov	r6, r7
 800a5fc:	4625      	mov	r5, r4
 800a5fe:	2401      	movs	r4, #1
 800a600:	e7ca      	b.n	800a598 <__gethex+0xd4>
 800a602:	f04f 0900 	mov.w	r9, #0
 800a606:	1cb1      	adds	r1, r6, #2
 800a608:	e7d3      	b.n	800a5b2 <__gethex+0xee>
 800a60a:	f04f 0901 	mov.w	r9, #1
 800a60e:	e7fa      	b.n	800a606 <__gethex+0x142>
 800a610:	230a      	movs	r3, #10
 800a612:	fb03 0202 	mla	r2, r3, r2, r0
 800a616:	3a10      	subs	r2, #16
 800a618:	e7d4      	b.n	800a5c4 <__gethex+0x100>
 800a61a:	4631      	mov	r1, r6
 800a61c:	e7df      	b.n	800a5de <__gethex+0x11a>
 800a61e:	1bf3      	subs	r3, r6, r7
 800a620:	3b01      	subs	r3, #1
 800a622:	4621      	mov	r1, r4
 800a624:	2b07      	cmp	r3, #7
 800a626:	dc0b      	bgt.n	800a640 <__gethex+0x17c>
 800a628:	ee18 0a10 	vmov	r0, s16
 800a62c:	f000 fa64 	bl	800aaf8 <_Balloc>
 800a630:	4604      	mov	r4, r0
 800a632:	b940      	cbnz	r0, 800a646 <__gethex+0x182>
 800a634:	4b5d      	ldr	r3, [pc, #372]	; (800a7ac <__gethex+0x2e8>)
 800a636:	4602      	mov	r2, r0
 800a638:	21de      	movs	r1, #222	; 0xde
 800a63a:	485d      	ldr	r0, [pc, #372]	; (800a7b0 <__gethex+0x2ec>)
 800a63c:	f001 f802 	bl	800b644 <__assert_func>
 800a640:	3101      	adds	r1, #1
 800a642:	105b      	asrs	r3, r3, #1
 800a644:	e7ee      	b.n	800a624 <__gethex+0x160>
 800a646:	f100 0914 	add.w	r9, r0, #20
 800a64a:	f04f 0b00 	mov.w	fp, #0
 800a64e:	f1ca 0301 	rsb	r3, sl, #1
 800a652:	f8cd 9008 	str.w	r9, [sp, #8]
 800a656:	f8cd b000 	str.w	fp, [sp]
 800a65a:	9306      	str	r3, [sp, #24]
 800a65c:	42b7      	cmp	r7, r6
 800a65e:	d340      	bcc.n	800a6e2 <__gethex+0x21e>
 800a660:	9802      	ldr	r0, [sp, #8]
 800a662:	9b00      	ldr	r3, [sp, #0]
 800a664:	f840 3b04 	str.w	r3, [r0], #4
 800a668:	eba0 0009 	sub.w	r0, r0, r9
 800a66c:	1080      	asrs	r0, r0, #2
 800a66e:	0146      	lsls	r6, r0, #5
 800a670:	6120      	str	r0, [r4, #16]
 800a672:	4618      	mov	r0, r3
 800a674:	f000 fb32 	bl	800acdc <__hi0bits>
 800a678:	1a30      	subs	r0, r6, r0
 800a67a:	f8d8 6000 	ldr.w	r6, [r8]
 800a67e:	42b0      	cmp	r0, r6
 800a680:	dd63      	ble.n	800a74a <__gethex+0x286>
 800a682:	1b87      	subs	r7, r0, r6
 800a684:	4639      	mov	r1, r7
 800a686:	4620      	mov	r0, r4
 800a688:	f000 fed6 	bl	800b438 <__any_on>
 800a68c:	4682      	mov	sl, r0
 800a68e:	b1a8      	cbz	r0, 800a6bc <__gethex+0x1f8>
 800a690:	1e7b      	subs	r3, r7, #1
 800a692:	1159      	asrs	r1, r3, #5
 800a694:	f003 021f 	and.w	r2, r3, #31
 800a698:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a69c:	f04f 0a01 	mov.w	sl, #1
 800a6a0:	fa0a f202 	lsl.w	r2, sl, r2
 800a6a4:	420a      	tst	r2, r1
 800a6a6:	d009      	beq.n	800a6bc <__gethex+0x1f8>
 800a6a8:	4553      	cmp	r3, sl
 800a6aa:	dd05      	ble.n	800a6b8 <__gethex+0x1f4>
 800a6ac:	1eb9      	subs	r1, r7, #2
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	f000 fec2 	bl	800b438 <__any_on>
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	d145      	bne.n	800a744 <__gethex+0x280>
 800a6b8:	f04f 0a02 	mov.w	sl, #2
 800a6bc:	4639      	mov	r1, r7
 800a6be:	4620      	mov	r0, r4
 800a6c0:	f7ff fe98 	bl	800a3f4 <rshift>
 800a6c4:	443d      	add	r5, r7
 800a6c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6ca:	42ab      	cmp	r3, r5
 800a6cc:	da4c      	bge.n	800a768 <__gethex+0x2a4>
 800a6ce:	ee18 0a10 	vmov	r0, s16
 800a6d2:	4621      	mov	r1, r4
 800a6d4:	f000 fa50 	bl	800ab78 <_Bfree>
 800a6d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6da:	2300      	movs	r3, #0
 800a6dc:	6013      	str	r3, [r2, #0]
 800a6de:	27a3      	movs	r7, #163	; 0xa3
 800a6e0:	e785      	b.n	800a5ee <__gethex+0x12a>
 800a6e2:	1e73      	subs	r3, r6, #1
 800a6e4:	9a05      	ldr	r2, [sp, #20]
 800a6e6:	9303      	str	r3, [sp, #12]
 800a6e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d019      	beq.n	800a724 <__gethex+0x260>
 800a6f0:	f1bb 0f20 	cmp.w	fp, #32
 800a6f4:	d107      	bne.n	800a706 <__gethex+0x242>
 800a6f6:	9b02      	ldr	r3, [sp, #8]
 800a6f8:	9a00      	ldr	r2, [sp, #0]
 800a6fa:	f843 2b04 	str.w	r2, [r3], #4
 800a6fe:	9302      	str	r3, [sp, #8]
 800a700:	2300      	movs	r3, #0
 800a702:	9300      	str	r3, [sp, #0]
 800a704:	469b      	mov	fp, r3
 800a706:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a70a:	f7ff fec5 	bl	800a498 <__hexdig_fun>
 800a70e:	9b00      	ldr	r3, [sp, #0]
 800a710:	f000 000f 	and.w	r0, r0, #15
 800a714:	fa00 f00b 	lsl.w	r0, r0, fp
 800a718:	4303      	orrs	r3, r0
 800a71a:	9300      	str	r3, [sp, #0]
 800a71c:	f10b 0b04 	add.w	fp, fp, #4
 800a720:	9b03      	ldr	r3, [sp, #12]
 800a722:	e00d      	b.n	800a740 <__gethex+0x27c>
 800a724:	9b03      	ldr	r3, [sp, #12]
 800a726:	9a06      	ldr	r2, [sp, #24]
 800a728:	4413      	add	r3, r2
 800a72a:	42bb      	cmp	r3, r7
 800a72c:	d3e0      	bcc.n	800a6f0 <__gethex+0x22c>
 800a72e:	4618      	mov	r0, r3
 800a730:	9901      	ldr	r1, [sp, #4]
 800a732:	9307      	str	r3, [sp, #28]
 800a734:	4652      	mov	r2, sl
 800a736:	f000 ff63 	bl	800b600 <strncmp>
 800a73a:	9b07      	ldr	r3, [sp, #28]
 800a73c:	2800      	cmp	r0, #0
 800a73e:	d1d7      	bne.n	800a6f0 <__gethex+0x22c>
 800a740:	461e      	mov	r6, r3
 800a742:	e78b      	b.n	800a65c <__gethex+0x198>
 800a744:	f04f 0a03 	mov.w	sl, #3
 800a748:	e7b8      	b.n	800a6bc <__gethex+0x1f8>
 800a74a:	da0a      	bge.n	800a762 <__gethex+0x29e>
 800a74c:	1a37      	subs	r7, r6, r0
 800a74e:	4621      	mov	r1, r4
 800a750:	ee18 0a10 	vmov	r0, s16
 800a754:	463a      	mov	r2, r7
 800a756:	f000 fc2b 	bl	800afb0 <__lshift>
 800a75a:	1bed      	subs	r5, r5, r7
 800a75c:	4604      	mov	r4, r0
 800a75e:	f100 0914 	add.w	r9, r0, #20
 800a762:	f04f 0a00 	mov.w	sl, #0
 800a766:	e7ae      	b.n	800a6c6 <__gethex+0x202>
 800a768:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a76c:	42a8      	cmp	r0, r5
 800a76e:	dd72      	ble.n	800a856 <__gethex+0x392>
 800a770:	1b45      	subs	r5, r0, r5
 800a772:	42ae      	cmp	r6, r5
 800a774:	dc36      	bgt.n	800a7e4 <__gethex+0x320>
 800a776:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a77a:	2b02      	cmp	r3, #2
 800a77c:	d02a      	beq.n	800a7d4 <__gethex+0x310>
 800a77e:	2b03      	cmp	r3, #3
 800a780:	d02c      	beq.n	800a7dc <__gethex+0x318>
 800a782:	2b01      	cmp	r3, #1
 800a784:	d11c      	bne.n	800a7c0 <__gethex+0x2fc>
 800a786:	42ae      	cmp	r6, r5
 800a788:	d11a      	bne.n	800a7c0 <__gethex+0x2fc>
 800a78a:	2e01      	cmp	r6, #1
 800a78c:	d112      	bne.n	800a7b4 <__gethex+0x2f0>
 800a78e:	9a04      	ldr	r2, [sp, #16]
 800a790:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a794:	6013      	str	r3, [r2, #0]
 800a796:	2301      	movs	r3, #1
 800a798:	6123      	str	r3, [r4, #16]
 800a79a:	f8c9 3000 	str.w	r3, [r9]
 800a79e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7a0:	2762      	movs	r7, #98	; 0x62
 800a7a2:	601c      	str	r4, [r3, #0]
 800a7a4:	e723      	b.n	800a5ee <__gethex+0x12a>
 800a7a6:	bf00      	nop
 800a7a8:	0800c678 	.word	0x0800c678
 800a7ac:	0800c600 	.word	0x0800c600
 800a7b0:	0800c611 	.word	0x0800c611
 800a7b4:	1e71      	subs	r1, r6, #1
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	f000 fe3e 	bl	800b438 <__any_on>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	d1e6      	bne.n	800a78e <__gethex+0x2ca>
 800a7c0:	ee18 0a10 	vmov	r0, s16
 800a7c4:	4621      	mov	r1, r4
 800a7c6:	f000 f9d7 	bl	800ab78 <_Bfree>
 800a7ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	6013      	str	r3, [r2, #0]
 800a7d0:	2750      	movs	r7, #80	; 0x50
 800a7d2:	e70c      	b.n	800a5ee <__gethex+0x12a>
 800a7d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d1f2      	bne.n	800a7c0 <__gethex+0x2fc>
 800a7da:	e7d8      	b.n	800a78e <__gethex+0x2ca>
 800a7dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1d5      	bne.n	800a78e <__gethex+0x2ca>
 800a7e2:	e7ed      	b.n	800a7c0 <__gethex+0x2fc>
 800a7e4:	1e6f      	subs	r7, r5, #1
 800a7e6:	f1ba 0f00 	cmp.w	sl, #0
 800a7ea:	d131      	bne.n	800a850 <__gethex+0x38c>
 800a7ec:	b127      	cbz	r7, 800a7f8 <__gethex+0x334>
 800a7ee:	4639      	mov	r1, r7
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f000 fe21 	bl	800b438 <__any_on>
 800a7f6:	4682      	mov	sl, r0
 800a7f8:	117b      	asrs	r3, r7, #5
 800a7fa:	2101      	movs	r1, #1
 800a7fc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a800:	f007 071f 	and.w	r7, r7, #31
 800a804:	fa01 f707 	lsl.w	r7, r1, r7
 800a808:	421f      	tst	r7, r3
 800a80a:	4629      	mov	r1, r5
 800a80c:	4620      	mov	r0, r4
 800a80e:	bf18      	it	ne
 800a810:	f04a 0a02 	orrne.w	sl, sl, #2
 800a814:	1b76      	subs	r6, r6, r5
 800a816:	f7ff fded 	bl	800a3f4 <rshift>
 800a81a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a81e:	2702      	movs	r7, #2
 800a820:	f1ba 0f00 	cmp.w	sl, #0
 800a824:	d048      	beq.n	800a8b8 <__gethex+0x3f4>
 800a826:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	d015      	beq.n	800a85a <__gethex+0x396>
 800a82e:	2b03      	cmp	r3, #3
 800a830:	d017      	beq.n	800a862 <__gethex+0x39e>
 800a832:	2b01      	cmp	r3, #1
 800a834:	d109      	bne.n	800a84a <__gethex+0x386>
 800a836:	f01a 0f02 	tst.w	sl, #2
 800a83a:	d006      	beq.n	800a84a <__gethex+0x386>
 800a83c:	f8d9 0000 	ldr.w	r0, [r9]
 800a840:	ea4a 0a00 	orr.w	sl, sl, r0
 800a844:	f01a 0f01 	tst.w	sl, #1
 800a848:	d10e      	bne.n	800a868 <__gethex+0x3a4>
 800a84a:	f047 0710 	orr.w	r7, r7, #16
 800a84e:	e033      	b.n	800a8b8 <__gethex+0x3f4>
 800a850:	f04f 0a01 	mov.w	sl, #1
 800a854:	e7d0      	b.n	800a7f8 <__gethex+0x334>
 800a856:	2701      	movs	r7, #1
 800a858:	e7e2      	b.n	800a820 <__gethex+0x35c>
 800a85a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a85c:	f1c3 0301 	rsb	r3, r3, #1
 800a860:	9315      	str	r3, [sp, #84]	; 0x54
 800a862:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a864:	2b00      	cmp	r3, #0
 800a866:	d0f0      	beq.n	800a84a <__gethex+0x386>
 800a868:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a86c:	f104 0314 	add.w	r3, r4, #20
 800a870:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a874:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a878:	f04f 0c00 	mov.w	ip, #0
 800a87c:	4618      	mov	r0, r3
 800a87e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a882:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a886:	d01c      	beq.n	800a8c2 <__gethex+0x3fe>
 800a888:	3201      	adds	r2, #1
 800a88a:	6002      	str	r2, [r0, #0]
 800a88c:	2f02      	cmp	r7, #2
 800a88e:	f104 0314 	add.w	r3, r4, #20
 800a892:	d13f      	bne.n	800a914 <__gethex+0x450>
 800a894:	f8d8 2000 	ldr.w	r2, [r8]
 800a898:	3a01      	subs	r2, #1
 800a89a:	42b2      	cmp	r2, r6
 800a89c:	d10a      	bne.n	800a8b4 <__gethex+0x3f0>
 800a89e:	1171      	asrs	r1, r6, #5
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a8a6:	f006 061f 	and.w	r6, r6, #31
 800a8aa:	fa02 f606 	lsl.w	r6, r2, r6
 800a8ae:	421e      	tst	r6, r3
 800a8b0:	bf18      	it	ne
 800a8b2:	4617      	movne	r7, r2
 800a8b4:	f047 0720 	orr.w	r7, r7, #32
 800a8b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8ba:	601c      	str	r4, [r3, #0]
 800a8bc:	9b04      	ldr	r3, [sp, #16]
 800a8be:	601d      	str	r5, [r3, #0]
 800a8c0:	e695      	b.n	800a5ee <__gethex+0x12a>
 800a8c2:	4299      	cmp	r1, r3
 800a8c4:	f843 cc04 	str.w	ip, [r3, #-4]
 800a8c8:	d8d8      	bhi.n	800a87c <__gethex+0x3b8>
 800a8ca:	68a3      	ldr	r3, [r4, #8]
 800a8cc:	459b      	cmp	fp, r3
 800a8ce:	db19      	blt.n	800a904 <__gethex+0x440>
 800a8d0:	6861      	ldr	r1, [r4, #4]
 800a8d2:	ee18 0a10 	vmov	r0, s16
 800a8d6:	3101      	adds	r1, #1
 800a8d8:	f000 f90e 	bl	800aaf8 <_Balloc>
 800a8dc:	4681      	mov	r9, r0
 800a8de:	b918      	cbnz	r0, 800a8e8 <__gethex+0x424>
 800a8e0:	4b1a      	ldr	r3, [pc, #104]	; (800a94c <__gethex+0x488>)
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	2184      	movs	r1, #132	; 0x84
 800a8e6:	e6a8      	b.n	800a63a <__gethex+0x176>
 800a8e8:	6922      	ldr	r2, [r4, #16]
 800a8ea:	3202      	adds	r2, #2
 800a8ec:	f104 010c 	add.w	r1, r4, #12
 800a8f0:	0092      	lsls	r2, r2, #2
 800a8f2:	300c      	adds	r0, #12
 800a8f4:	f7fe ff3a 	bl	800976c <memcpy>
 800a8f8:	4621      	mov	r1, r4
 800a8fa:	ee18 0a10 	vmov	r0, s16
 800a8fe:	f000 f93b 	bl	800ab78 <_Bfree>
 800a902:	464c      	mov	r4, r9
 800a904:	6923      	ldr	r3, [r4, #16]
 800a906:	1c5a      	adds	r2, r3, #1
 800a908:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a90c:	6122      	str	r2, [r4, #16]
 800a90e:	2201      	movs	r2, #1
 800a910:	615a      	str	r2, [r3, #20]
 800a912:	e7bb      	b.n	800a88c <__gethex+0x3c8>
 800a914:	6922      	ldr	r2, [r4, #16]
 800a916:	455a      	cmp	r2, fp
 800a918:	dd0b      	ble.n	800a932 <__gethex+0x46e>
 800a91a:	2101      	movs	r1, #1
 800a91c:	4620      	mov	r0, r4
 800a91e:	f7ff fd69 	bl	800a3f4 <rshift>
 800a922:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a926:	3501      	adds	r5, #1
 800a928:	42ab      	cmp	r3, r5
 800a92a:	f6ff aed0 	blt.w	800a6ce <__gethex+0x20a>
 800a92e:	2701      	movs	r7, #1
 800a930:	e7c0      	b.n	800a8b4 <__gethex+0x3f0>
 800a932:	f016 061f 	ands.w	r6, r6, #31
 800a936:	d0fa      	beq.n	800a92e <__gethex+0x46a>
 800a938:	4453      	add	r3, sl
 800a93a:	f1c6 0620 	rsb	r6, r6, #32
 800a93e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a942:	f000 f9cb 	bl	800acdc <__hi0bits>
 800a946:	42b0      	cmp	r0, r6
 800a948:	dbe7      	blt.n	800a91a <__gethex+0x456>
 800a94a:	e7f0      	b.n	800a92e <__gethex+0x46a>
 800a94c:	0800c600 	.word	0x0800c600

0800a950 <L_shift>:
 800a950:	f1c2 0208 	rsb	r2, r2, #8
 800a954:	0092      	lsls	r2, r2, #2
 800a956:	b570      	push	{r4, r5, r6, lr}
 800a958:	f1c2 0620 	rsb	r6, r2, #32
 800a95c:	6843      	ldr	r3, [r0, #4]
 800a95e:	6804      	ldr	r4, [r0, #0]
 800a960:	fa03 f506 	lsl.w	r5, r3, r6
 800a964:	432c      	orrs	r4, r5
 800a966:	40d3      	lsrs	r3, r2
 800a968:	6004      	str	r4, [r0, #0]
 800a96a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a96e:	4288      	cmp	r0, r1
 800a970:	d3f4      	bcc.n	800a95c <L_shift+0xc>
 800a972:	bd70      	pop	{r4, r5, r6, pc}

0800a974 <__match>:
 800a974:	b530      	push	{r4, r5, lr}
 800a976:	6803      	ldr	r3, [r0, #0]
 800a978:	3301      	adds	r3, #1
 800a97a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a97e:	b914      	cbnz	r4, 800a986 <__match+0x12>
 800a980:	6003      	str	r3, [r0, #0]
 800a982:	2001      	movs	r0, #1
 800a984:	bd30      	pop	{r4, r5, pc}
 800a986:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a98a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a98e:	2d19      	cmp	r5, #25
 800a990:	bf98      	it	ls
 800a992:	3220      	addls	r2, #32
 800a994:	42a2      	cmp	r2, r4
 800a996:	d0f0      	beq.n	800a97a <__match+0x6>
 800a998:	2000      	movs	r0, #0
 800a99a:	e7f3      	b.n	800a984 <__match+0x10>

0800a99c <__hexnan>:
 800a99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a0:	680b      	ldr	r3, [r1, #0]
 800a9a2:	115e      	asrs	r6, r3, #5
 800a9a4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a9a8:	f013 031f 	ands.w	r3, r3, #31
 800a9ac:	b087      	sub	sp, #28
 800a9ae:	bf18      	it	ne
 800a9b0:	3604      	addne	r6, #4
 800a9b2:	2500      	movs	r5, #0
 800a9b4:	1f37      	subs	r7, r6, #4
 800a9b6:	4690      	mov	r8, r2
 800a9b8:	6802      	ldr	r2, [r0, #0]
 800a9ba:	9301      	str	r3, [sp, #4]
 800a9bc:	4682      	mov	sl, r0
 800a9be:	f846 5c04 	str.w	r5, [r6, #-4]
 800a9c2:	46b9      	mov	r9, r7
 800a9c4:	463c      	mov	r4, r7
 800a9c6:	9502      	str	r5, [sp, #8]
 800a9c8:	46ab      	mov	fp, r5
 800a9ca:	7851      	ldrb	r1, [r2, #1]
 800a9cc:	1c53      	adds	r3, r2, #1
 800a9ce:	9303      	str	r3, [sp, #12]
 800a9d0:	b341      	cbz	r1, 800aa24 <__hexnan+0x88>
 800a9d2:	4608      	mov	r0, r1
 800a9d4:	9205      	str	r2, [sp, #20]
 800a9d6:	9104      	str	r1, [sp, #16]
 800a9d8:	f7ff fd5e 	bl	800a498 <__hexdig_fun>
 800a9dc:	2800      	cmp	r0, #0
 800a9de:	d14f      	bne.n	800aa80 <__hexnan+0xe4>
 800a9e0:	9904      	ldr	r1, [sp, #16]
 800a9e2:	9a05      	ldr	r2, [sp, #20]
 800a9e4:	2920      	cmp	r1, #32
 800a9e6:	d818      	bhi.n	800aa1a <__hexnan+0x7e>
 800a9e8:	9b02      	ldr	r3, [sp, #8]
 800a9ea:	459b      	cmp	fp, r3
 800a9ec:	dd13      	ble.n	800aa16 <__hexnan+0x7a>
 800a9ee:	454c      	cmp	r4, r9
 800a9f0:	d206      	bcs.n	800aa00 <__hexnan+0x64>
 800a9f2:	2d07      	cmp	r5, #7
 800a9f4:	dc04      	bgt.n	800aa00 <__hexnan+0x64>
 800a9f6:	462a      	mov	r2, r5
 800a9f8:	4649      	mov	r1, r9
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f7ff ffa8 	bl	800a950 <L_shift>
 800aa00:	4544      	cmp	r4, r8
 800aa02:	d950      	bls.n	800aaa6 <__hexnan+0x10a>
 800aa04:	2300      	movs	r3, #0
 800aa06:	f1a4 0904 	sub.w	r9, r4, #4
 800aa0a:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa0e:	f8cd b008 	str.w	fp, [sp, #8]
 800aa12:	464c      	mov	r4, r9
 800aa14:	461d      	mov	r5, r3
 800aa16:	9a03      	ldr	r2, [sp, #12]
 800aa18:	e7d7      	b.n	800a9ca <__hexnan+0x2e>
 800aa1a:	2929      	cmp	r1, #41	; 0x29
 800aa1c:	d156      	bne.n	800aacc <__hexnan+0x130>
 800aa1e:	3202      	adds	r2, #2
 800aa20:	f8ca 2000 	str.w	r2, [sl]
 800aa24:	f1bb 0f00 	cmp.w	fp, #0
 800aa28:	d050      	beq.n	800aacc <__hexnan+0x130>
 800aa2a:	454c      	cmp	r4, r9
 800aa2c:	d206      	bcs.n	800aa3c <__hexnan+0xa0>
 800aa2e:	2d07      	cmp	r5, #7
 800aa30:	dc04      	bgt.n	800aa3c <__hexnan+0xa0>
 800aa32:	462a      	mov	r2, r5
 800aa34:	4649      	mov	r1, r9
 800aa36:	4620      	mov	r0, r4
 800aa38:	f7ff ff8a 	bl	800a950 <L_shift>
 800aa3c:	4544      	cmp	r4, r8
 800aa3e:	d934      	bls.n	800aaaa <__hexnan+0x10e>
 800aa40:	f1a8 0204 	sub.w	r2, r8, #4
 800aa44:	4623      	mov	r3, r4
 800aa46:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa4a:	f842 1f04 	str.w	r1, [r2, #4]!
 800aa4e:	429f      	cmp	r7, r3
 800aa50:	d2f9      	bcs.n	800aa46 <__hexnan+0xaa>
 800aa52:	1b3b      	subs	r3, r7, r4
 800aa54:	f023 0303 	bic.w	r3, r3, #3
 800aa58:	3304      	adds	r3, #4
 800aa5a:	3401      	adds	r4, #1
 800aa5c:	3e03      	subs	r6, #3
 800aa5e:	42b4      	cmp	r4, r6
 800aa60:	bf88      	it	hi
 800aa62:	2304      	movhi	r3, #4
 800aa64:	4443      	add	r3, r8
 800aa66:	2200      	movs	r2, #0
 800aa68:	f843 2b04 	str.w	r2, [r3], #4
 800aa6c:	429f      	cmp	r7, r3
 800aa6e:	d2fb      	bcs.n	800aa68 <__hexnan+0xcc>
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	b91b      	cbnz	r3, 800aa7c <__hexnan+0xe0>
 800aa74:	4547      	cmp	r7, r8
 800aa76:	d127      	bne.n	800aac8 <__hexnan+0x12c>
 800aa78:	2301      	movs	r3, #1
 800aa7a:	603b      	str	r3, [r7, #0]
 800aa7c:	2005      	movs	r0, #5
 800aa7e:	e026      	b.n	800aace <__hexnan+0x132>
 800aa80:	3501      	adds	r5, #1
 800aa82:	2d08      	cmp	r5, #8
 800aa84:	f10b 0b01 	add.w	fp, fp, #1
 800aa88:	dd06      	ble.n	800aa98 <__hexnan+0xfc>
 800aa8a:	4544      	cmp	r4, r8
 800aa8c:	d9c3      	bls.n	800aa16 <__hexnan+0x7a>
 800aa8e:	2300      	movs	r3, #0
 800aa90:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa94:	2501      	movs	r5, #1
 800aa96:	3c04      	subs	r4, #4
 800aa98:	6822      	ldr	r2, [r4, #0]
 800aa9a:	f000 000f 	and.w	r0, r0, #15
 800aa9e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aaa2:	6022      	str	r2, [r4, #0]
 800aaa4:	e7b7      	b.n	800aa16 <__hexnan+0x7a>
 800aaa6:	2508      	movs	r5, #8
 800aaa8:	e7b5      	b.n	800aa16 <__hexnan+0x7a>
 800aaaa:	9b01      	ldr	r3, [sp, #4]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d0df      	beq.n	800aa70 <__hexnan+0xd4>
 800aab0:	f04f 32ff 	mov.w	r2, #4294967295
 800aab4:	f1c3 0320 	rsb	r3, r3, #32
 800aab8:	fa22 f303 	lsr.w	r3, r2, r3
 800aabc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aac0:	401a      	ands	r2, r3
 800aac2:	f846 2c04 	str.w	r2, [r6, #-4]
 800aac6:	e7d3      	b.n	800aa70 <__hexnan+0xd4>
 800aac8:	3f04      	subs	r7, #4
 800aaca:	e7d1      	b.n	800aa70 <__hexnan+0xd4>
 800aacc:	2004      	movs	r0, #4
 800aace:	b007      	add	sp, #28
 800aad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aad4 <__ascii_mbtowc>:
 800aad4:	b082      	sub	sp, #8
 800aad6:	b901      	cbnz	r1, 800aada <__ascii_mbtowc+0x6>
 800aad8:	a901      	add	r1, sp, #4
 800aada:	b142      	cbz	r2, 800aaee <__ascii_mbtowc+0x1a>
 800aadc:	b14b      	cbz	r3, 800aaf2 <__ascii_mbtowc+0x1e>
 800aade:	7813      	ldrb	r3, [r2, #0]
 800aae0:	600b      	str	r3, [r1, #0]
 800aae2:	7812      	ldrb	r2, [r2, #0]
 800aae4:	1e10      	subs	r0, r2, #0
 800aae6:	bf18      	it	ne
 800aae8:	2001      	movne	r0, #1
 800aaea:	b002      	add	sp, #8
 800aaec:	4770      	bx	lr
 800aaee:	4610      	mov	r0, r2
 800aaf0:	e7fb      	b.n	800aaea <__ascii_mbtowc+0x16>
 800aaf2:	f06f 0001 	mvn.w	r0, #1
 800aaf6:	e7f8      	b.n	800aaea <__ascii_mbtowc+0x16>

0800aaf8 <_Balloc>:
 800aaf8:	b570      	push	{r4, r5, r6, lr}
 800aafa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aafc:	4604      	mov	r4, r0
 800aafe:	460d      	mov	r5, r1
 800ab00:	b976      	cbnz	r6, 800ab20 <_Balloc+0x28>
 800ab02:	2010      	movs	r0, #16
 800ab04:	f000 fdce 	bl	800b6a4 <malloc>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	6260      	str	r0, [r4, #36]	; 0x24
 800ab0c:	b920      	cbnz	r0, 800ab18 <_Balloc+0x20>
 800ab0e:	4b18      	ldr	r3, [pc, #96]	; (800ab70 <_Balloc+0x78>)
 800ab10:	4818      	ldr	r0, [pc, #96]	; (800ab74 <_Balloc+0x7c>)
 800ab12:	2166      	movs	r1, #102	; 0x66
 800ab14:	f000 fd96 	bl	800b644 <__assert_func>
 800ab18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab1c:	6006      	str	r6, [r0, #0]
 800ab1e:	60c6      	str	r6, [r0, #12]
 800ab20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab22:	68f3      	ldr	r3, [r6, #12]
 800ab24:	b183      	cbz	r3, 800ab48 <_Balloc+0x50>
 800ab26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab2e:	b9b8      	cbnz	r0, 800ab60 <_Balloc+0x68>
 800ab30:	2101      	movs	r1, #1
 800ab32:	fa01 f605 	lsl.w	r6, r1, r5
 800ab36:	1d72      	adds	r2, r6, #5
 800ab38:	0092      	lsls	r2, r2, #2
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f000 fc9d 	bl	800b47a <_calloc_r>
 800ab40:	b160      	cbz	r0, 800ab5c <_Balloc+0x64>
 800ab42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab46:	e00e      	b.n	800ab66 <_Balloc+0x6e>
 800ab48:	2221      	movs	r2, #33	; 0x21
 800ab4a:	2104      	movs	r1, #4
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f000 fc94 	bl	800b47a <_calloc_r>
 800ab52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab54:	60f0      	str	r0, [r6, #12]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d1e4      	bne.n	800ab26 <_Balloc+0x2e>
 800ab5c:	2000      	movs	r0, #0
 800ab5e:	bd70      	pop	{r4, r5, r6, pc}
 800ab60:	6802      	ldr	r2, [r0, #0]
 800ab62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab66:	2300      	movs	r3, #0
 800ab68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab6c:	e7f7      	b.n	800ab5e <_Balloc+0x66>
 800ab6e:	bf00      	nop
 800ab70:	0800c68c 	.word	0x0800c68c
 800ab74:	0800c6a3 	.word	0x0800c6a3

0800ab78 <_Bfree>:
 800ab78:	b570      	push	{r4, r5, r6, lr}
 800ab7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab7c:	4605      	mov	r5, r0
 800ab7e:	460c      	mov	r4, r1
 800ab80:	b976      	cbnz	r6, 800aba0 <_Bfree+0x28>
 800ab82:	2010      	movs	r0, #16
 800ab84:	f000 fd8e 	bl	800b6a4 <malloc>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	6268      	str	r0, [r5, #36]	; 0x24
 800ab8c:	b920      	cbnz	r0, 800ab98 <_Bfree+0x20>
 800ab8e:	4b09      	ldr	r3, [pc, #36]	; (800abb4 <_Bfree+0x3c>)
 800ab90:	4809      	ldr	r0, [pc, #36]	; (800abb8 <_Bfree+0x40>)
 800ab92:	218a      	movs	r1, #138	; 0x8a
 800ab94:	f000 fd56 	bl	800b644 <__assert_func>
 800ab98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab9c:	6006      	str	r6, [r0, #0]
 800ab9e:	60c6      	str	r6, [r0, #12]
 800aba0:	b13c      	cbz	r4, 800abb2 <_Bfree+0x3a>
 800aba2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aba4:	6862      	ldr	r2, [r4, #4]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800abac:	6021      	str	r1, [r4, #0]
 800abae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800abb2:	bd70      	pop	{r4, r5, r6, pc}
 800abb4:	0800c68c 	.word	0x0800c68c
 800abb8:	0800c6a3 	.word	0x0800c6a3

0800abbc <__multadd>:
 800abbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abc0:	690d      	ldr	r5, [r1, #16]
 800abc2:	4607      	mov	r7, r0
 800abc4:	460c      	mov	r4, r1
 800abc6:	461e      	mov	r6, r3
 800abc8:	f101 0c14 	add.w	ip, r1, #20
 800abcc:	2000      	movs	r0, #0
 800abce:	f8dc 3000 	ldr.w	r3, [ip]
 800abd2:	b299      	uxth	r1, r3
 800abd4:	fb02 6101 	mla	r1, r2, r1, r6
 800abd8:	0c1e      	lsrs	r6, r3, #16
 800abda:	0c0b      	lsrs	r3, r1, #16
 800abdc:	fb02 3306 	mla	r3, r2, r6, r3
 800abe0:	b289      	uxth	r1, r1
 800abe2:	3001      	adds	r0, #1
 800abe4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800abe8:	4285      	cmp	r5, r0
 800abea:	f84c 1b04 	str.w	r1, [ip], #4
 800abee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800abf2:	dcec      	bgt.n	800abce <__multadd+0x12>
 800abf4:	b30e      	cbz	r6, 800ac3a <__multadd+0x7e>
 800abf6:	68a3      	ldr	r3, [r4, #8]
 800abf8:	42ab      	cmp	r3, r5
 800abfa:	dc19      	bgt.n	800ac30 <__multadd+0x74>
 800abfc:	6861      	ldr	r1, [r4, #4]
 800abfe:	4638      	mov	r0, r7
 800ac00:	3101      	adds	r1, #1
 800ac02:	f7ff ff79 	bl	800aaf8 <_Balloc>
 800ac06:	4680      	mov	r8, r0
 800ac08:	b928      	cbnz	r0, 800ac16 <__multadd+0x5a>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	4b0c      	ldr	r3, [pc, #48]	; (800ac40 <__multadd+0x84>)
 800ac0e:	480d      	ldr	r0, [pc, #52]	; (800ac44 <__multadd+0x88>)
 800ac10:	21b5      	movs	r1, #181	; 0xb5
 800ac12:	f000 fd17 	bl	800b644 <__assert_func>
 800ac16:	6922      	ldr	r2, [r4, #16]
 800ac18:	3202      	adds	r2, #2
 800ac1a:	f104 010c 	add.w	r1, r4, #12
 800ac1e:	0092      	lsls	r2, r2, #2
 800ac20:	300c      	adds	r0, #12
 800ac22:	f7fe fda3 	bl	800976c <memcpy>
 800ac26:	4621      	mov	r1, r4
 800ac28:	4638      	mov	r0, r7
 800ac2a:	f7ff ffa5 	bl	800ab78 <_Bfree>
 800ac2e:	4644      	mov	r4, r8
 800ac30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac34:	3501      	adds	r5, #1
 800ac36:	615e      	str	r6, [r3, #20]
 800ac38:	6125      	str	r5, [r4, #16]
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac40:	0800c600 	.word	0x0800c600
 800ac44:	0800c6a3 	.word	0x0800c6a3

0800ac48 <__s2b>:
 800ac48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac4c:	460c      	mov	r4, r1
 800ac4e:	4615      	mov	r5, r2
 800ac50:	461f      	mov	r7, r3
 800ac52:	2209      	movs	r2, #9
 800ac54:	3308      	adds	r3, #8
 800ac56:	4606      	mov	r6, r0
 800ac58:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac5c:	2100      	movs	r1, #0
 800ac5e:	2201      	movs	r2, #1
 800ac60:	429a      	cmp	r2, r3
 800ac62:	db09      	blt.n	800ac78 <__s2b+0x30>
 800ac64:	4630      	mov	r0, r6
 800ac66:	f7ff ff47 	bl	800aaf8 <_Balloc>
 800ac6a:	b940      	cbnz	r0, 800ac7e <__s2b+0x36>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	4b19      	ldr	r3, [pc, #100]	; (800acd4 <__s2b+0x8c>)
 800ac70:	4819      	ldr	r0, [pc, #100]	; (800acd8 <__s2b+0x90>)
 800ac72:	21ce      	movs	r1, #206	; 0xce
 800ac74:	f000 fce6 	bl	800b644 <__assert_func>
 800ac78:	0052      	lsls	r2, r2, #1
 800ac7a:	3101      	adds	r1, #1
 800ac7c:	e7f0      	b.n	800ac60 <__s2b+0x18>
 800ac7e:	9b08      	ldr	r3, [sp, #32]
 800ac80:	6143      	str	r3, [r0, #20]
 800ac82:	2d09      	cmp	r5, #9
 800ac84:	f04f 0301 	mov.w	r3, #1
 800ac88:	6103      	str	r3, [r0, #16]
 800ac8a:	dd16      	ble.n	800acba <__s2b+0x72>
 800ac8c:	f104 0909 	add.w	r9, r4, #9
 800ac90:	46c8      	mov	r8, r9
 800ac92:	442c      	add	r4, r5
 800ac94:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ac98:	4601      	mov	r1, r0
 800ac9a:	3b30      	subs	r3, #48	; 0x30
 800ac9c:	220a      	movs	r2, #10
 800ac9e:	4630      	mov	r0, r6
 800aca0:	f7ff ff8c 	bl	800abbc <__multadd>
 800aca4:	45a0      	cmp	r8, r4
 800aca6:	d1f5      	bne.n	800ac94 <__s2b+0x4c>
 800aca8:	f1a5 0408 	sub.w	r4, r5, #8
 800acac:	444c      	add	r4, r9
 800acae:	1b2d      	subs	r5, r5, r4
 800acb0:	1963      	adds	r3, r4, r5
 800acb2:	42bb      	cmp	r3, r7
 800acb4:	db04      	blt.n	800acc0 <__s2b+0x78>
 800acb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acba:	340a      	adds	r4, #10
 800acbc:	2509      	movs	r5, #9
 800acbe:	e7f6      	b.n	800acae <__s2b+0x66>
 800acc0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800acc4:	4601      	mov	r1, r0
 800acc6:	3b30      	subs	r3, #48	; 0x30
 800acc8:	220a      	movs	r2, #10
 800acca:	4630      	mov	r0, r6
 800accc:	f7ff ff76 	bl	800abbc <__multadd>
 800acd0:	e7ee      	b.n	800acb0 <__s2b+0x68>
 800acd2:	bf00      	nop
 800acd4:	0800c600 	.word	0x0800c600
 800acd8:	0800c6a3 	.word	0x0800c6a3

0800acdc <__hi0bits>:
 800acdc:	0c03      	lsrs	r3, r0, #16
 800acde:	041b      	lsls	r3, r3, #16
 800ace0:	b9d3      	cbnz	r3, 800ad18 <__hi0bits+0x3c>
 800ace2:	0400      	lsls	r0, r0, #16
 800ace4:	2310      	movs	r3, #16
 800ace6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800acea:	bf04      	itt	eq
 800acec:	0200      	lsleq	r0, r0, #8
 800acee:	3308      	addeq	r3, #8
 800acf0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800acf4:	bf04      	itt	eq
 800acf6:	0100      	lsleq	r0, r0, #4
 800acf8:	3304      	addeq	r3, #4
 800acfa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800acfe:	bf04      	itt	eq
 800ad00:	0080      	lsleq	r0, r0, #2
 800ad02:	3302      	addeq	r3, #2
 800ad04:	2800      	cmp	r0, #0
 800ad06:	db05      	blt.n	800ad14 <__hi0bits+0x38>
 800ad08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad0c:	f103 0301 	add.w	r3, r3, #1
 800ad10:	bf08      	it	eq
 800ad12:	2320      	moveq	r3, #32
 800ad14:	4618      	mov	r0, r3
 800ad16:	4770      	bx	lr
 800ad18:	2300      	movs	r3, #0
 800ad1a:	e7e4      	b.n	800ace6 <__hi0bits+0xa>

0800ad1c <__lo0bits>:
 800ad1c:	6803      	ldr	r3, [r0, #0]
 800ad1e:	f013 0207 	ands.w	r2, r3, #7
 800ad22:	4601      	mov	r1, r0
 800ad24:	d00b      	beq.n	800ad3e <__lo0bits+0x22>
 800ad26:	07da      	lsls	r2, r3, #31
 800ad28:	d423      	bmi.n	800ad72 <__lo0bits+0x56>
 800ad2a:	0798      	lsls	r0, r3, #30
 800ad2c:	bf49      	itett	mi
 800ad2e:	085b      	lsrmi	r3, r3, #1
 800ad30:	089b      	lsrpl	r3, r3, #2
 800ad32:	2001      	movmi	r0, #1
 800ad34:	600b      	strmi	r3, [r1, #0]
 800ad36:	bf5c      	itt	pl
 800ad38:	600b      	strpl	r3, [r1, #0]
 800ad3a:	2002      	movpl	r0, #2
 800ad3c:	4770      	bx	lr
 800ad3e:	b298      	uxth	r0, r3
 800ad40:	b9a8      	cbnz	r0, 800ad6e <__lo0bits+0x52>
 800ad42:	0c1b      	lsrs	r3, r3, #16
 800ad44:	2010      	movs	r0, #16
 800ad46:	b2da      	uxtb	r2, r3
 800ad48:	b90a      	cbnz	r2, 800ad4e <__lo0bits+0x32>
 800ad4a:	3008      	adds	r0, #8
 800ad4c:	0a1b      	lsrs	r3, r3, #8
 800ad4e:	071a      	lsls	r2, r3, #28
 800ad50:	bf04      	itt	eq
 800ad52:	091b      	lsreq	r3, r3, #4
 800ad54:	3004      	addeq	r0, #4
 800ad56:	079a      	lsls	r2, r3, #30
 800ad58:	bf04      	itt	eq
 800ad5a:	089b      	lsreq	r3, r3, #2
 800ad5c:	3002      	addeq	r0, #2
 800ad5e:	07da      	lsls	r2, r3, #31
 800ad60:	d403      	bmi.n	800ad6a <__lo0bits+0x4e>
 800ad62:	085b      	lsrs	r3, r3, #1
 800ad64:	f100 0001 	add.w	r0, r0, #1
 800ad68:	d005      	beq.n	800ad76 <__lo0bits+0x5a>
 800ad6a:	600b      	str	r3, [r1, #0]
 800ad6c:	4770      	bx	lr
 800ad6e:	4610      	mov	r0, r2
 800ad70:	e7e9      	b.n	800ad46 <__lo0bits+0x2a>
 800ad72:	2000      	movs	r0, #0
 800ad74:	4770      	bx	lr
 800ad76:	2020      	movs	r0, #32
 800ad78:	4770      	bx	lr
	...

0800ad7c <__i2b>:
 800ad7c:	b510      	push	{r4, lr}
 800ad7e:	460c      	mov	r4, r1
 800ad80:	2101      	movs	r1, #1
 800ad82:	f7ff feb9 	bl	800aaf8 <_Balloc>
 800ad86:	4602      	mov	r2, r0
 800ad88:	b928      	cbnz	r0, 800ad96 <__i2b+0x1a>
 800ad8a:	4b05      	ldr	r3, [pc, #20]	; (800ada0 <__i2b+0x24>)
 800ad8c:	4805      	ldr	r0, [pc, #20]	; (800ada4 <__i2b+0x28>)
 800ad8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ad92:	f000 fc57 	bl	800b644 <__assert_func>
 800ad96:	2301      	movs	r3, #1
 800ad98:	6144      	str	r4, [r0, #20]
 800ad9a:	6103      	str	r3, [r0, #16]
 800ad9c:	bd10      	pop	{r4, pc}
 800ad9e:	bf00      	nop
 800ada0:	0800c600 	.word	0x0800c600
 800ada4:	0800c6a3 	.word	0x0800c6a3

0800ada8 <__multiply>:
 800ada8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adac:	4691      	mov	r9, r2
 800adae:	690a      	ldr	r2, [r1, #16]
 800adb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	bfb8      	it	lt
 800adb8:	460b      	movlt	r3, r1
 800adba:	460c      	mov	r4, r1
 800adbc:	bfbc      	itt	lt
 800adbe:	464c      	movlt	r4, r9
 800adc0:	4699      	movlt	r9, r3
 800adc2:	6927      	ldr	r7, [r4, #16]
 800adc4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800adc8:	68a3      	ldr	r3, [r4, #8]
 800adca:	6861      	ldr	r1, [r4, #4]
 800adcc:	eb07 060a 	add.w	r6, r7, sl
 800add0:	42b3      	cmp	r3, r6
 800add2:	b085      	sub	sp, #20
 800add4:	bfb8      	it	lt
 800add6:	3101      	addlt	r1, #1
 800add8:	f7ff fe8e 	bl	800aaf8 <_Balloc>
 800addc:	b930      	cbnz	r0, 800adec <__multiply+0x44>
 800adde:	4602      	mov	r2, r0
 800ade0:	4b44      	ldr	r3, [pc, #272]	; (800aef4 <__multiply+0x14c>)
 800ade2:	4845      	ldr	r0, [pc, #276]	; (800aef8 <__multiply+0x150>)
 800ade4:	f240 115d 	movw	r1, #349	; 0x15d
 800ade8:	f000 fc2c 	bl	800b644 <__assert_func>
 800adec:	f100 0514 	add.w	r5, r0, #20
 800adf0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800adf4:	462b      	mov	r3, r5
 800adf6:	2200      	movs	r2, #0
 800adf8:	4543      	cmp	r3, r8
 800adfa:	d321      	bcc.n	800ae40 <__multiply+0x98>
 800adfc:	f104 0314 	add.w	r3, r4, #20
 800ae00:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae04:	f109 0314 	add.w	r3, r9, #20
 800ae08:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae0c:	9202      	str	r2, [sp, #8]
 800ae0e:	1b3a      	subs	r2, r7, r4
 800ae10:	3a15      	subs	r2, #21
 800ae12:	f022 0203 	bic.w	r2, r2, #3
 800ae16:	3204      	adds	r2, #4
 800ae18:	f104 0115 	add.w	r1, r4, #21
 800ae1c:	428f      	cmp	r7, r1
 800ae1e:	bf38      	it	cc
 800ae20:	2204      	movcc	r2, #4
 800ae22:	9201      	str	r2, [sp, #4]
 800ae24:	9a02      	ldr	r2, [sp, #8]
 800ae26:	9303      	str	r3, [sp, #12]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d80c      	bhi.n	800ae46 <__multiply+0x9e>
 800ae2c:	2e00      	cmp	r6, #0
 800ae2e:	dd03      	ble.n	800ae38 <__multiply+0x90>
 800ae30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d05a      	beq.n	800aeee <__multiply+0x146>
 800ae38:	6106      	str	r6, [r0, #16]
 800ae3a:	b005      	add	sp, #20
 800ae3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae40:	f843 2b04 	str.w	r2, [r3], #4
 800ae44:	e7d8      	b.n	800adf8 <__multiply+0x50>
 800ae46:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae4a:	f1ba 0f00 	cmp.w	sl, #0
 800ae4e:	d024      	beq.n	800ae9a <__multiply+0xf2>
 800ae50:	f104 0e14 	add.w	lr, r4, #20
 800ae54:	46a9      	mov	r9, r5
 800ae56:	f04f 0c00 	mov.w	ip, #0
 800ae5a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae5e:	f8d9 1000 	ldr.w	r1, [r9]
 800ae62:	fa1f fb82 	uxth.w	fp, r2
 800ae66:	b289      	uxth	r1, r1
 800ae68:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae6c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ae70:	f8d9 2000 	ldr.w	r2, [r9]
 800ae74:	4461      	add	r1, ip
 800ae76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae7a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ae7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae82:	b289      	uxth	r1, r1
 800ae84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae88:	4577      	cmp	r7, lr
 800ae8a:	f849 1b04 	str.w	r1, [r9], #4
 800ae8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae92:	d8e2      	bhi.n	800ae5a <__multiply+0xb2>
 800ae94:	9a01      	ldr	r2, [sp, #4]
 800ae96:	f845 c002 	str.w	ip, [r5, r2]
 800ae9a:	9a03      	ldr	r2, [sp, #12]
 800ae9c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aea0:	3304      	adds	r3, #4
 800aea2:	f1b9 0f00 	cmp.w	r9, #0
 800aea6:	d020      	beq.n	800aeea <__multiply+0x142>
 800aea8:	6829      	ldr	r1, [r5, #0]
 800aeaa:	f104 0c14 	add.w	ip, r4, #20
 800aeae:	46ae      	mov	lr, r5
 800aeb0:	f04f 0a00 	mov.w	sl, #0
 800aeb4:	f8bc b000 	ldrh.w	fp, [ip]
 800aeb8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aebc:	fb09 220b 	mla	r2, r9, fp, r2
 800aec0:	4492      	add	sl, r2
 800aec2:	b289      	uxth	r1, r1
 800aec4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aec8:	f84e 1b04 	str.w	r1, [lr], #4
 800aecc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aed0:	f8be 1000 	ldrh.w	r1, [lr]
 800aed4:	0c12      	lsrs	r2, r2, #16
 800aed6:	fb09 1102 	mla	r1, r9, r2, r1
 800aeda:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aede:	4567      	cmp	r7, ip
 800aee0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aee4:	d8e6      	bhi.n	800aeb4 <__multiply+0x10c>
 800aee6:	9a01      	ldr	r2, [sp, #4]
 800aee8:	50a9      	str	r1, [r5, r2]
 800aeea:	3504      	adds	r5, #4
 800aeec:	e79a      	b.n	800ae24 <__multiply+0x7c>
 800aeee:	3e01      	subs	r6, #1
 800aef0:	e79c      	b.n	800ae2c <__multiply+0x84>
 800aef2:	bf00      	nop
 800aef4:	0800c600 	.word	0x0800c600
 800aef8:	0800c6a3 	.word	0x0800c6a3

0800aefc <__pow5mult>:
 800aefc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af00:	4615      	mov	r5, r2
 800af02:	f012 0203 	ands.w	r2, r2, #3
 800af06:	4606      	mov	r6, r0
 800af08:	460f      	mov	r7, r1
 800af0a:	d007      	beq.n	800af1c <__pow5mult+0x20>
 800af0c:	4c25      	ldr	r4, [pc, #148]	; (800afa4 <__pow5mult+0xa8>)
 800af0e:	3a01      	subs	r2, #1
 800af10:	2300      	movs	r3, #0
 800af12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af16:	f7ff fe51 	bl	800abbc <__multadd>
 800af1a:	4607      	mov	r7, r0
 800af1c:	10ad      	asrs	r5, r5, #2
 800af1e:	d03d      	beq.n	800af9c <__pow5mult+0xa0>
 800af20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af22:	b97c      	cbnz	r4, 800af44 <__pow5mult+0x48>
 800af24:	2010      	movs	r0, #16
 800af26:	f000 fbbd 	bl	800b6a4 <malloc>
 800af2a:	4602      	mov	r2, r0
 800af2c:	6270      	str	r0, [r6, #36]	; 0x24
 800af2e:	b928      	cbnz	r0, 800af3c <__pow5mult+0x40>
 800af30:	4b1d      	ldr	r3, [pc, #116]	; (800afa8 <__pow5mult+0xac>)
 800af32:	481e      	ldr	r0, [pc, #120]	; (800afac <__pow5mult+0xb0>)
 800af34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af38:	f000 fb84 	bl	800b644 <__assert_func>
 800af3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af40:	6004      	str	r4, [r0, #0]
 800af42:	60c4      	str	r4, [r0, #12]
 800af44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af4c:	b94c      	cbnz	r4, 800af62 <__pow5mult+0x66>
 800af4e:	f240 2171 	movw	r1, #625	; 0x271
 800af52:	4630      	mov	r0, r6
 800af54:	f7ff ff12 	bl	800ad7c <__i2b>
 800af58:	2300      	movs	r3, #0
 800af5a:	f8c8 0008 	str.w	r0, [r8, #8]
 800af5e:	4604      	mov	r4, r0
 800af60:	6003      	str	r3, [r0, #0]
 800af62:	f04f 0900 	mov.w	r9, #0
 800af66:	07eb      	lsls	r3, r5, #31
 800af68:	d50a      	bpl.n	800af80 <__pow5mult+0x84>
 800af6a:	4639      	mov	r1, r7
 800af6c:	4622      	mov	r2, r4
 800af6e:	4630      	mov	r0, r6
 800af70:	f7ff ff1a 	bl	800ada8 <__multiply>
 800af74:	4639      	mov	r1, r7
 800af76:	4680      	mov	r8, r0
 800af78:	4630      	mov	r0, r6
 800af7a:	f7ff fdfd 	bl	800ab78 <_Bfree>
 800af7e:	4647      	mov	r7, r8
 800af80:	106d      	asrs	r5, r5, #1
 800af82:	d00b      	beq.n	800af9c <__pow5mult+0xa0>
 800af84:	6820      	ldr	r0, [r4, #0]
 800af86:	b938      	cbnz	r0, 800af98 <__pow5mult+0x9c>
 800af88:	4622      	mov	r2, r4
 800af8a:	4621      	mov	r1, r4
 800af8c:	4630      	mov	r0, r6
 800af8e:	f7ff ff0b 	bl	800ada8 <__multiply>
 800af92:	6020      	str	r0, [r4, #0]
 800af94:	f8c0 9000 	str.w	r9, [r0]
 800af98:	4604      	mov	r4, r0
 800af9a:	e7e4      	b.n	800af66 <__pow5mult+0x6a>
 800af9c:	4638      	mov	r0, r7
 800af9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afa2:	bf00      	nop
 800afa4:	0800c7f0 	.word	0x0800c7f0
 800afa8:	0800c68c 	.word	0x0800c68c
 800afac:	0800c6a3 	.word	0x0800c6a3

0800afb0 <__lshift>:
 800afb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afb4:	460c      	mov	r4, r1
 800afb6:	6849      	ldr	r1, [r1, #4]
 800afb8:	6923      	ldr	r3, [r4, #16]
 800afba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afbe:	68a3      	ldr	r3, [r4, #8]
 800afc0:	4607      	mov	r7, r0
 800afc2:	4691      	mov	r9, r2
 800afc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afc8:	f108 0601 	add.w	r6, r8, #1
 800afcc:	42b3      	cmp	r3, r6
 800afce:	db0b      	blt.n	800afe8 <__lshift+0x38>
 800afd0:	4638      	mov	r0, r7
 800afd2:	f7ff fd91 	bl	800aaf8 <_Balloc>
 800afd6:	4605      	mov	r5, r0
 800afd8:	b948      	cbnz	r0, 800afee <__lshift+0x3e>
 800afda:	4602      	mov	r2, r0
 800afdc:	4b2a      	ldr	r3, [pc, #168]	; (800b088 <__lshift+0xd8>)
 800afde:	482b      	ldr	r0, [pc, #172]	; (800b08c <__lshift+0xdc>)
 800afe0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800afe4:	f000 fb2e 	bl	800b644 <__assert_func>
 800afe8:	3101      	adds	r1, #1
 800afea:	005b      	lsls	r3, r3, #1
 800afec:	e7ee      	b.n	800afcc <__lshift+0x1c>
 800afee:	2300      	movs	r3, #0
 800aff0:	f100 0114 	add.w	r1, r0, #20
 800aff4:	f100 0210 	add.w	r2, r0, #16
 800aff8:	4618      	mov	r0, r3
 800affa:	4553      	cmp	r3, sl
 800affc:	db37      	blt.n	800b06e <__lshift+0xbe>
 800affe:	6920      	ldr	r0, [r4, #16]
 800b000:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b004:	f104 0314 	add.w	r3, r4, #20
 800b008:	f019 091f 	ands.w	r9, r9, #31
 800b00c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b010:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b014:	d02f      	beq.n	800b076 <__lshift+0xc6>
 800b016:	f1c9 0e20 	rsb	lr, r9, #32
 800b01a:	468a      	mov	sl, r1
 800b01c:	f04f 0c00 	mov.w	ip, #0
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	fa02 f209 	lsl.w	r2, r2, r9
 800b026:	ea42 020c 	orr.w	r2, r2, ip
 800b02a:	f84a 2b04 	str.w	r2, [sl], #4
 800b02e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b032:	4298      	cmp	r0, r3
 800b034:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b038:	d8f2      	bhi.n	800b020 <__lshift+0x70>
 800b03a:	1b03      	subs	r3, r0, r4
 800b03c:	3b15      	subs	r3, #21
 800b03e:	f023 0303 	bic.w	r3, r3, #3
 800b042:	3304      	adds	r3, #4
 800b044:	f104 0215 	add.w	r2, r4, #21
 800b048:	4290      	cmp	r0, r2
 800b04a:	bf38      	it	cc
 800b04c:	2304      	movcc	r3, #4
 800b04e:	f841 c003 	str.w	ip, [r1, r3]
 800b052:	f1bc 0f00 	cmp.w	ip, #0
 800b056:	d001      	beq.n	800b05c <__lshift+0xac>
 800b058:	f108 0602 	add.w	r6, r8, #2
 800b05c:	3e01      	subs	r6, #1
 800b05e:	4638      	mov	r0, r7
 800b060:	612e      	str	r6, [r5, #16]
 800b062:	4621      	mov	r1, r4
 800b064:	f7ff fd88 	bl	800ab78 <_Bfree>
 800b068:	4628      	mov	r0, r5
 800b06a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b06e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b072:	3301      	adds	r3, #1
 800b074:	e7c1      	b.n	800affa <__lshift+0x4a>
 800b076:	3904      	subs	r1, #4
 800b078:	f853 2b04 	ldr.w	r2, [r3], #4
 800b07c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b080:	4298      	cmp	r0, r3
 800b082:	d8f9      	bhi.n	800b078 <__lshift+0xc8>
 800b084:	e7ea      	b.n	800b05c <__lshift+0xac>
 800b086:	bf00      	nop
 800b088:	0800c600 	.word	0x0800c600
 800b08c:	0800c6a3 	.word	0x0800c6a3

0800b090 <__mcmp>:
 800b090:	b530      	push	{r4, r5, lr}
 800b092:	6902      	ldr	r2, [r0, #16]
 800b094:	690c      	ldr	r4, [r1, #16]
 800b096:	1b12      	subs	r2, r2, r4
 800b098:	d10e      	bne.n	800b0b8 <__mcmp+0x28>
 800b09a:	f100 0314 	add.w	r3, r0, #20
 800b09e:	3114      	adds	r1, #20
 800b0a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b0a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b0a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b0ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b0b0:	42a5      	cmp	r5, r4
 800b0b2:	d003      	beq.n	800b0bc <__mcmp+0x2c>
 800b0b4:	d305      	bcc.n	800b0c2 <__mcmp+0x32>
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	4610      	mov	r0, r2
 800b0ba:	bd30      	pop	{r4, r5, pc}
 800b0bc:	4283      	cmp	r3, r0
 800b0be:	d3f3      	bcc.n	800b0a8 <__mcmp+0x18>
 800b0c0:	e7fa      	b.n	800b0b8 <__mcmp+0x28>
 800b0c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c6:	e7f7      	b.n	800b0b8 <__mcmp+0x28>

0800b0c8 <__mdiff>:
 800b0c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0cc:	460c      	mov	r4, r1
 800b0ce:	4606      	mov	r6, r0
 800b0d0:	4611      	mov	r1, r2
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	4690      	mov	r8, r2
 800b0d6:	f7ff ffdb 	bl	800b090 <__mcmp>
 800b0da:	1e05      	subs	r5, r0, #0
 800b0dc:	d110      	bne.n	800b100 <__mdiff+0x38>
 800b0de:	4629      	mov	r1, r5
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	f7ff fd09 	bl	800aaf8 <_Balloc>
 800b0e6:	b930      	cbnz	r0, 800b0f6 <__mdiff+0x2e>
 800b0e8:	4b3a      	ldr	r3, [pc, #232]	; (800b1d4 <__mdiff+0x10c>)
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	f240 2132 	movw	r1, #562	; 0x232
 800b0f0:	4839      	ldr	r0, [pc, #228]	; (800b1d8 <__mdiff+0x110>)
 800b0f2:	f000 faa7 	bl	800b644 <__assert_func>
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b0fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b100:	bfa4      	itt	ge
 800b102:	4643      	movge	r3, r8
 800b104:	46a0      	movge	r8, r4
 800b106:	4630      	mov	r0, r6
 800b108:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b10c:	bfa6      	itte	ge
 800b10e:	461c      	movge	r4, r3
 800b110:	2500      	movge	r5, #0
 800b112:	2501      	movlt	r5, #1
 800b114:	f7ff fcf0 	bl	800aaf8 <_Balloc>
 800b118:	b920      	cbnz	r0, 800b124 <__mdiff+0x5c>
 800b11a:	4b2e      	ldr	r3, [pc, #184]	; (800b1d4 <__mdiff+0x10c>)
 800b11c:	4602      	mov	r2, r0
 800b11e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b122:	e7e5      	b.n	800b0f0 <__mdiff+0x28>
 800b124:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b128:	6926      	ldr	r6, [r4, #16]
 800b12a:	60c5      	str	r5, [r0, #12]
 800b12c:	f104 0914 	add.w	r9, r4, #20
 800b130:	f108 0514 	add.w	r5, r8, #20
 800b134:	f100 0e14 	add.w	lr, r0, #20
 800b138:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b13c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b140:	f108 0210 	add.w	r2, r8, #16
 800b144:	46f2      	mov	sl, lr
 800b146:	2100      	movs	r1, #0
 800b148:	f859 3b04 	ldr.w	r3, [r9], #4
 800b14c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b150:	fa1f f883 	uxth.w	r8, r3
 800b154:	fa11 f18b 	uxtah	r1, r1, fp
 800b158:	0c1b      	lsrs	r3, r3, #16
 800b15a:	eba1 0808 	sub.w	r8, r1, r8
 800b15e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b162:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b166:	fa1f f888 	uxth.w	r8, r8
 800b16a:	1419      	asrs	r1, r3, #16
 800b16c:	454e      	cmp	r6, r9
 800b16e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b172:	f84a 3b04 	str.w	r3, [sl], #4
 800b176:	d8e7      	bhi.n	800b148 <__mdiff+0x80>
 800b178:	1b33      	subs	r3, r6, r4
 800b17a:	3b15      	subs	r3, #21
 800b17c:	f023 0303 	bic.w	r3, r3, #3
 800b180:	3304      	adds	r3, #4
 800b182:	3415      	adds	r4, #21
 800b184:	42a6      	cmp	r6, r4
 800b186:	bf38      	it	cc
 800b188:	2304      	movcc	r3, #4
 800b18a:	441d      	add	r5, r3
 800b18c:	4473      	add	r3, lr
 800b18e:	469e      	mov	lr, r3
 800b190:	462e      	mov	r6, r5
 800b192:	4566      	cmp	r6, ip
 800b194:	d30e      	bcc.n	800b1b4 <__mdiff+0xec>
 800b196:	f10c 0203 	add.w	r2, ip, #3
 800b19a:	1b52      	subs	r2, r2, r5
 800b19c:	f022 0203 	bic.w	r2, r2, #3
 800b1a0:	3d03      	subs	r5, #3
 800b1a2:	45ac      	cmp	ip, r5
 800b1a4:	bf38      	it	cc
 800b1a6:	2200      	movcc	r2, #0
 800b1a8:	441a      	add	r2, r3
 800b1aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b1ae:	b17b      	cbz	r3, 800b1d0 <__mdiff+0x108>
 800b1b0:	6107      	str	r7, [r0, #16]
 800b1b2:	e7a3      	b.n	800b0fc <__mdiff+0x34>
 800b1b4:	f856 8b04 	ldr.w	r8, [r6], #4
 800b1b8:	fa11 f288 	uxtah	r2, r1, r8
 800b1bc:	1414      	asrs	r4, r2, #16
 800b1be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b1c2:	b292      	uxth	r2, r2
 800b1c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b1c8:	f84e 2b04 	str.w	r2, [lr], #4
 800b1cc:	1421      	asrs	r1, r4, #16
 800b1ce:	e7e0      	b.n	800b192 <__mdiff+0xca>
 800b1d0:	3f01      	subs	r7, #1
 800b1d2:	e7ea      	b.n	800b1aa <__mdiff+0xe2>
 800b1d4:	0800c600 	.word	0x0800c600
 800b1d8:	0800c6a3 	.word	0x0800c6a3

0800b1dc <__ulp>:
 800b1dc:	b082      	sub	sp, #8
 800b1de:	ed8d 0b00 	vstr	d0, [sp]
 800b1e2:	9b01      	ldr	r3, [sp, #4]
 800b1e4:	4912      	ldr	r1, [pc, #72]	; (800b230 <__ulp+0x54>)
 800b1e6:	4019      	ands	r1, r3
 800b1e8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b1ec:	2900      	cmp	r1, #0
 800b1ee:	dd05      	ble.n	800b1fc <__ulp+0x20>
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	ec43 2b10 	vmov	d0, r2, r3
 800b1f8:	b002      	add	sp, #8
 800b1fa:	4770      	bx	lr
 800b1fc:	4249      	negs	r1, r1
 800b1fe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b202:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b206:	f04f 0200 	mov.w	r2, #0
 800b20a:	f04f 0300 	mov.w	r3, #0
 800b20e:	da04      	bge.n	800b21a <__ulp+0x3e>
 800b210:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b214:	fa41 f300 	asr.w	r3, r1, r0
 800b218:	e7ec      	b.n	800b1f4 <__ulp+0x18>
 800b21a:	f1a0 0114 	sub.w	r1, r0, #20
 800b21e:	291e      	cmp	r1, #30
 800b220:	bfda      	itte	le
 800b222:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b226:	fa20 f101 	lsrle.w	r1, r0, r1
 800b22a:	2101      	movgt	r1, #1
 800b22c:	460a      	mov	r2, r1
 800b22e:	e7e1      	b.n	800b1f4 <__ulp+0x18>
 800b230:	7ff00000 	.word	0x7ff00000

0800b234 <__b2d>:
 800b234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b236:	6905      	ldr	r5, [r0, #16]
 800b238:	f100 0714 	add.w	r7, r0, #20
 800b23c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b240:	1f2e      	subs	r6, r5, #4
 800b242:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b246:	4620      	mov	r0, r4
 800b248:	f7ff fd48 	bl	800acdc <__hi0bits>
 800b24c:	f1c0 0320 	rsb	r3, r0, #32
 800b250:	280a      	cmp	r0, #10
 800b252:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b2d0 <__b2d+0x9c>
 800b256:	600b      	str	r3, [r1, #0]
 800b258:	dc14      	bgt.n	800b284 <__b2d+0x50>
 800b25a:	f1c0 0e0b 	rsb	lr, r0, #11
 800b25e:	fa24 f10e 	lsr.w	r1, r4, lr
 800b262:	42b7      	cmp	r7, r6
 800b264:	ea41 030c 	orr.w	r3, r1, ip
 800b268:	bf34      	ite	cc
 800b26a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b26e:	2100      	movcs	r1, #0
 800b270:	3015      	adds	r0, #21
 800b272:	fa04 f000 	lsl.w	r0, r4, r0
 800b276:	fa21 f10e 	lsr.w	r1, r1, lr
 800b27a:	ea40 0201 	orr.w	r2, r0, r1
 800b27e:	ec43 2b10 	vmov	d0, r2, r3
 800b282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b284:	42b7      	cmp	r7, r6
 800b286:	bf3a      	itte	cc
 800b288:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b28c:	f1a5 0608 	subcc.w	r6, r5, #8
 800b290:	2100      	movcs	r1, #0
 800b292:	380b      	subs	r0, #11
 800b294:	d017      	beq.n	800b2c6 <__b2d+0x92>
 800b296:	f1c0 0c20 	rsb	ip, r0, #32
 800b29a:	fa04 f500 	lsl.w	r5, r4, r0
 800b29e:	42be      	cmp	r6, r7
 800b2a0:	fa21 f40c 	lsr.w	r4, r1, ip
 800b2a4:	ea45 0504 	orr.w	r5, r5, r4
 800b2a8:	bf8c      	ite	hi
 800b2aa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b2ae:	2400      	movls	r4, #0
 800b2b0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b2b4:	fa01 f000 	lsl.w	r0, r1, r0
 800b2b8:	fa24 f40c 	lsr.w	r4, r4, ip
 800b2bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b2c0:	ea40 0204 	orr.w	r2, r0, r4
 800b2c4:	e7db      	b.n	800b27e <__b2d+0x4a>
 800b2c6:	ea44 030c 	orr.w	r3, r4, ip
 800b2ca:	460a      	mov	r2, r1
 800b2cc:	e7d7      	b.n	800b27e <__b2d+0x4a>
 800b2ce:	bf00      	nop
 800b2d0:	3ff00000 	.word	0x3ff00000

0800b2d4 <__d2b>:
 800b2d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2d8:	4689      	mov	r9, r1
 800b2da:	2101      	movs	r1, #1
 800b2dc:	ec57 6b10 	vmov	r6, r7, d0
 800b2e0:	4690      	mov	r8, r2
 800b2e2:	f7ff fc09 	bl	800aaf8 <_Balloc>
 800b2e6:	4604      	mov	r4, r0
 800b2e8:	b930      	cbnz	r0, 800b2f8 <__d2b+0x24>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	4b25      	ldr	r3, [pc, #148]	; (800b384 <__d2b+0xb0>)
 800b2ee:	4826      	ldr	r0, [pc, #152]	; (800b388 <__d2b+0xb4>)
 800b2f0:	f240 310a 	movw	r1, #778	; 0x30a
 800b2f4:	f000 f9a6 	bl	800b644 <__assert_func>
 800b2f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b2fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b300:	bb35      	cbnz	r5, 800b350 <__d2b+0x7c>
 800b302:	2e00      	cmp	r6, #0
 800b304:	9301      	str	r3, [sp, #4]
 800b306:	d028      	beq.n	800b35a <__d2b+0x86>
 800b308:	4668      	mov	r0, sp
 800b30a:	9600      	str	r6, [sp, #0]
 800b30c:	f7ff fd06 	bl	800ad1c <__lo0bits>
 800b310:	9900      	ldr	r1, [sp, #0]
 800b312:	b300      	cbz	r0, 800b356 <__d2b+0x82>
 800b314:	9a01      	ldr	r2, [sp, #4]
 800b316:	f1c0 0320 	rsb	r3, r0, #32
 800b31a:	fa02 f303 	lsl.w	r3, r2, r3
 800b31e:	430b      	orrs	r3, r1
 800b320:	40c2      	lsrs	r2, r0
 800b322:	6163      	str	r3, [r4, #20]
 800b324:	9201      	str	r2, [sp, #4]
 800b326:	9b01      	ldr	r3, [sp, #4]
 800b328:	61a3      	str	r3, [r4, #24]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	bf14      	ite	ne
 800b32e:	2202      	movne	r2, #2
 800b330:	2201      	moveq	r2, #1
 800b332:	6122      	str	r2, [r4, #16]
 800b334:	b1d5      	cbz	r5, 800b36c <__d2b+0x98>
 800b336:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b33a:	4405      	add	r5, r0
 800b33c:	f8c9 5000 	str.w	r5, [r9]
 800b340:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b344:	f8c8 0000 	str.w	r0, [r8]
 800b348:	4620      	mov	r0, r4
 800b34a:	b003      	add	sp, #12
 800b34c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b350:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b354:	e7d5      	b.n	800b302 <__d2b+0x2e>
 800b356:	6161      	str	r1, [r4, #20]
 800b358:	e7e5      	b.n	800b326 <__d2b+0x52>
 800b35a:	a801      	add	r0, sp, #4
 800b35c:	f7ff fcde 	bl	800ad1c <__lo0bits>
 800b360:	9b01      	ldr	r3, [sp, #4]
 800b362:	6163      	str	r3, [r4, #20]
 800b364:	2201      	movs	r2, #1
 800b366:	6122      	str	r2, [r4, #16]
 800b368:	3020      	adds	r0, #32
 800b36a:	e7e3      	b.n	800b334 <__d2b+0x60>
 800b36c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b370:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b374:	f8c9 0000 	str.w	r0, [r9]
 800b378:	6918      	ldr	r0, [r3, #16]
 800b37a:	f7ff fcaf 	bl	800acdc <__hi0bits>
 800b37e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b382:	e7df      	b.n	800b344 <__d2b+0x70>
 800b384:	0800c600 	.word	0x0800c600
 800b388:	0800c6a3 	.word	0x0800c6a3

0800b38c <__ratio>:
 800b38c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b390:	4688      	mov	r8, r1
 800b392:	4669      	mov	r1, sp
 800b394:	4681      	mov	r9, r0
 800b396:	f7ff ff4d 	bl	800b234 <__b2d>
 800b39a:	a901      	add	r1, sp, #4
 800b39c:	4640      	mov	r0, r8
 800b39e:	ec55 4b10 	vmov	r4, r5, d0
 800b3a2:	f7ff ff47 	bl	800b234 <__b2d>
 800b3a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3aa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b3ae:	eba3 0c02 	sub.w	ip, r3, r2
 800b3b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b3b6:	1a9b      	subs	r3, r3, r2
 800b3b8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b3bc:	ec51 0b10 	vmov	r0, r1, d0
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	bfd6      	itet	le
 800b3c4:	460a      	movle	r2, r1
 800b3c6:	462a      	movgt	r2, r5
 800b3c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b3cc:	468b      	mov	fp, r1
 800b3ce:	462f      	mov	r7, r5
 800b3d0:	bfd4      	ite	le
 800b3d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b3d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b3da:	4620      	mov	r0, r4
 800b3dc:	ee10 2a10 	vmov	r2, s0
 800b3e0:	465b      	mov	r3, fp
 800b3e2:	4639      	mov	r1, r7
 800b3e4:	f7f5 fa32 	bl	800084c <__aeabi_ddiv>
 800b3e8:	ec41 0b10 	vmov	d0, r0, r1
 800b3ec:	b003      	add	sp, #12
 800b3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b3f2 <__copybits>:
 800b3f2:	3901      	subs	r1, #1
 800b3f4:	b570      	push	{r4, r5, r6, lr}
 800b3f6:	1149      	asrs	r1, r1, #5
 800b3f8:	6914      	ldr	r4, [r2, #16]
 800b3fa:	3101      	adds	r1, #1
 800b3fc:	f102 0314 	add.w	r3, r2, #20
 800b400:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b404:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b408:	1f05      	subs	r5, r0, #4
 800b40a:	42a3      	cmp	r3, r4
 800b40c:	d30c      	bcc.n	800b428 <__copybits+0x36>
 800b40e:	1aa3      	subs	r3, r4, r2
 800b410:	3b11      	subs	r3, #17
 800b412:	f023 0303 	bic.w	r3, r3, #3
 800b416:	3211      	adds	r2, #17
 800b418:	42a2      	cmp	r2, r4
 800b41a:	bf88      	it	hi
 800b41c:	2300      	movhi	r3, #0
 800b41e:	4418      	add	r0, r3
 800b420:	2300      	movs	r3, #0
 800b422:	4288      	cmp	r0, r1
 800b424:	d305      	bcc.n	800b432 <__copybits+0x40>
 800b426:	bd70      	pop	{r4, r5, r6, pc}
 800b428:	f853 6b04 	ldr.w	r6, [r3], #4
 800b42c:	f845 6f04 	str.w	r6, [r5, #4]!
 800b430:	e7eb      	b.n	800b40a <__copybits+0x18>
 800b432:	f840 3b04 	str.w	r3, [r0], #4
 800b436:	e7f4      	b.n	800b422 <__copybits+0x30>

0800b438 <__any_on>:
 800b438:	f100 0214 	add.w	r2, r0, #20
 800b43c:	6900      	ldr	r0, [r0, #16]
 800b43e:	114b      	asrs	r3, r1, #5
 800b440:	4298      	cmp	r0, r3
 800b442:	b510      	push	{r4, lr}
 800b444:	db11      	blt.n	800b46a <__any_on+0x32>
 800b446:	dd0a      	ble.n	800b45e <__any_on+0x26>
 800b448:	f011 011f 	ands.w	r1, r1, #31
 800b44c:	d007      	beq.n	800b45e <__any_on+0x26>
 800b44e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b452:	fa24 f001 	lsr.w	r0, r4, r1
 800b456:	fa00 f101 	lsl.w	r1, r0, r1
 800b45a:	428c      	cmp	r4, r1
 800b45c:	d10b      	bne.n	800b476 <__any_on+0x3e>
 800b45e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b462:	4293      	cmp	r3, r2
 800b464:	d803      	bhi.n	800b46e <__any_on+0x36>
 800b466:	2000      	movs	r0, #0
 800b468:	bd10      	pop	{r4, pc}
 800b46a:	4603      	mov	r3, r0
 800b46c:	e7f7      	b.n	800b45e <__any_on+0x26>
 800b46e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b472:	2900      	cmp	r1, #0
 800b474:	d0f5      	beq.n	800b462 <__any_on+0x2a>
 800b476:	2001      	movs	r0, #1
 800b478:	e7f6      	b.n	800b468 <__any_on+0x30>

0800b47a <_calloc_r>:
 800b47a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b47c:	fba1 2402 	umull	r2, r4, r1, r2
 800b480:	b94c      	cbnz	r4, 800b496 <_calloc_r+0x1c>
 800b482:	4611      	mov	r1, r2
 800b484:	9201      	str	r2, [sp, #4]
 800b486:	f000 f82f 	bl	800b4e8 <_malloc_r>
 800b48a:	9a01      	ldr	r2, [sp, #4]
 800b48c:	4605      	mov	r5, r0
 800b48e:	b930      	cbnz	r0, 800b49e <_calloc_r+0x24>
 800b490:	4628      	mov	r0, r5
 800b492:	b003      	add	sp, #12
 800b494:	bd30      	pop	{r4, r5, pc}
 800b496:	220c      	movs	r2, #12
 800b498:	6002      	str	r2, [r0, #0]
 800b49a:	2500      	movs	r5, #0
 800b49c:	e7f8      	b.n	800b490 <_calloc_r+0x16>
 800b49e:	4621      	mov	r1, r4
 800b4a0:	f7fe f972 	bl	8009788 <memset>
 800b4a4:	e7f4      	b.n	800b490 <_calloc_r+0x16>
	...

0800b4a8 <sbrk_aligned>:
 800b4a8:	b570      	push	{r4, r5, r6, lr}
 800b4aa:	4e0e      	ldr	r6, [pc, #56]	; (800b4e4 <sbrk_aligned+0x3c>)
 800b4ac:	460c      	mov	r4, r1
 800b4ae:	6831      	ldr	r1, [r6, #0]
 800b4b0:	4605      	mov	r5, r0
 800b4b2:	b911      	cbnz	r1, 800b4ba <sbrk_aligned+0x12>
 800b4b4:	f000 f894 	bl	800b5e0 <_sbrk_r>
 800b4b8:	6030      	str	r0, [r6, #0]
 800b4ba:	4621      	mov	r1, r4
 800b4bc:	4628      	mov	r0, r5
 800b4be:	f000 f88f 	bl	800b5e0 <_sbrk_r>
 800b4c2:	1c43      	adds	r3, r0, #1
 800b4c4:	d00a      	beq.n	800b4dc <sbrk_aligned+0x34>
 800b4c6:	1cc4      	adds	r4, r0, #3
 800b4c8:	f024 0403 	bic.w	r4, r4, #3
 800b4cc:	42a0      	cmp	r0, r4
 800b4ce:	d007      	beq.n	800b4e0 <sbrk_aligned+0x38>
 800b4d0:	1a21      	subs	r1, r4, r0
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	f000 f884 	bl	800b5e0 <_sbrk_r>
 800b4d8:	3001      	adds	r0, #1
 800b4da:	d101      	bne.n	800b4e0 <sbrk_aligned+0x38>
 800b4dc:	f04f 34ff 	mov.w	r4, #4294967295
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	bd70      	pop	{r4, r5, r6, pc}
 800b4e4:	20002030 	.word	0x20002030

0800b4e8 <_malloc_r>:
 800b4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ec:	1ccd      	adds	r5, r1, #3
 800b4ee:	f025 0503 	bic.w	r5, r5, #3
 800b4f2:	3508      	adds	r5, #8
 800b4f4:	2d0c      	cmp	r5, #12
 800b4f6:	bf38      	it	cc
 800b4f8:	250c      	movcc	r5, #12
 800b4fa:	2d00      	cmp	r5, #0
 800b4fc:	4607      	mov	r7, r0
 800b4fe:	db01      	blt.n	800b504 <_malloc_r+0x1c>
 800b500:	42a9      	cmp	r1, r5
 800b502:	d905      	bls.n	800b510 <_malloc_r+0x28>
 800b504:	230c      	movs	r3, #12
 800b506:	603b      	str	r3, [r7, #0]
 800b508:	2600      	movs	r6, #0
 800b50a:	4630      	mov	r0, r6
 800b50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b510:	4e2e      	ldr	r6, [pc, #184]	; (800b5cc <_malloc_r+0xe4>)
 800b512:	f000 f8cf 	bl	800b6b4 <__malloc_lock>
 800b516:	6833      	ldr	r3, [r6, #0]
 800b518:	461c      	mov	r4, r3
 800b51a:	bb34      	cbnz	r4, 800b56a <_malloc_r+0x82>
 800b51c:	4629      	mov	r1, r5
 800b51e:	4638      	mov	r0, r7
 800b520:	f7ff ffc2 	bl	800b4a8 <sbrk_aligned>
 800b524:	1c43      	adds	r3, r0, #1
 800b526:	4604      	mov	r4, r0
 800b528:	d14d      	bne.n	800b5c6 <_malloc_r+0xde>
 800b52a:	6834      	ldr	r4, [r6, #0]
 800b52c:	4626      	mov	r6, r4
 800b52e:	2e00      	cmp	r6, #0
 800b530:	d140      	bne.n	800b5b4 <_malloc_r+0xcc>
 800b532:	6823      	ldr	r3, [r4, #0]
 800b534:	4631      	mov	r1, r6
 800b536:	4638      	mov	r0, r7
 800b538:	eb04 0803 	add.w	r8, r4, r3
 800b53c:	f000 f850 	bl	800b5e0 <_sbrk_r>
 800b540:	4580      	cmp	r8, r0
 800b542:	d13a      	bne.n	800b5ba <_malloc_r+0xd2>
 800b544:	6821      	ldr	r1, [r4, #0]
 800b546:	3503      	adds	r5, #3
 800b548:	1a6d      	subs	r5, r5, r1
 800b54a:	f025 0503 	bic.w	r5, r5, #3
 800b54e:	3508      	adds	r5, #8
 800b550:	2d0c      	cmp	r5, #12
 800b552:	bf38      	it	cc
 800b554:	250c      	movcc	r5, #12
 800b556:	4629      	mov	r1, r5
 800b558:	4638      	mov	r0, r7
 800b55a:	f7ff ffa5 	bl	800b4a8 <sbrk_aligned>
 800b55e:	3001      	adds	r0, #1
 800b560:	d02b      	beq.n	800b5ba <_malloc_r+0xd2>
 800b562:	6823      	ldr	r3, [r4, #0]
 800b564:	442b      	add	r3, r5
 800b566:	6023      	str	r3, [r4, #0]
 800b568:	e00e      	b.n	800b588 <_malloc_r+0xa0>
 800b56a:	6822      	ldr	r2, [r4, #0]
 800b56c:	1b52      	subs	r2, r2, r5
 800b56e:	d41e      	bmi.n	800b5ae <_malloc_r+0xc6>
 800b570:	2a0b      	cmp	r2, #11
 800b572:	d916      	bls.n	800b5a2 <_malloc_r+0xba>
 800b574:	1961      	adds	r1, r4, r5
 800b576:	42a3      	cmp	r3, r4
 800b578:	6025      	str	r5, [r4, #0]
 800b57a:	bf18      	it	ne
 800b57c:	6059      	strne	r1, [r3, #4]
 800b57e:	6863      	ldr	r3, [r4, #4]
 800b580:	bf08      	it	eq
 800b582:	6031      	streq	r1, [r6, #0]
 800b584:	5162      	str	r2, [r4, r5]
 800b586:	604b      	str	r3, [r1, #4]
 800b588:	4638      	mov	r0, r7
 800b58a:	f104 060b 	add.w	r6, r4, #11
 800b58e:	f000 f897 	bl	800b6c0 <__malloc_unlock>
 800b592:	f026 0607 	bic.w	r6, r6, #7
 800b596:	1d23      	adds	r3, r4, #4
 800b598:	1af2      	subs	r2, r6, r3
 800b59a:	d0b6      	beq.n	800b50a <_malloc_r+0x22>
 800b59c:	1b9b      	subs	r3, r3, r6
 800b59e:	50a3      	str	r3, [r4, r2]
 800b5a0:	e7b3      	b.n	800b50a <_malloc_r+0x22>
 800b5a2:	6862      	ldr	r2, [r4, #4]
 800b5a4:	42a3      	cmp	r3, r4
 800b5a6:	bf0c      	ite	eq
 800b5a8:	6032      	streq	r2, [r6, #0]
 800b5aa:	605a      	strne	r2, [r3, #4]
 800b5ac:	e7ec      	b.n	800b588 <_malloc_r+0xa0>
 800b5ae:	4623      	mov	r3, r4
 800b5b0:	6864      	ldr	r4, [r4, #4]
 800b5b2:	e7b2      	b.n	800b51a <_malloc_r+0x32>
 800b5b4:	4634      	mov	r4, r6
 800b5b6:	6876      	ldr	r6, [r6, #4]
 800b5b8:	e7b9      	b.n	800b52e <_malloc_r+0x46>
 800b5ba:	230c      	movs	r3, #12
 800b5bc:	603b      	str	r3, [r7, #0]
 800b5be:	4638      	mov	r0, r7
 800b5c0:	f000 f87e 	bl	800b6c0 <__malloc_unlock>
 800b5c4:	e7a1      	b.n	800b50a <_malloc_r+0x22>
 800b5c6:	6025      	str	r5, [r4, #0]
 800b5c8:	e7de      	b.n	800b588 <_malloc_r+0xa0>
 800b5ca:	bf00      	nop
 800b5cc:	2000202c 	.word	0x2000202c

0800b5d0 <nan>:
 800b5d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b5d8 <nan+0x8>
 800b5d4:	4770      	bx	lr
 800b5d6:	bf00      	nop
 800b5d8:	00000000 	.word	0x00000000
 800b5dc:	7ff80000 	.word	0x7ff80000

0800b5e0 <_sbrk_r>:
 800b5e0:	b538      	push	{r3, r4, r5, lr}
 800b5e2:	4d06      	ldr	r5, [pc, #24]	; (800b5fc <_sbrk_r+0x1c>)
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	4604      	mov	r4, r0
 800b5e8:	4608      	mov	r0, r1
 800b5ea:	602b      	str	r3, [r5, #0]
 800b5ec:	f7f6 fa20 	bl	8001a30 <_sbrk>
 800b5f0:	1c43      	adds	r3, r0, #1
 800b5f2:	d102      	bne.n	800b5fa <_sbrk_r+0x1a>
 800b5f4:	682b      	ldr	r3, [r5, #0]
 800b5f6:	b103      	cbz	r3, 800b5fa <_sbrk_r+0x1a>
 800b5f8:	6023      	str	r3, [r4, #0]
 800b5fa:	bd38      	pop	{r3, r4, r5, pc}
 800b5fc:	20002034 	.word	0x20002034

0800b600 <strncmp>:
 800b600:	b510      	push	{r4, lr}
 800b602:	b17a      	cbz	r2, 800b624 <strncmp+0x24>
 800b604:	4603      	mov	r3, r0
 800b606:	3901      	subs	r1, #1
 800b608:	1884      	adds	r4, r0, r2
 800b60a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b60e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b612:	4290      	cmp	r0, r2
 800b614:	d101      	bne.n	800b61a <strncmp+0x1a>
 800b616:	42a3      	cmp	r3, r4
 800b618:	d101      	bne.n	800b61e <strncmp+0x1e>
 800b61a:	1a80      	subs	r0, r0, r2
 800b61c:	bd10      	pop	{r4, pc}
 800b61e:	2800      	cmp	r0, #0
 800b620:	d1f3      	bne.n	800b60a <strncmp+0xa>
 800b622:	e7fa      	b.n	800b61a <strncmp+0x1a>
 800b624:	4610      	mov	r0, r2
 800b626:	e7f9      	b.n	800b61c <strncmp+0x1c>

0800b628 <__ascii_wctomb>:
 800b628:	b149      	cbz	r1, 800b63e <__ascii_wctomb+0x16>
 800b62a:	2aff      	cmp	r2, #255	; 0xff
 800b62c:	bf85      	ittet	hi
 800b62e:	238a      	movhi	r3, #138	; 0x8a
 800b630:	6003      	strhi	r3, [r0, #0]
 800b632:	700a      	strbls	r2, [r1, #0]
 800b634:	f04f 30ff 	movhi.w	r0, #4294967295
 800b638:	bf98      	it	ls
 800b63a:	2001      	movls	r0, #1
 800b63c:	4770      	bx	lr
 800b63e:	4608      	mov	r0, r1
 800b640:	4770      	bx	lr
	...

0800b644 <__assert_func>:
 800b644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b646:	4614      	mov	r4, r2
 800b648:	461a      	mov	r2, r3
 800b64a:	4b09      	ldr	r3, [pc, #36]	; (800b670 <__assert_func+0x2c>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4605      	mov	r5, r0
 800b650:	68d8      	ldr	r0, [r3, #12]
 800b652:	b14c      	cbz	r4, 800b668 <__assert_func+0x24>
 800b654:	4b07      	ldr	r3, [pc, #28]	; (800b674 <__assert_func+0x30>)
 800b656:	9100      	str	r1, [sp, #0]
 800b658:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b65c:	4906      	ldr	r1, [pc, #24]	; (800b678 <__assert_func+0x34>)
 800b65e:	462b      	mov	r3, r5
 800b660:	f000 f80e 	bl	800b680 <fiprintf>
 800b664:	f000 fc2c 	bl	800bec0 <abort>
 800b668:	4b04      	ldr	r3, [pc, #16]	; (800b67c <__assert_func+0x38>)
 800b66a:	461c      	mov	r4, r3
 800b66c:	e7f3      	b.n	800b656 <__assert_func+0x12>
 800b66e:	bf00      	nop
 800b670:	200000fc 	.word	0x200000fc
 800b674:	0800c7fc 	.word	0x0800c7fc
 800b678:	0800c809 	.word	0x0800c809
 800b67c:	0800c837 	.word	0x0800c837

0800b680 <fiprintf>:
 800b680:	b40e      	push	{r1, r2, r3}
 800b682:	b503      	push	{r0, r1, lr}
 800b684:	4601      	mov	r1, r0
 800b686:	ab03      	add	r3, sp, #12
 800b688:	4805      	ldr	r0, [pc, #20]	; (800b6a0 <fiprintf+0x20>)
 800b68a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b68e:	6800      	ldr	r0, [r0, #0]
 800b690:	9301      	str	r3, [sp, #4]
 800b692:	f000 f891 	bl	800b7b8 <_vfiprintf_r>
 800b696:	b002      	add	sp, #8
 800b698:	f85d eb04 	ldr.w	lr, [sp], #4
 800b69c:	b003      	add	sp, #12
 800b69e:	4770      	bx	lr
 800b6a0:	200000fc 	.word	0x200000fc

0800b6a4 <malloc>:
 800b6a4:	4b02      	ldr	r3, [pc, #8]	; (800b6b0 <malloc+0xc>)
 800b6a6:	4601      	mov	r1, r0
 800b6a8:	6818      	ldr	r0, [r3, #0]
 800b6aa:	f7ff bf1d 	b.w	800b4e8 <_malloc_r>
 800b6ae:	bf00      	nop
 800b6b0:	200000fc 	.word	0x200000fc

0800b6b4 <__malloc_lock>:
 800b6b4:	4801      	ldr	r0, [pc, #4]	; (800b6bc <__malloc_lock+0x8>)
 800b6b6:	f000 bdc3 	b.w	800c240 <__retarget_lock_acquire_recursive>
 800b6ba:	bf00      	nop
 800b6bc:	20002038 	.word	0x20002038

0800b6c0 <__malloc_unlock>:
 800b6c0:	4801      	ldr	r0, [pc, #4]	; (800b6c8 <__malloc_unlock+0x8>)
 800b6c2:	f000 bdbe 	b.w	800c242 <__retarget_lock_release_recursive>
 800b6c6:	bf00      	nop
 800b6c8:	20002038 	.word	0x20002038

0800b6cc <_free_r>:
 800b6cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6ce:	2900      	cmp	r1, #0
 800b6d0:	d044      	beq.n	800b75c <_free_r+0x90>
 800b6d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6d6:	9001      	str	r0, [sp, #4]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	f1a1 0404 	sub.w	r4, r1, #4
 800b6de:	bfb8      	it	lt
 800b6e0:	18e4      	addlt	r4, r4, r3
 800b6e2:	f7ff ffe7 	bl	800b6b4 <__malloc_lock>
 800b6e6:	4a1e      	ldr	r2, [pc, #120]	; (800b760 <_free_r+0x94>)
 800b6e8:	9801      	ldr	r0, [sp, #4]
 800b6ea:	6813      	ldr	r3, [r2, #0]
 800b6ec:	b933      	cbnz	r3, 800b6fc <_free_r+0x30>
 800b6ee:	6063      	str	r3, [r4, #4]
 800b6f0:	6014      	str	r4, [r2, #0]
 800b6f2:	b003      	add	sp, #12
 800b6f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6f8:	f7ff bfe2 	b.w	800b6c0 <__malloc_unlock>
 800b6fc:	42a3      	cmp	r3, r4
 800b6fe:	d908      	bls.n	800b712 <_free_r+0x46>
 800b700:	6825      	ldr	r5, [r4, #0]
 800b702:	1961      	adds	r1, r4, r5
 800b704:	428b      	cmp	r3, r1
 800b706:	bf01      	itttt	eq
 800b708:	6819      	ldreq	r1, [r3, #0]
 800b70a:	685b      	ldreq	r3, [r3, #4]
 800b70c:	1949      	addeq	r1, r1, r5
 800b70e:	6021      	streq	r1, [r4, #0]
 800b710:	e7ed      	b.n	800b6ee <_free_r+0x22>
 800b712:	461a      	mov	r2, r3
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	b10b      	cbz	r3, 800b71c <_free_r+0x50>
 800b718:	42a3      	cmp	r3, r4
 800b71a:	d9fa      	bls.n	800b712 <_free_r+0x46>
 800b71c:	6811      	ldr	r1, [r2, #0]
 800b71e:	1855      	adds	r5, r2, r1
 800b720:	42a5      	cmp	r5, r4
 800b722:	d10b      	bne.n	800b73c <_free_r+0x70>
 800b724:	6824      	ldr	r4, [r4, #0]
 800b726:	4421      	add	r1, r4
 800b728:	1854      	adds	r4, r2, r1
 800b72a:	42a3      	cmp	r3, r4
 800b72c:	6011      	str	r1, [r2, #0]
 800b72e:	d1e0      	bne.n	800b6f2 <_free_r+0x26>
 800b730:	681c      	ldr	r4, [r3, #0]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	6053      	str	r3, [r2, #4]
 800b736:	4421      	add	r1, r4
 800b738:	6011      	str	r1, [r2, #0]
 800b73a:	e7da      	b.n	800b6f2 <_free_r+0x26>
 800b73c:	d902      	bls.n	800b744 <_free_r+0x78>
 800b73e:	230c      	movs	r3, #12
 800b740:	6003      	str	r3, [r0, #0]
 800b742:	e7d6      	b.n	800b6f2 <_free_r+0x26>
 800b744:	6825      	ldr	r5, [r4, #0]
 800b746:	1961      	adds	r1, r4, r5
 800b748:	428b      	cmp	r3, r1
 800b74a:	bf04      	itt	eq
 800b74c:	6819      	ldreq	r1, [r3, #0]
 800b74e:	685b      	ldreq	r3, [r3, #4]
 800b750:	6063      	str	r3, [r4, #4]
 800b752:	bf04      	itt	eq
 800b754:	1949      	addeq	r1, r1, r5
 800b756:	6021      	streq	r1, [r4, #0]
 800b758:	6054      	str	r4, [r2, #4]
 800b75a:	e7ca      	b.n	800b6f2 <_free_r+0x26>
 800b75c:	b003      	add	sp, #12
 800b75e:	bd30      	pop	{r4, r5, pc}
 800b760:	2000202c 	.word	0x2000202c

0800b764 <__sfputc_r>:
 800b764:	6893      	ldr	r3, [r2, #8]
 800b766:	3b01      	subs	r3, #1
 800b768:	2b00      	cmp	r3, #0
 800b76a:	b410      	push	{r4}
 800b76c:	6093      	str	r3, [r2, #8]
 800b76e:	da08      	bge.n	800b782 <__sfputc_r+0x1e>
 800b770:	6994      	ldr	r4, [r2, #24]
 800b772:	42a3      	cmp	r3, r4
 800b774:	db01      	blt.n	800b77a <__sfputc_r+0x16>
 800b776:	290a      	cmp	r1, #10
 800b778:	d103      	bne.n	800b782 <__sfputc_r+0x1e>
 800b77a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b77e:	f000 badf 	b.w	800bd40 <__swbuf_r>
 800b782:	6813      	ldr	r3, [r2, #0]
 800b784:	1c58      	adds	r0, r3, #1
 800b786:	6010      	str	r0, [r2, #0]
 800b788:	7019      	strb	r1, [r3, #0]
 800b78a:	4608      	mov	r0, r1
 800b78c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b790:	4770      	bx	lr

0800b792 <__sfputs_r>:
 800b792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b794:	4606      	mov	r6, r0
 800b796:	460f      	mov	r7, r1
 800b798:	4614      	mov	r4, r2
 800b79a:	18d5      	adds	r5, r2, r3
 800b79c:	42ac      	cmp	r4, r5
 800b79e:	d101      	bne.n	800b7a4 <__sfputs_r+0x12>
 800b7a0:	2000      	movs	r0, #0
 800b7a2:	e007      	b.n	800b7b4 <__sfputs_r+0x22>
 800b7a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7a8:	463a      	mov	r2, r7
 800b7aa:	4630      	mov	r0, r6
 800b7ac:	f7ff ffda 	bl	800b764 <__sfputc_r>
 800b7b0:	1c43      	adds	r3, r0, #1
 800b7b2:	d1f3      	bne.n	800b79c <__sfputs_r+0xa>
 800b7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b7b8 <_vfiprintf_r>:
 800b7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7bc:	460d      	mov	r5, r1
 800b7be:	b09d      	sub	sp, #116	; 0x74
 800b7c0:	4614      	mov	r4, r2
 800b7c2:	4698      	mov	r8, r3
 800b7c4:	4606      	mov	r6, r0
 800b7c6:	b118      	cbz	r0, 800b7d0 <_vfiprintf_r+0x18>
 800b7c8:	6983      	ldr	r3, [r0, #24]
 800b7ca:	b90b      	cbnz	r3, 800b7d0 <_vfiprintf_r+0x18>
 800b7cc:	f000 fc9a 	bl	800c104 <__sinit>
 800b7d0:	4b89      	ldr	r3, [pc, #548]	; (800b9f8 <_vfiprintf_r+0x240>)
 800b7d2:	429d      	cmp	r5, r3
 800b7d4:	d11b      	bne.n	800b80e <_vfiprintf_r+0x56>
 800b7d6:	6875      	ldr	r5, [r6, #4]
 800b7d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7da:	07d9      	lsls	r1, r3, #31
 800b7dc:	d405      	bmi.n	800b7ea <_vfiprintf_r+0x32>
 800b7de:	89ab      	ldrh	r3, [r5, #12]
 800b7e0:	059a      	lsls	r2, r3, #22
 800b7e2:	d402      	bmi.n	800b7ea <_vfiprintf_r+0x32>
 800b7e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7e6:	f000 fd2b 	bl	800c240 <__retarget_lock_acquire_recursive>
 800b7ea:	89ab      	ldrh	r3, [r5, #12]
 800b7ec:	071b      	lsls	r3, r3, #28
 800b7ee:	d501      	bpl.n	800b7f4 <_vfiprintf_r+0x3c>
 800b7f0:	692b      	ldr	r3, [r5, #16]
 800b7f2:	b9eb      	cbnz	r3, 800b830 <_vfiprintf_r+0x78>
 800b7f4:	4629      	mov	r1, r5
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	f000 faf4 	bl	800bde4 <__swsetup_r>
 800b7fc:	b1c0      	cbz	r0, 800b830 <_vfiprintf_r+0x78>
 800b7fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b800:	07dc      	lsls	r4, r3, #31
 800b802:	d50e      	bpl.n	800b822 <_vfiprintf_r+0x6a>
 800b804:	f04f 30ff 	mov.w	r0, #4294967295
 800b808:	b01d      	add	sp, #116	; 0x74
 800b80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80e:	4b7b      	ldr	r3, [pc, #492]	; (800b9fc <_vfiprintf_r+0x244>)
 800b810:	429d      	cmp	r5, r3
 800b812:	d101      	bne.n	800b818 <_vfiprintf_r+0x60>
 800b814:	68b5      	ldr	r5, [r6, #8]
 800b816:	e7df      	b.n	800b7d8 <_vfiprintf_r+0x20>
 800b818:	4b79      	ldr	r3, [pc, #484]	; (800ba00 <_vfiprintf_r+0x248>)
 800b81a:	429d      	cmp	r5, r3
 800b81c:	bf08      	it	eq
 800b81e:	68f5      	ldreq	r5, [r6, #12]
 800b820:	e7da      	b.n	800b7d8 <_vfiprintf_r+0x20>
 800b822:	89ab      	ldrh	r3, [r5, #12]
 800b824:	0598      	lsls	r0, r3, #22
 800b826:	d4ed      	bmi.n	800b804 <_vfiprintf_r+0x4c>
 800b828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b82a:	f000 fd0a 	bl	800c242 <__retarget_lock_release_recursive>
 800b82e:	e7e9      	b.n	800b804 <_vfiprintf_r+0x4c>
 800b830:	2300      	movs	r3, #0
 800b832:	9309      	str	r3, [sp, #36]	; 0x24
 800b834:	2320      	movs	r3, #32
 800b836:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b83a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b83e:	2330      	movs	r3, #48	; 0x30
 800b840:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ba04 <_vfiprintf_r+0x24c>
 800b844:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b848:	f04f 0901 	mov.w	r9, #1
 800b84c:	4623      	mov	r3, r4
 800b84e:	469a      	mov	sl, r3
 800b850:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b854:	b10a      	cbz	r2, 800b85a <_vfiprintf_r+0xa2>
 800b856:	2a25      	cmp	r2, #37	; 0x25
 800b858:	d1f9      	bne.n	800b84e <_vfiprintf_r+0x96>
 800b85a:	ebba 0b04 	subs.w	fp, sl, r4
 800b85e:	d00b      	beq.n	800b878 <_vfiprintf_r+0xc0>
 800b860:	465b      	mov	r3, fp
 800b862:	4622      	mov	r2, r4
 800b864:	4629      	mov	r1, r5
 800b866:	4630      	mov	r0, r6
 800b868:	f7ff ff93 	bl	800b792 <__sfputs_r>
 800b86c:	3001      	adds	r0, #1
 800b86e:	f000 80aa 	beq.w	800b9c6 <_vfiprintf_r+0x20e>
 800b872:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b874:	445a      	add	r2, fp
 800b876:	9209      	str	r2, [sp, #36]	; 0x24
 800b878:	f89a 3000 	ldrb.w	r3, [sl]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f000 80a2 	beq.w	800b9c6 <_vfiprintf_r+0x20e>
 800b882:	2300      	movs	r3, #0
 800b884:	f04f 32ff 	mov.w	r2, #4294967295
 800b888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b88c:	f10a 0a01 	add.w	sl, sl, #1
 800b890:	9304      	str	r3, [sp, #16]
 800b892:	9307      	str	r3, [sp, #28]
 800b894:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b898:	931a      	str	r3, [sp, #104]	; 0x68
 800b89a:	4654      	mov	r4, sl
 800b89c:	2205      	movs	r2, #5
 800b89e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8a2:	4858      	ldr	r0, [pc, #352]	; (800ba04 <_vfiprintf_r+0x24c>)
 800b8a4:	f7f4 fc9c 	bl	80001e0 <memchr>
 800b8a8:	9a04      	ldr	r2, [sp, #16]
 800b8aa:	b9d8      	cbnz	r0, 800b8e4 <_vfiprintf_r+0x12c>
 800b8ac:	06d1      	lsls	r1, r2, #27
 800b8ae:	bf44      	itt	mi
 800b8b0:	2320      	movmi	r3, #32
 800b8b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8b6:	0713      	lsls	r3, r2, #28
 800b8b8:	bf44      	itt	mi
 800b8ba:	232b      	movmi	r3, #43	; 0x2b
 800b8bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8c0:	f89a 3000 	ldrb.w	r3, [sl]
 800b8c4:	2b2a      	cmp	r3, #42	; 0x2a
 800b8c6:	d015      	beq.n	800b8f4 <_vfiprintf_r+0x13c>
 800b8c8:	9a07      	ldr	r2, [sp, #28]
 800b8ca:	4654      	mov	r4, sl
 800b8cc:	2000      	movs	r0, #0
 800b8ce:	f04f 0c0a 	mov.w	ip, #10
 800b8d2:	4621      	mov	r1, r4
 800b8d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8d8:	3b30      	subs	r3, #48	; 0x30
 800b8da:	2b09      	cmp	r3, #9
 800b8dc:	d94e      	bls.n	800b97c <_vfiprintf_r+0x1c4>
 800b8de:	b1b0      	cbz	r0, 800b90e <_vfiprintf_r+0x156>
 800b8e0:	9207      	str	r2, [sp, #28]
 800b8e2:	e014      	b.n	800b90e <_vfiprintf_r+0x156>
 800b8e4:	eba0 0308 	sub.w	r3, r0, r8
 800b8e8:	fa09 f303 	lsl.w	r3, r9, r3
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	9304      	str	r3, [sp, #16]
 800b8f0:	46a2      	mov	sl, r4
 800b8f2:	e7d2      	b.n	800b89a <_vfiprintf_r+0xe2>
 800b8f4:	9b03      	ldr	r3, [sp, #12]
 800b8f6:	1d19      	adds	r1, r3, #4
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	9103      	str	r1, [sp, #12]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	bfbb      	ittet	lt
 800b900:	425b      	neglt	r3, r3
 800b902:	f042 0202 	orrlt.w	r2, r2, #2
 800b906:	9307      	strge	r3, [sp, #28]
 800b908:	9307      	strlt	r3, [sp, #28]
 800b90a:	bfb8      	it	lt
 800b90c:	9204      	strlt	r2, [sp, #16]
 800b90e:	7823      	ldrb	r3, [r4, #0]
 800b910:	2b2e      	cmp	r3, #46	; 0x2e
 800b912:	d10c      	bne.n	800b92e <_vfiprintf_r+0x176>
 800b914:	7863      	ldrb	r3, [r4, #1]
 800b916:	2b2a      	cmp	r3, #42	; 0x2a
 800b918:	d135      	bne.n	800b986 <_vfiprintf_r+0x1ce>
 800b91a:	9b03      	ldr	r3, [sp, #12]
 800b91c:	1d1a      	adds	r2, r3, #4
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	9203      	str	r2, [sp, #12]
 800b922:	2b00      	cmp	r3, #0
 800b924:	bfb8      	it	lt
 800b926:	f04f 33ff 	movlt.w	r3, #4294967295
 800b92a:	3402      	adds	r4, #2
 800b92c:	9305      	str	r3, [sp, #20]
 800b92e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba14 <_vfiprintf_r+0x25c>
 800b932:	7821      	ldrb	r1, [r4, #0]
 800b934:	2203      	movs	r2, #3
 800b936:	4650      	mov	r0, sl
 800b938:	f7f4 fc52 	bl	80001e0 <memchr>
 800b93c:	b140      	cbz	r0, 800b950 <_vfiprintf_r+0x198>
 800b93e:	2340      	movs	r3, #64	; 0x40
 800b940:	eba0 000a 	sub.w	r0, r0, sl
 800b944:	fa03 f000 	lsl.w	r0, r3, r0
 800b948:	9b04      	ldr	r3, [sp, #16]
 800b94a:	4303      	orrs	r3, r0
 800b94c:	3401      	adds	r4, #1
 800b94e:	9304      	str	r3, [sp, #16]
 800b950:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b954:	482c      	ldr	r0, [pc, #176]	; (800ba08 <_vfiprintf_r+0x250>)
 800b956:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b95a:	2206      	movs	r2, #6
 800b95c:	f7f4 fc40 	bl	80001e0 <memchr>
 800b960:	2800      	cmp	r0, #0
 800b962:	d03f      	beq.n	800b9e4 <_vfiprintf_r+0x22c>
 800b964:	4b29      	ldr	r3, [pc, #164]	; (800ba0c <_vfiprintf_r+0x254>)
 800b966:	bb1b      	cbnz	r3, 800b9b0 <_vfiprintf_r+0x1f8>
 800b968:	9b03      	ldr	r3, [sp, #12]
 800b96a:	3307      	adds	r3, #7
 800b96c:	f023 0307 	bic.w	r3, r3, #7
 800b970:	3308      	adds	r3, #8
 800b972:	9303      	str	r3, [sp, #12]
 800b974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b976:	443b      	add	r3, r7
 800b978:	9309      	str	r3, [sp, #36]	; 0x24
 800b97a:	e767      	b.n	800b84c <_vfiprintf_r+0x94>
 800b97c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b980:	460c      	mov	r4, r1
 800b982:	2001      	movs	r0, #1
 800b984:	e7a5      	b.n	800b8d2 <_vfiprintf_r+0x11a>
 800b986:	2300      	movs	r3, #0
 800b988:	3401      	adds	r4, #1
 800b98a:	9305      	str	r3, [sp, #20]
 800b98c:	4619      	mov	r1, r3
 800b98e:	f04f 0c0a 	mov.w	ip, #10
 800b992:	4620      	mov	r0, r4
 800b994:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b998:	3a30      	subs	r2, #48	; 0x30
 800b99a:	2a09      	cmp	r2, #9
 800b99c:	d903      	bls.n	800b9a6 <_vfiprintf_r+0x1ee>
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d0c5      	beq.n	800b92e <_vfiprintf_r+0x176>
 800b9a2:	9105      	str	r1, [sp, #20]
 800b9a4:	e7c3      	b.n	800b92e <_vfiprintf_r+0x176>
 800b9a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9aa:	4604      	mov	r4, r0
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	e7f0      	b.n	800b992 <_vfiprintf_r+0x1da>
 800b9b0:	ab03      	add	r3, sp, #12
 800b9b2:	9300      	str	r3, [sp, #0]
 800b9b4:	462a      	mov	r2, r5
 800b9b6:	4b16      	ldr	r3, [pc, #88]	; (800ba10 <_vfiprintf_r+0x258>)
 800b9b8:	a904      	add	r1, sp, #16
 800b9ba:	4630      	mov	r0, r6
 800b9bc:	f3af 8000 	nop.w
 800b9c0:	4607      	mov	r7, r0
 800b9c2:	1c78      	adds	r0, r7, #1
 800b9c4:	d1d6      	bne.n	800b974 <_vfiprintf_r+0x1bc>
 800b9c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9c8:	07d9      	lsls	r1, r3, #31
 800b9ca:	d405      	bmi.n	800b9d8 <_vfiprintf_r+0x220>
 800b9cc:	89ab      	ldrh	r3, [r5, #12]
 800b9ce:	059a      	lsls	r2, r3, #22
 800b9d0:	d402      	bmi.n	800b9d8 <_vfiprintf_r+0x220>
 800b9d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9d4:	f000 fc35 	bl	800c242 <__retarget_lock_release_recursive>
 800b9d8:	89ab      	ldrh	r3, [r5, #12]
 800b9da:	065b      	lsls	r3, r3, #25
 800b9dc:	f53f af12 	bmi.w	800b804 <_vfiprintf_r+0x4c>
 800b9e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9e2:	e711      	b.n	800b808 <_vfiprintf_r+0x50>
 800b9e4:	ab03      	add	r3, sp, #12
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	462a      	mov	r2, r5
 800b9ea:	4b09      	ldr	r3, [pc, #36]	; (800ba10 <_vfiprintf_r+0x258>)
 800b9ec:	a904      	add	r1, sp, #16
 800b9ee:	4630      	mov	r0, r6
 800b9f0:	f000 f880 	bl	800baf4 <_printf_i>
 800b9f4:	e7e4      	b.n	800b9c0 <_vfiprintf_r+0x208>
 800b9f6:	bf00      	nop
 800b9f8:	0800c98c 	.word	0x0800c98c
 800b9fc:	0800c9ac 	.word	0x0800c9ac
 800ba00:	0800c96c 	.word	0x0800c96c
 800ba04:	0800c939 	.word	0x0800c939
 800ba08:	0800c943 	.word	0x0800c943
 800ba0c:	00000000 	.word	0x00000000
 800ba10:	0800b793 	.word	0x0800b793
 800ba14:	0800c93f 	.word	0x0800c93f

0800ba18 <_printf_common>:
 800ba18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba1c:	4616      	mov	r6, r2
 800ba1e:	4699      	mov	r9, r3
 800ba20:	688a      	ldr	r2, [r1, #8]
 800ba22:	690b      	ldr	r3, [r1, #16]
 800ba24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	bfb8      	it	lt
 800ba2c:	4613      	movlt	r3, r2
 800ba2e:	6033      	str	r3, [r6, #0]
 800ba30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba34:	4607      	mov	r7, r0
 800ba36:	460c      	mov	r4, r1
 800ba38:	b10a      	cbz	r2, 800ba3e <_printf_common+0x26>
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	6033      	str	r3, [r6, #0]
 800ba3e:	6823      	ldr	r3, [r4, #0]
 800ba40:	0699      	lsls	r1, r3, #26
 800ba42:	bf42      	ittt	mi
 800ba44:	6833      	ldrmi	r3, [r6, #0]
 800ba46:	3302      	addmi	r3, #2
 800ba48:	6033      	strmi	r3, [r6, #0]
 800ba4a:	6825      	ldr	r5, [r4, #0]
 800ba4c:	f015 0506 	ands.w	r5, r5, #6
 800ba50:	d106      	bne.n	800ba60 <_printf_common+0x48>
 800ba52:	f104 0a19 	add.w	sl, r4, #25
 800ba56:	68e3      	ldr	r3, [r4, #12]
 800ba58:	6832      	ldr	r2, [r6, #0]
 800ba5a:	1a9b      	subs	r3, r3, r2
 800ba5c:	42ab      	cmp	r3, r5
 800ba5e:	dc26      	bgt.n	800baae <_printf_common+0x96>
 800ba60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba64:	1e13      	subs	r3, r2, #0
 800ba66:	6822      	ldr	r2, [r4, #0]
 800ba68:	bf18      	it	ne
 800ba6a:	2301      	movne	r3, #1
 800ba6c:	0692      	lsls	r2, r2, #26
 800ba6e:	d42b      	bmi.n	800bac8 <_printf_common+0xb0>
 800ba70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba74:	4649      	mov	r1, r9
 800ba76:	4638      	mov	r0, r7
 800ba78:	47c0      	blx	r8
 800ba7a:	3001      	adds	r0, #1
 800ba7c:	d01e      	beq.n	800babc <_printf_common+0xa4>
 800ba7e:	6823      	ldr	r3, [r4, #0]
 800ba80:	68e5      	ldr	r5, [r4, #12]
 800ba82:	6832      	ldr	r2, [r6, #0]
 800ba84:	f003 0306 	and.w	r3, r3, #6
 800ba88:	2b04      	cmp	r3, #4
 800ba8a:	bf08      	it	eq
 800ba8c:	1aad      	subeq	r5, r5, r2
 800ba8e:	68a3      	ldr	r3, [r4, #8]
 800ba90:	6922      	ldr	r2, [r4, #16]
 800ba92:	bf0c      	ite	eq
 800ba94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba98:	2500      	movne	r5, #0
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	bfc4      	itt	gt
 800ba9e:	1a9b      	subgt	r3, r3, r2
 800baa0:	18ed      	addgt	r5, r5, r3
 800baa2:	2600      	movs	r6, #0
 800baa4:	341a      	adds	r4, #26
 800baa6:	42b5      	cmp	r5, r6
 800baa8:	d11a      	bne.n	800bae0 <_printf_common+0xc8>
 800baaa:	2000      	movs	r0, #0
 800baac:	e008      	b.n	800bac0 <_printf_common+0xa8>
 800baae:	2301      	movs	r3, #1
 800bab0:	4652      	mov	r2, sl
 800bab2:	4649      	mov	r1, r9
 800bab4:	4638      	mov	r0, r7
 800bab6:	47c0      	blx	r8
 800bab8:	3001      	adds	r0, #1
 800baba:	d103      	bne.n	800bac4 <_printf_common+0xac>
 800babc:	f04f 30ff 	mov.w	r0, #4294967295
 800bac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bac4:	3501      	adds	r5, #1
 800bac6:	e7c6      	b.n	800ba56 <_printf_common+0x3e>
 800bac8:	18e1      	adds	r1, r4, r3
 800baca:	1c5a      	adds	r2, r3, #1
 800bacc:	2030      	movs	r0, #48	; 0x30
 800bace:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bad2:	4422      	add	r2, r4
 800bad4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bad8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800badc:	3302      	adds	r3, #2
 800bade:	e7c7      	b.n	800ba70 <_printf_common+0x58>
 800bae0:	2301      	movs	r3, #1
 800bae2:	4622      	mov	r2, r4
 800bae4:	4649      	mov	r1, r9
 800bae6:	4638      	mov	r0, r7
 800bae8:	47c0      	blx	r8
 800baea:	3001      	adds	r0, #1
 800baec:	d0e6      	beq.n	800babc <_printf_common+0xa4>
 800baee:	3601      	adds	r6, #1
 800baf0:	e7d9      	b.n	800baa6 <_printf_common+0x8e>
	...

0800baf4 <_printf_i>:
 800baf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800baf8:	7e0f      	ldrb	r7, [r1, #24]
 800bafa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bafc:	2f78      	cmp	r7, #120	; 0x78
 800bafe:	4691      	mov	r9, r2
 800bb00:	4680      	mov	r8, r0
 800bb02:	460c      	mov	r4, r1
 800bb04:	469a      	mov	sl, r3
 800bb06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bb0a:	d807      	bhi.n	800bb1c <_printf_i+0x28>
 800bb0c:	2f62      	cmp	r7, #98	; 0x62
 800bb0e:	d80a      	bhi.n	800bb26 <_printf_i+0x32>
 800bb10:	2f00      	cmp	r7, #0
 800bb12:	f000 80d8 	beq.w	800bcc6 <_printf_i+0x1d2>
 800bb16:	2f58      	cmp	r7, #88	; 0x58
 800bb18:	f000 80a3 	beq.w	800bc62 <_printf_i+0x16e>
 800bb1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb24:	e03a      	b.n	800bb9c <_printf_i+0xa8>
 800bb26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb2a:	2b15      	cmp	r3, #21
 800bb2c:	d8f6      	bhi.n	800bb1c <_printf_i+0x28>
 800bb2e:	a101      	add	r1, pc, #4	; (adr r1, 800bb34 <_printf_i+0x40>)
 800bb30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb34:	0800bb8d 	.word	0x0800bb8d
 800bb38:	0800bba1 	.word	0x0800bba1
 800bb3c:	0800bb1d 	.word	0x0800bb1d
 800bb40:	0800bb1d 	.word	0x0800bb1d
 800bb44:	0800bb1d 	.word	0x0800bb1d
 800bb48:	0800bb1d 	.word	0x0800bb1d
 800bb4c:	0800bba1 	.word	0x0800bba1
 800bb50:	0800bb1d 	.word	0x0800bb1d
 800bb54:	0800bb1d 	.word	0x0800bb1d
 800bb58:	0800bb1d 	.word	0x0800bb1d
 800bb5c:	0800bb1d 	.word	0x0800bb1d
 800bb60:	0800bcad 	.word	0x0800bcad
 800bb64:	0800bbd1 	.word	0x0800bbd1
 800bb68:	0800bc8f 	.word	0x0800bc8f
 800bb6c:	0800bb1d 	.word	0x0800bb1d
 800bb70:	0800bb1d 	.word	0x0800bb1d
 800bb74:	0800bccf 	.word	0x0800bccf
 800bb78:	0800bb1d 	.word	0x0800bb1d
 800bb7c:	0800bbd1 	.word	0x0800bbd1
 800bb80:	0800bb1d 	.word	0x0800bb1d
 800bb84:	0800bb1d 	.word	0x0800bb1d
 800bb88:	0800bc97 	.word	0x0800bc97
 800bb8c:	682b      	ldr	r3, [r5, #0]
 800bb8e:	1d1a      	adds	r2, r3, #4
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	602a      	str	r2, [r5, #0]
 800bb94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	e0a3      	b.n	800bce8 <_printf_i+0x1f4>
 800bba0:	6820      	ldr	r0, [r4, #0]
 800bba2:	6829      	ldr	r1, [r5, #0]
 800bba4:	0606      	lsls	r6, r0, #24
 800bba6:	f101 0304 	add.w	r3, r1, #4
 800bbaa:	d50a      	bpl.n	800bbc2 <_printf_i+0xce>
 800bbac:	680e      	ldr	r6, [r1, #0]
 800bbae:	602b      	str	r3, [r5, #0]
 800bbb0:	2e00      	cmp	r6, #0
 800bbb2:	da03      	bge.n	800bbbc <_printf_i+0xc8>
 800bbb4:	232d      	movs	r3, #45	; 0x2d
 800bbb6:	4276      	negs	r6, r6
 800bbb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbbc:	485e      	ldr	r0, [pc, #376]	; (800bd38 <_printf_i+0x244>)
 800bbbe:	230a      	movs	r3, #10
 800bbc0:	e019      	b.n	800bbf6 <_printf_i+0x102>
 800bbc2:	680e      	ldr	r6, [r1, #0]
 800bbc4:	602b      	str	r3, [r5, #0]
 800bbc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bbca:	bf18      	it	ne
 800bbcc:	b236      	sxthne	r6, r6
 800bbce:	e7ef      	b.n	800bbb0 <_printf_i+0xbc>
 800bbd0:	682b      	ldr	r3, [r5, #0]
 800bbd2:	6820      	ldr	r0, [r4, #0]
 800bbd4:	1d19      	adds	r1, r3, #4
 800bbd6:	6029      	str	r1, [r5, #0]
 800bbd8:	0601      	lsls	r1, r0, #24
 800bbda:	d501      	bpl.n	800bbe0 <_printf_i+0xec>
 800bbdc:	681e      	ldr	r6, [r3, #0]
 800bbde:	e002      	b.n	800bbe6 <_printf_i+0xf2>
 800bbe0:	0646      	lsls	r6, r0, #25
 800bbe2:	d5fb      	bpl.n	800bbdc <_printf_i+0xe8>
 800bbe4:	881e      	ldrh	r6, [r3, #0]
 800bbe6:	4854      	ldr	r0, [pc, #336]	; (800bd38 <_printf_i+0x244>)
 800bbe8:	2f6f      	cmp	r7, #111	; 0x6f
 800bbea:	bf0c      	ite	eq
 800bbec:	2308      	moveq	r3, #8
 800bbee:	230a      	movne	r3, #10
 800bbf0:	2100      	movs	r1, #0
 800bbf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bbf6:	6865      	ldr	r5, [r4, #4]
 800bbf8:	60a5      	str	r5, [r4, #8]
 800bbfa:	2d00      	cmp	r5, #0
 800bbfc:	bfa2      	ittt	ge
 800bbfe:	6821      	ldrge	r1, [r4, #0]
 800bc00:	f021 0104 	bicge.w	r1, r1, #4
 800bc04:	6021      	strge	r1, [r4, #0]
 800bc06:	b90e      	cbnz	r6, 800bc0c <_printf_i+0x118>
 800bc08:	2d00      	cmp	r5, #0
 800bc0a:	d04d      	beq.n	800bca8 <_printf_i+0x1b4>
 800bc0c:	4615      	mov	r5, r2
 800bc0e:	fbb6 f1f3 	udiv	r1, r6, r3
 800bc12:	fb03 6711 	mls	r7, r3, r1, r6
 800bc16:	5dc7      	ldrb	r7, [r0, r7]
 800bc18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bc1c:	4637      	mov	r7, r6
 800bc1e:	42bb      	cmp	r3, r7
 800bc20:	460e      	mov	r6, r1
 800bc22:	d9f4      	bls.n	800bc0e <_printf_i+0x11a>
 800bc24:	2b08      	cmp	r3, #8
 800bc26:	d10b      	bne.n	800bc40 <_printf_i+0x14c>
 800bc28:	6823      	ldr	r3, [r4, #0]
 800bc2a:	07de      	lsls	r6, r3, #31
 800bc2c:	d508      	bpl.n	800bc40 <_printf_i+0x14c>
 800bc2e:	6923      	ldr	r3, [r4, #16]
 800bc30:	6861      	ldr	r1, [r4, #4]
 800bc32:	4299      	cmp	r1, r3
 800bc34:	bfde      	ittt	le
 800bc36:	2330      	movle	r3, #48	; 0x30
 800bc38:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bc40:	1b52      	subs	r2, r2, r5
 800bc42:	6122      	str	r2, [r4, #16]
 800bc44:	f8cd a000 	str.w	sl, [sp]
 800bc48:	464b      	mov	r3, r9
 800bc4a:	aa03      	add	r2, sp, #12
 800bc4c:	4621      	mov	r1, r4
 800bc4e:	4640      	mov	r0, r8
 800bc50:	f7ff fee2 	bl	800ba18 <_printf_common>
 800bc54:	3001      	adds	r0, #1
 800bc56:	d14c      	bne.n	800bcf2 <_printf_i+0x1fe>
 800bc58:	f04f 30ff 	mov.w	r0, #4294967295
 800bc5c:	b004      	add	sp, #16
 800bc5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc62:	4835      	ldr	r0, [pc, #212]	; (800bd38 <_printf_i+0x244>)
 800bc64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bc68:	6829      	ldr	r1, [r5, #0]
 800bc6a:	6823      	ldr	r3, [r4, #0]
 800bc6c:	f851 6b04 	ldr.w	r6, [r1], #4
 800bc70:	6029      	str	r1, [r5, #0]
 800bc72:	061d      	lsls	r5, r3, #24
 800bc74:	d514      	bpl.n	800bca0 <_printf_i+0x1ac>
 800bc76:	07df      	lsls	r7, r3, #31
 800bc78:	bf44      	itt	mi
 800bc7a:	f043 0320 	orrmi.w	r3, r3, #32
 800bc7e:	6023      	strmi	r3, [r4, #0]
 800bc80:	b91e      	cbnz	r6, 800bc8a <_printf_i+0x196>
 800bc82:	6823      	ldr	r3, [r4, #0]
 800bc84:	f023 0320 	bic.w	r3, r3, #32
 800bc88:	6023      	str	r3, [r4, #0]
 800bc8a:	2310      	movs	r3, #16
 800bc8c:	e7b0      	b.n	800bbf0 <_printf_i+0xfc>
 800bc8e:	6823      	ldr	r3, [r4, #0]
 800bc90:	f043 0320 	orr.w	r3, r3, #32
 800bc94:	6023      	str	r3, [r4, #0]
 800bc96:	2378      	movs	r3, #120	; 0x78
 800bc98:	4828      	ldr	r0, [pc, #160]	; (800bd3c <_printf_i+0x248>)
 800bc9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bc9e:	e7e3      	b.n	800bc68 <_printf_i+0x174>
 800bca0:	0659      	lsls	r1, r3, #25
 800bca2:	bf48      	it	mi
 800bca4:	b2b6      	uxthmi	r6, r6
 800bca6:	e7e6      	b.n	800bc76 <_printf_i+0x182>
 800bca8:	4615      	mov	r5, r2
 800bcaa:	e7bb      	b.n	800bc24 <_printf_i+0x130>
 800bcac:	682b      	ldr	r3, [r5, #0]
 800bcae:	6826      	ldr	r6, [r4, #0]
 800bcb0:	6961      	ldr	r1, [r4, #20]
 800bcb2:	1d18      	adds	r0, r3, #4
 800bcb4:	6028      	str	r0, [r5, #0]
 800bcb6:	0635      	lsls	r5, r6, #24
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	d501      	bpl.n	800bcc0 <_printf_i+0x1cc>
 800bcbc:	6019      	str	r1, [r3, #0]
 800bcbe:	e002      	b.n	800bcc6 <_printf_i+0x1d2>
 800bcc0:	0670      	lsls	r0, r6, #25
 800bcc2:	d5fb      	bpl.n	800bcbc <_printf_i+0x1c8>
 800bcc4:	8019      	strh	r1, [r3, #0]
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	6123      	str	r3, [r4, #16]
 800bcca:	4615      	mov	r5, r2
 800bccc:	e7ba      	b.n	800bc44 <_printf_i+0x150>
 800bcce:	682b      	ldr	r3, [r5, #0]
 800bcd0:	1d1a      	adds	r2, r3, #4
 800bcd2:	602a      	str	r2, [r5, #0]
 800bcd4:	681d      	ldr	r5, [r3, #0]
 800bcd6:	6862      	ldr	r2, [r4, #4]
 800bcd8:	2100      	movs	r1, #0
 800bcda:	4628      	mov	r0, r5
 800bcdc:	f7f4 fa80 	bl	80001e0 <memchr>
 800bce0:	b108      	cbz	r0, 800bce6 <_printf_i+0x1f2>
 800bce2:	1b40      	subs	r0, r0, r5
 800bce4:	6060      	str	r0, [r4, #4]
 800bce6:	6863      	ldr	r3, [r4, #4]
 800bce8:	6123      	str	r3, [r4, #16]
 800bcea:	2300      	movs	r3, #0
 800bcec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcf0:	e7a8      	b.n	800bc44 <_printf_i+0x150>
 800bcf2:	6923      	ldr	r3, [r4, #16]
 800bcf4:	462a      	mov	r2, r5
 800bcf6:	4649      	mov	r1, r9
 800bcf8:	4640      	mov	r0, r8
 800bcfa:	47d0      	blx	sl
 800bcfc:	3001      	adds	r0, #1
 800bcfe:	d0ab      	beq.n	800bc58 <_printf_i+0x164>
 800bd00:	6823      	ldr	r3, [r4, #0]
 800bd02:	079b      	lsls	r3, r3, #30
 800bd04:	d413      	bmi.n	800bd2e <_printf_i+0x23a>
 800bd06:	68e0      	ldr	r0, [r4, #12]
 800bd08:	9b03      	ldr	r3, [sp, #12]
 800bd0a:	4298      	cmp	r0, r3
 800bd0c:	bfb8      	it	lt
 800bd0e:	4618      	movlt	r0, r3
 800bd10:	e7a4      	b.n	800bc5c <_printf_i+0x168>
 800bd12:	2301      	movs	r3, #1
 800bd14:	4632      	mov	r2, r6
 800bd16:	4649      	mov	r1, r9
 800bd18:	4640      	mov	r0, r8
 800bd1a:	47d0      	blx	sl
 800bd1c:	3001      	adds	r0, #1
 800bd1e:	d09b      	beq.n	800bc58 <_printf_i+0x164>
 800bd20:	3501      	adds	r5, #1
 800bd22:	68e3      	ldr	r3, [r4, #12]
 800bd24:	9903      	ldr	r1, [sp, #12]
 800bd26:	1a5b      	subs	r3, r3, r1
 800bd28:	42ab      	cmp	r3, r5
 800bd2a:	dcf2      	bgt.n	800bd12 <_printf_i+0x21e>
 800bd2c:	e7eb      	b.n	800bd06 <_printf_i+0x212>
 800bd2e:	2500      	movs	r5, #0
 800bd30:	f104 0619 	add.w	r6, r4, #25
 800bd34:	e7f5      	b.n	800bd22 <_printf_i+0x22e>
 800bd36:	bf00      	nop
 800bd38:	0800c94a 	.word	0x0800c94a
 800bd3c:	0800c95b 	.word	0x0800c95b

0800bd40 <__swbuf_r>:
 800bd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd42:	460e      	mov	r6, r1
 800bd44:	4614      	mov	r4, r2
 800bd46:	4605      	mov	r5, r0
 800bd48:	b118      	cbz	r0, 800bd52 <__swbuf_r+0x12>
 800bd4a:	6983      	ldr	r3, [r0, #24]
 800bd4c:	b90b      	cbnz	r3, 800bd52 <__swbuf_r+0x12>
 800bd4e:	f000 f9d9 	bl	800c104 <__sinit>
 800bd52:	4b21      	ldr	r3, [pc, #132]	; (800bdd8 <__swbuf_r+0x98>)
 800bd54:	429c      	cmp	r4, r3
 800bd56:	d12b      	bne.n	800bdb0 <__swbuf_r+0x70>
 800bd58:	686c      	ldr	r4, [r5, #4]
 800bd5a:	69a3      	ldr	r3, [r4, #24]
 800bd5c:	60a3      	str	r3, [r4, #8]
 800bd5e:	89a3      	ldrh	r3, [r4, #12]
 800bd60:	071a      	lsls	r2, r3, #28
 800bd62:	d52f      	bpl.n	800bdc4 <__swbuf_r+0x84>
 800bd64:	6923      	ldr	r3, [r4, #16]
 800bd66:	b36b      	cbz	r3, 800bdc4 <__swbuf_r+0x84>
 800bd68:	6923      	ldr	r3, [r4, #16]
 800bd6a:	6820      	ldr	r0, [r4, #0]
 800bd6c:	1ac0      	subs	r0, r0, r3
 800bd6e:	6963      	ldr	r3, [r4, #20]
 800bd70:	b2f6      	uxtb	r6, r6
 800bd72:	4283      	cmp	r3, r0
 800bd74:	4637      	mov	r7, r6
 800bd76:	dc04      	bgt.n	800bd82 <__swbuf_r+0x42>
 800bd78:	4621      	mov	r1, r4
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	f000 f92e 	bl	800bfdc <_fflush_r>
 800bd80:	bb30      	cbnz	r0, 800bdd0 <__swbuf_r+0x90>
 800bd82:	68a3      	ldr	r3, [r4, #8]
 800bd84:	3b01      	subs	r3, #1
 800bd86:	60a3      	str	r3, [r4, #8]
 800bd88:	6823      	ldr	r3, [r4, #0]
 800bd8a:	1c5a      	adds	r2, r3, #1
 800bd8c:	6022      	str	r2, [r4, #0]
 800bd8e:	701e      	strb	r6, [r3, #0]
 800bd90:	6963      	ldr	r3, [r4, #20]
 800bd92:	3001      	adds	r0, #1
 800bd94:	4283      	cmp	r3, r0
 800bd96:	d004      	beq.n	800bda2 <__swbuf_r+0x62>
 800bd98:	89a3      	ldrh	r3, [r4, #12]
 800bd9a:	07db      	lsls	r3, r3, #31
 800bd9c:	d506      	bpl.n	800bdac <__swbuf_r+0x6c>
 800bd9e:	2e0a      	cmp	r6, #10
 800bda0:	d104      	bne.n	800bdac <__swbuf_r+0x6c>
 800bda2:	4621      	mov	r1, r4
 800bda4:	4628      	mov	r0, r5
 800bda6:	f000 f919 	bl	800bfdc <_fflush_r>
 800bdaa:	b988      	cbnz	r0, 800bdd0 <__swbuf_r+0x90>
 800bdac:	4638      	mov	r0, r7
 800bdae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdb0:	4b0a      	ldr	r3, [pc, #40]	; (800bddc <__swbuf_r+0x9c>)
 800bdb2:	429c      	cmp	r4, r3
 800bdb4:	d101      	bne.n	800bdba <__swbuf_r+0x7a>
 800bdb6:	68ac      	ldr	r4, [r5, #8]
 800bdb8:	e7cf      	b.n	800bd5a <__swbuf_r+0x1a>
 800bdba:	4b09      	ldr	r3, [pc, #36]	; (800bde0 <__swbuf_r+0xa0>)
 800bdbc:	429c      	cmp	r4, r3
 800bdbe:	bf08      	it	eq
 800bdc0:	68ec      	ldreq	r4, [r5, #12]
 800bdc2:	e7ca      	b.n	800bd5a <__swbuf_r+0x1a>
 800bdc4:	4621      	mov	r1, r4
 800bdc6:	4628      	mov	r0, r5
 800bdc8:	f000 f80c 	bl	800bde4 <__swsetup_r>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	d0cb      	beq.n	800bd68 <__swbuf_r+0x28>
 800bdd0:	f04f 37ff 	mov.w	r7, #4294967295
 800bdd4:	e7ea      	b.n	800bdac <__swbuf_r+0x6c>
 800bdd6:	bf00      	nop
 800bdd8:	0800c98c 	.word	0x0800c98c
 800bddc:	0800c9ac 	.word	0x0800c9ac
 800bde0:	0800c96c 	.word	0x0800c96c

0800bde4 <__swsetup_r>:
 800bde4:	4b32      	ldr	r3, [pc, #200]	; (800beb0 <__swsetup_r+0xcc>)
 800bde6:	b570      	push	{r4, r5, r6, lr}
 800bde8:	681d      	ldr	r5, [r3, #0]
 800bdea:	4606      	mov	r6, r0
 800bdec:	460c      	mov	r4, r1
 800bdee:	b125      	cbz	r5, 800bdfa <__swsetup_r+0x16>
 800bdf0:	69ab      	ldr	r3, [r5, #24]
 800bdf2:	b913      	cbnz	r3, 800bdfa <__swsetup_r+0x16>
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	f000 f985 	bl	800c104 <__sinit>
 800bdfa:	4b2e      	ldr	r3, [pc, #184]	; (800beb4 <__swsetup_r+0xd0>)
 800bdfc:	429c      	cmp	r4, r3
 800bdfe:	d10f      	bne.n	800be20 <__swsetup_r+0x3c>
 800be00:	686c      	ldr	r4, [r5, #4]
 800be02:	89a3      	ldrh	r3, [r4, #12]
 800be04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be08:	0719      	lsls	r1, r3, #28
 800be0a:	d42c      	bmi.n	800be66 <__swsetup_r+0x82>
 800be0c:	06dd      	lsls	r5, r3, #27
 800be0e:	d411      	bmi.n	800be34 <__swsetup_r+0x50>
 800be10:	2309      	movs	r3, #9
 800be12:	6033      	str	r3, [r6, #0]
 800be14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be18:	81a3      	strh	r3, [r4, #12]
 800be1a:	f04f 30ff 	mov.w	r0, #4294967295
 800be1e:	e03e      	b.n	800be9e <__swsetup_r+0xba>
 800be20:	4b25      	ldr	r3, [pc, #148]	; (800beb8 <__swsetup_r+0xd4>)
 800be22:	429c      	cmp	r4, r3
 800be24:	d101      	bne.n	800be2a <__swsetup_r+0x46>
 800be26:	68ac      	ldr	r4, [r5, #8]
 800be28:	e7eb      	b.n	800be02 <__swsetup_r+0x1e>
 800be2a:	4b24      	ldr	r3, [pc, #144]	; (800bebc <__swsetup_r+0xd8>)
 800be2c:	429c      	cmp	r4, r3
 800be2e:	bf08      	it	eq
 800be30:	68ec      	ldreq	r4, [r5, #12]
 800be32:	e7e6      	b.n	800be02 <__swsetup_r+0x1e>
 800be34:	0758      	lsls	r0, r3, #29
 800be36:	d512      	bpl.n	800be5e <__swsetup_r+0x7a>
 800be38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be3a:	b141      	cbz	r1, 800be4e <__swsetup_r+0x6a>
 800be3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be40:	4299      	cmp	r1, r3
 800be42:	d002      	beq.n	800be4a <__swsetup_r+0x66>
 800be44:	4630      	mov	r0, r6
 800be46:	f7ff fc41 	bl	800b6cc <_free_r>
 800be4a:	2300      	movs	r3, #0
 800be4c:	6363      	str	r3, [r4, #52]	; 0x34
 800be4e:	89a3      	ldrh	r3, [r4, #12]
 800be50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be54:	81a3      	strh	r3, [r4, #12]
 800be56:	2300      	movs	r3, #0
 800be58:	6063      	str	r3, [r4, #4]
 800be5a:	6923      	ldr	r3, [r4, #16]
 800be5c:	6023      	str	r3, [r4, #0]
 800be5e:	89a3      	ldrh	r3, [r4, #12]
 800be60:	f043 0308 	orr.w	r3, r3, #8
 800be64:	81a3      	strh	r3, [r4, #12]
 800be66:	6923      	ldr	r3, [r4, #16]
 800be68:	b94b      	cbnz	r3, 800be7e <__swsetup_r+0x9a>
 800be6a:	89a3      	ldrh	r3, [r4, #12]
 800be6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be74:	d003      	beq.n	800be7e <__swsetup_r+0x9a>
 800be76:	4621      	mov	r1, r4
 800be78:	4630      	mov	r0, r6
 800be7a:	f000 fa09 	bl	800c290 <__smakebuf_r>
 800be7e:	89a0      	ldrh	r0, [r4, #12]
 800be80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be84:	f010 0301 	ands.w	r3, r0, #1
 800be88:	d00a      	beq.n	800bea0 <__swsetup_r+0xbc>
 800be8a:	2300      	movs	r3, #0
 800be8c:	60a3      	str	r3, [r4, #8]
 800be8e:	6963      	ldr	r3, [r4, #20]
 800be90:	425b      	negs	r3, r3
 800be92:	61a3      	str	r3, [r4, #24]
 800be94:	6923      	ldr	r3, [r4, #16]
 800be96:	b943      	cbnz	r3, 800beaa <__swsetup_r+0xc6>
 800be98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800be9c:	d1ba      	bne.n	800be14 <__swsetup_r+0x30>
 800be9e:	bd70      	pop	{r4, r5, r6, pc}
 800bea0:	0781      	lsls	r1, r0, #30
 800bea2:	bf58      	it	pl
 800bea4:	6963      	ldrpl	r3, [r4, #20]
 800bea6:	60a3      	str	r3, [r4, #8]
 800bea8:	e7f4      	b.n	800be94 <__swsetup_r+0xb0>
 800beaa:	2000      	movs	r0, #0
 800beac:	e7f7      	b.n	800be9e <__swsetup_r+0xba>
 800beae:	bf00      	nop
 800beb0:	200000fc 	.word	0x200000fc
 800beb4:	0800c98c 	.word	0x0800c98c
 800beb8:	0800c9ac 	.word	0x0800c9ac
 800bebc:	0800c96c 	.word	0x0800c96c

0800bec0 <abort>:
 800bec0:	b508      	push	{r3, lr}
 800bec2:	2006      	movs	r0, #6
 800bec4:	f000 fa4c 	bl	800c360 <raise>
 800bec8:	2001      	movs	r0, #1
 800beca:	f7f5 fd39 	bl	8001940 <_exit>
	...

0800bed0 <__sflush_r>:
 800bed0:	898a      	ldrh	r2, [r1, #12]
 800bed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bed6:	4605      	mov	r5, r0
 800bed8:	0710      	lsls	r0, r2, #28
 800beda:	460c      	mov	r4, r1
 800bedc:	d458      	bmi.n	800bf90 <__sflush_r+0xc0>
 800bede:	684b      	ldr	r3, [r1, #4]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	dc05      	bgt.n	800bef0 <__sflush_r+0x20>
 800bee4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	dc02      	bgt.n	800bef0 <__sflush_r+0x20>
 800beea:	2000      	movs	r0, #0
 800beec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bef0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bef2:	2e00      	cmp	r6, #0
 800bef4:	d0f9      	beq.n	800beea <__sflush_r+0x1a>
 800bef6:	2300      	movs	r3, #0
 800bef8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800befc:	682f      	ldr	r7, [r5, #0]
 800befe:	602b      	str	r3, [r5, #0]
 800bf00:	d032      	beq.n	800bf68 <__sflush_r+0x98>
 800bf02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf04:	89a3      	ldrh	r3, [r4, #12]
 800bf06:	075a      	lsls	r2, r3, #29
 800bf08:	d505      	bpl.n	800bf16 <__sflush_r+0x46>
 800bf0a:	6863      	ldr	r3, [r4, #4]
 800bf0c:	1ac0      	subs	r0, r0, r3
 800bf0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf10:	b10b      	cbz	r3, 800bf16 <__sflush_r+0x46>
 800bf12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf14:	1ac0      	subs	r0, r0, r3
 800bf16:	2300      	movs	r3, #0
 800bf18:	4602      	mov	r2, r0
 800bf1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf1c:	6a21      	ldr	r1, [r4, #32]
 800bf1e:	4628      	mov	r0, r5
 800bf20:	47b0      	blx	r6
 800bf22:	1c43      	adds	r3, r0, #1
 800bf24:	89a3      	ldrh	r3, [r4, #12]
 800bf26:	d106      	bne.n	800bf36 <__sflush_r+0x66>
 800bf28:	6829      	ldr	r1, [r5, #0]
 800bf2a:	291d      	cmp	r1, #29
 800bf2c:	d82c      	bhi.n	800bf88 <__sflush_r+0xb8>
 800bf2e:	4a2a      	ldr	r2, [pc, #168]	; (800bfd8 <__sflush_r+0x108>)
 800bf30:	40ca      	lsrs	r2, r1
 800bf32:	07d6      	lsls	r6, r2, #31
 800bf34:	d528      	bpl.n	800bf88 <__sflush_r+0xb8>
 800bf36:	2200      	movs	r2, #0
 800bf38:	6062      	str	r2, [r4, #4]
 800bf3a:	04d9      	lsls	r1, r3, #19
 800bf3c:	6922      	ldr	r2, [r4, #16]
 800bf3e:	6022      	str	r2, [r4, #0]
 800bf40:	d504      	bpl.n	800bf4c <__sflush_r+0x7c>
 800bf42:	1c42      	adds	r2, r0, #1
 800bf44:	d101      	bne.n	800bf4a <__sflush_r+0x7a>
 800bf46:	682b      	ldr	r3, [r5, #0]
 800bf48:	b903      	cbnz	r3, 800bf4c <__sflush_r+0x7c>
 800bf4a:	6560      	str	r0, [r4, #84]	; 0x54
 800bf4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf4e:	602f      	str	r7, [r5, #0]
 800bf50:	2900      	cmp	r1, #0
 800bf52:	d0ca      	beq.n	800beea <__sflush_r+0x1a>
 800bf54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf58:	4299      	cmp	r1, r3
 800bf5a:	d002      	beq.n	800bf62 <__sflush_r+0x92>
 800bf5c:	4628      	mov	r0, r5
 800bf5e:	f7ff fbb5 	bl	800b6cc <_free_r>
 800bf62:	2000      	movs	r0, #0
 800bf64:	6360      	str	r0, [r4, #52]	; 0x34
 800bf66:	e7c1      	b.n	800beec <__sflush_r+0x1c>
 800bf68:	6a21      	ldr	r1, [r4, #32]
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	47b0      	blx	r6
 800bf70:	1c41      	adds	r1, r0, #1
 800bf72:	d1c7      	bne.n	800bf04 <__sflush_r+0x34>
 800bf74:	682b      	ldr	r3, [r5, #0]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d0c4      	beq.n	800bf04 <__sflush_r+0x34>
 800bf7a:	2b1d      	cmp	r3, #29
 800bf7c:	d001      	beq.n	800bf82 <__sflush_r+0xb2>
 800bf7e:	2b16      	cmp	r3, #22
 800bf80:	d101      	bne.n	800bf86 <__sflush_r+0xb6>
 800bf82:	602f      	str	r7, [r5, #0]
 800bf84:	e7b1      	b.n	800beea <__sflush_r+0x1a>
 800bf86:	89a3      	ldrh	r3, [r4, #12]
 800bf88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf8c:	81a3      	strh	r3, [r4, #12]
 800bf8e:	e7ad      	b.n	800beec <__sflush_r+0x1c>
 800bf90:	690f      	ldr	r7, [r1, #16]
 800bf92:	2f00      	cmp	r7, #0
 800bf94:	d0a9      	beq.n	800beea <__sflush_r+0x1a>
 800bf96:	0793      	lsls	r3, r2, #30
 800bf98:	680e      	ldr	r6, [r1, #0]
 800bf9a:	bf08      	it	eq
 800bf9c:	694b      	ldreq	r3, [r1, #20]
 800bf9e:	600f      	str	r7, [r1, #0]
 800bfa0:	bf18      	it	ne
 800bfa2:	2300      	movne	r3, #0
 800bfa4:	eba6 0807 	sub.w	r8, r6, r7
 800bfa8:	608b      	str	r3, [r1, #8]
 800bfaa:	f1b8 0f00 	cmp.w	r8, #0
 800bfae:	dd9c      	ble.n	800beea <__sflush_r+0x1a>
 800bfb0:	6a21      	ldr	r1, [r4, #32]
 800bfb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bfb4:	4643      	mov	r3, r8
 800bfb6:	463a      	mov	r2, r7
 800bfb8:	4628      	mov	r0, r5
 800bfba:	47b0      	blx	r6
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	dc06      	bgt.n	800bfce <__sflush_r+0xfe>
 800bfc0:	89a3      	ldrh	r3, [r4, #12]
 800bfc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfc6:	81a3      	strh	r3, [r4, #12]
 800bfc8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfcc:	e78e      	b.n	800beec <__sflush_r+0x1c>
 800bfce:	4407      	add	r7, r0
 800bfd0:	eba8 0800 	sub.w	r8, r8, r0
 800bfd4:	e7e9      	b.n	800bfaa <__sflush_r+0xda>
 800bfd6:	bf00      	nop
 800bfd8:	20400001 	.word	0x20400001

0800bfdc <_fflush_r>:
 800bfdc:	b538      	push	{r3, r4, r5, lr}
 800bfde:	690b      	ldr	r3, [r1, #16]
 800bfe0:	4605      	mov	r5, r0
 800bfe2:	460c      	mov	r4, r1
 800bfe4:	b913      	cbnz	r3, 800bfec <_fflush_r+0x10>
 800bfe6:	2500      	movs	r5, #0
 800bfe8:	4628      	mov	r0, r5
 800bfea:	bd38      	pop	{r3, r4, r5, pc}
 800bfec:	b118      	cbz	r0, 800bff6 <_fflush_r+0x1a>
 800bfee:	6983      	ldr	r3, [r0, #24]
 800bff0:	b90b      	cbnz	r3, 800bff6 <_fflush_r+0x1a>
 800bff2:	f000 f887 	bl	800c104 <__sinit>
 800bff6:	4b14      	ldr	r3, [pc, #80]	; (800c048 <_fflush_r+0x6c>)
 800bff8:	429c      	cmp	r4, r3
 800bffa:	d11b      	bne.n	800c034 <_fflush_r+0x58>
 800bffc:	686c      	ldr	r4, [r5, #4]
 800bffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d0ef      	beq.n	800bfe6 <_fflush_r+0xa>
 800c006:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c008:	07d0      	lsls	r0, r2, #31
 800c00a:	d404      	bmi.n	800c016 <_fflush_r+0x3a>
 800c00c:	0599      	lsls	r1, r3, #22
 800c00e:	d402      	bmi.n	800c016 <_fflush_r+0x3a>
 800c010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c012:	f000 f915 	bl	800c240 <__retarget_lock_acquire_recursive>
 800c016:	4628      	mov	r0, r5
 800c018:	4621      	mov	r1, r4
 800c01a:	f7ff ff59 	bl	800bed0 <__sflush_r>
 800c01e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c020:	07da      	lsls	r2, r3, #31
 800c022:	4605      	mov	r5, r0
 800c024:	d4e0      	bmi.n	800bfe8 <_fflush_r+0xc>
 800c026:	89a3      	ldrh	r3, [r4, #12]
 800c028:	059b      	lsls	r3, r3, #22
 800c02a:	d4dd      	bmi.n	800bfe8 <_fflush_r+0xc>
 800c02c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c02e:	f000 f908 	bl	800c242 <__retarget_lock_release_recursive>
 800c032:	e7d9      	b.n	800bfe8 <_fflush_r+0xc>
 800c034:	4b05      	ldr	r3, [pc, #20]	; (800c04c <_fflush_r+0x70>)
 800c036:	429c      	cmp	r4, r3
 800c038:	d101      	bne.n	800c03e <_fflush_r+0x62>
 800c03a:	68ac      	ldr	r4, [r5, #8]
 800c03c:	e7df      	b.n	800bffe <_fflush_r+0x22>
 800c03e:	4b04      	ldr	r3, [pc, #16]	; (800c050 <_fflush_r+0x74>)
 800c040:	429c      	cmp	r4, r3
 800c042:	bf08      	it	eq
 800c044:	68ec      	ldreq	r4, [r5, #12]
 800c046:	e7da      	b.n	800bffe <_fflush_r+0x22>
 800c048:	0800c98c 	.word	0x0800c98c
 800c04c:	0800c9ac 	.word	0x0800c9ac
 800c050:	0800c96c 	.word	0x0800c96c

0800c054 <std>:
 800c054:	2300      	movs	r3, #0
 800c056:	b510      	push	{r4, lr}
 800c058:	4604      	mov	r4, r0
 800c05a:	e9c0 3300 	strd	r3, r3, [r0]
 800c05e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c062:	6083      	str	r3, [r0, #8]
 800c064:	8181      	strh	r1, [r0, #12]
 800c066:	6643      	str	r3, [r0, #100]	; 0x64
 800c068:	81c2      	strh	r2, [r0, #14]
 800c06a:	6183      	str	r3, [r0, #24]
 800c06c:	4619      	mov	r1, r3
 800c06e:	2208      	movs	r2, #8
 800c070:	305c      	adds	r0, #92	; 0x5c
 800c072:	f7fd fb89 	bl	8009788 <memset>
 800c076:	4b05      	ldr	r3, [pc, #20]	; (800c08c <std+0x38>)
 800c078:	6263      	str	r3, [r4, #36]	; 0x24
 800c07a:	4b05      	ldr	r3, [pc, #20]	; (800c090 <std+0x3c>)
 800c07c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c07e:	4b05      	ldr	r3, [pc, #20]	; (800c094 <std+0x40>)
 800c080:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c082:	4b05      	ldr	r3, [pc, #20]	; (800c098 <std+0x44>)
 800c084:	6224      	str	r4, [r4, #32]
 800c086:	6323      	str	r3, [r4, #48]	; 0x30
 800c088:	bd10      	pop	{r4, pc}
 800c08a:	bf00      	nop
 800c08c:	0800c399 	.word	0x0800c399
 800c090:	0800c3bb 	.word	0x0800c3bb
 800c094:	0800c3f3 	.word	0x0800c3f3
 800c098:	0800c417 	.word	0x0800c417

0800c09c <_cleanup_r>:
 800c09c:	4901      	ldr	r1, [pc, #4]	; (800c0a4 <_cleanup_r+0x8>)
 800c09e:	f000 b8af 	b.w	800c200 <_fwalk_reent>
 800c0a2:	bf00      	nop
 800c0a4:	0800bfdd 	.word	0x0800bfdd

0800c0a8 <__sfmoreglue>:
 800c0a8:	b570      	push	{r4, r5, r6, lr}
 800c0aa:	2268      	movs	r2, #104	; 0x68
 800c0ac:	1e4d      	subs	r5, r1, #1
 800c0ae:	4355      	muls	r5, r2
 800c0b0:	460e      	mov	r6, r1
 800c0b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c0b6:	f7ff fa17 	bl	800b4e8 <_malloc_r>
 800c0ba:	4604      	mov	r4, r0
 800c0bc:	b140      	cbz	r0, 800c0d0 <__sfmoreglue+0x28>
 800c0be:	2100      	movs	r1, #0
 800c0c0:	e9c0 1600 	strd	r1, r6, [r0]
 800c0c4:	300c      	adds	r0, #12
 800c0c6:	60a0      	str	r0, [r4, #8]
 800c0c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c0cc:	f7fd fb5c 	bl	8009788 <memset>
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	bd70      	pop	{r4, r5, r6, pc}

0800c0d4 <__sfp_lock_acquire>:
 800c0d4:	4801      	ldr	r0, [pc, #4]	; (800c0dc <__sfp_lock_acquire+0x8>)
 800c0d6:	f000 b8b3 	b.w	800c240 <__retarget_lock_acquire_recursive>
 800c0da:	bf00      	nop
 800c0dc:	20002039 	.word	0x20002039

0800c0e0 <__sfp_lock_release>:
 800c0e0:	4801      	ldr	r0, [pc, #4]	; (800c0e8 <__sfp_lock_release+0x8>)
 800c0e2:	f000 b8ae 	b.w	800c242 <__retarget_lock_release_recursive>
 800c0e6:	bf00      	nop
 800c0e8:	20002039 	.word	0x20002039

0800c0ec <__sinit_lock_acquire>:
 800c0ec:	4801      	ldr	r0, [pc, #4]	; (800c0f4 <__sinit_lock_acquire+0x8>)
 800c0ee:	f000 b8a7 	b.w	800c240 <__retarget_lock_acquire_recursive>
 800c0f2:	bf00      	nop
 800c0f4:	2000203a 	.word	0x2000203a

0800c0f8 <__sinit_lock_release>:
 800c0f8:	4801      	ldr	r0, [pc, #4]	; (800c100 <__sinit_lock_release+0x8>)
 800c0fa:	f000 b8a2 	b.w	800c242 <__retarget_lock_release_recursive>
 800c0fe:	bf00      	nop
 800c100:	2000203a 	.word	0x2000203a

0800c104 <__sinit>:
 800c104:	b510      	push	{r4, lr}
 800c106:	4604      	mov	r4, r0
 800c108:	f7ff fff0 	bl	800c0ec <__sinit_lock_acquire>
 800c10c:	69a3      	ldr	r3, [r4, #24]
 800c10e:	b11b      	cbz	r3, 800c118 <__sinit+0x14>
 800c110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c114:	f7ff bff0 	b.w	800c0f8 <__sinit_lock_release>
 800c118:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c11c:	6523      	str	r3, [r4, #80]	; 0x50
 800c11e:	4b13      	ldr	r3, [pc, #76]	; (800c16c <__sinit+0x68>)
 800c120:	4a13      	ldr	r2, [pc, #76]	; (800c170 <__sinit+0x6c>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	62a2      	str	r2, [r4, #40]	; 0x28
 800c126:	42a3      	cmp	r3, r4
 800c128:	bf04      	itt	eq
 800c12a:	2301      	moveq	r3, #1
 800c12c:	61a3      	streq	r3, [r4, #24]
 800c12e:	4620      	mov	r0, r4
 800c130:	f000 f820 	bl	800c174 <__sfp>
 800c134:	6060      	str	r0, [r4, #4]
 800c136:	4620      	mov	r0, r4
 800c138:	f000 f81c 	bl	800c174 <__sfp>
 800c13c:	60a0      	str	r0, [r4, #8]
 800c13e:	4620      	mov	r0, r4
 800c140:	f000 f818 	bl	800c174 <__sfp>
 800c144:	2200      	movs	r2, #0
 800c146:	60e0      	str	r0, [r4, #12]
 800c148:	2104      	movs	r1, #4
 800c14a:	6860      	ldr	r0, [r4, #4]
 800c14c:	f7ff ff82 	bl	800c054 <std>
 800c150:	68a0      	ldr	r0, [r4, #8]
 800c152:	2201      	movs	r2, #1
 800c154:	2109      	movs	r1, #9
 800c156:	f7ff ff7d 	bl	800c054 <std>
 800c15a:	68e0      	ldr	r0, [r4, #12]
 800c15c:	2202      	movs	r2, #2
 800c15e:	2112      	movs	r1, #18
 800c160:	f7ff ff78 	bl	800c054 <std>
 800c164:	2301      	movs	r3, #1
 800c166:	61a3      	str	r3, [r4, #24]
 800c168:	e7d2      	b.n	800c110 <__sinit+0xc>
 800c16a:	bf00      	nop
 800c16c:	0800c5a0 	.word	0x0800c5a0
 800c170:	0800c09d 	.word	0x0800c09d

0800c174 <__sfp>:
 800c174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c176:	4607      	mov	r7, r0
 800c178:	f7ff ffac 	bl	800c0d4 <__sfp_lock_acquire>
 800c17c:	4b1e      	ldr	r3, [pc, #120]	; (800c1f8 <__sfp+0x84>)
 800c17e:	681e      	ldr	r6, [r3, #0]
 800c180:	69b3      	ldr	r3, [r6, #24]
 800c182:	b913      	cbnz	r3, 800c18a <__sfp+0x16>
 800c184:	4630      	mov	r0, r6
 800c186:	f7ff ffbd 	bl	800c104 <__sinit>
 800c18a:	3648      	adds	r6, #72	; 0x48
 800c18c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c190:	3b01      	subs	r3, #1
 800c192:	d503      	bpl.n	800c19c <__sfp+0x28>
 800c194:	6833      	ldr	r3, [r6, #0]
 800c196:	b30b      	cbz	r3, 800c1dc <__sfp+0x68>
 800c198:	6836      	ldr	r6, [r6, #0]
 800c19a:	e7f7      	b.n	800c18c <__sfp+0x18>
 800c19c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c1a0:	b9d5      	cbnz	r5, 800c1d8 <__sfp+0x64>
 800c1a2:	4b16      	ldr	r3, [pc, #88]	; (800c1fc <__sfp+0x88>)
 800c1a4:	60e3      	str	r3, [r4, #12]
 800c1a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c1aa:	6665      	str	r5, [r4, #100]	; 0x64
 800c1ac:	f000 f847 	bl	800c23e <__retarget_lock_init_recursive>
 800c1b0:	f7ff ff96 	bl	800c0e0 <__sfp_lock_release>
 800c1b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c1b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c1bc:	6025      	str	r5, [r4, #0]
 800c1be:	61a5      	str	r5, [r4, #24]
 800c1c0:	2208      	movs	r2, #8
 800c1c2:	4629      	mov	r1, r5
 800c1c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c1c8:	f7fd fade 	bl	8009788 <memset>
 800c1cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c1d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1d8:	3468      	adds	r4, #104	; 0x68
 800c1da:	e7d9      	b.n	800c190 <__sfp+0x1c>
 800c1dc:	2104      	movs	r1, #4
 800c1de:	4638      	mov	r0, r7
 800c1e0:	f7ff ff62 	bl	800c0a8 <__sfmoreglue>
 800c1e4:	4604      	mov	r4, r0
 800c1e6:	6030      	str	r0, [r6, #0]
 800c1e8:	2800      	cmp	r0, #0
 800c1ea:	d1d5      	bne.n	800c198 <__sfp+0x24>
 800c1ec:	f7ff ff78 	bl	800c0e0 <__sfp_lock_release>
 800c1f0:	230c      	movs	r3, #12
 800c1f2:	603b      	str	r3, [r7, #0]
 800c1f4:	e7ee      	b.n	800c1d4 <__sfp+0x60>
 800c1f6:	bf00      	nop
 800c1f8:	0800c5a0 	.word	0x0800c5a0
 800c1fc:	ffff0001 	.word	0xffff0001

0800c200 <_fwalk_reent>:
 800c200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c204:	4606      	mov	r6, r0
 800c206:	4688      	mov	r8, r1
 800c208:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c20c:	2700      	movs	r7, #0
 800c20e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c212:	f1b9 0901 	subs.w	r9, r9, #1
 800c216:	d505      	bpl.n	800c224 <_fwalk_reent+0x24>
 800c218:	6824      	ldr	r4, [r4, #0]
 800c21a:	2c00      	cmp	r4, #0
 800c21c:	d1f7      	bne.n	800c20e <_fwalk_reent+0xe>
 800c21e:	4638      	mov	r0, r7
 800c220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c224:	89ab      	ldrh	r3, [r5, #12]
 800c226:	2b01      	cmp	r3, #1
 800c228:	d907      	bls.n	800c23a <_fwalk_reent+0x3a>
 800c22a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c22e:	3301      	adds	r3, #1
 800c230:	d003      	beq.n	800c23a <_fwalk_reent+0x3a>
 800c232:	4629      	mov	r1, r5
 800c234:	4630      	mov	r0, r6
 800c236:	47c0      	blx	r8
 800c238:	4307      	orrs	r7, r0
 800c23a:	3568      	adds	r5, #104	; 0x68
 800c23c:	e7e9      	b.n	800c212 <_fwalk_reent+0x12>

0800c23e <__retarget_lock_init_recursive>:
 800c23e:	4770      	bx	lr

0800c240 <__retarget_lock_acquire_recursive>:
 800c240:	4770      	bx	lr

0800c242 <__retarget_lock_release_recursive>:
 800c242:	4770      	bx	lr

0800c244 <__swhatbuf_r>:
 800c244:	b570      	push	{r4, r5, r6, lr}
 800c246:	460e      	mov	r6, r1
 800c248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c24c:	2900      	cmp	r1, #0
 800c24e:	b096      	sub	sp, #88	; 0x58
 800c250:	4614      	mov	r4, r2
 800c252:	461d      	mov	r5, r3
 800c254:	da08      	bge.n	800c268 <__swhatbuf_r+0x24>
 800c256:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c25a:	2200      	movs	r2, #0
 800c25c:	602a      	str	r2, [r5, #0]
 800c25e:	061a      	lsls	r2, r3, #24
 800c260:	d410      	bmi.n	800c284 <__swhatbuf_r+0x40>
 800c262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c266:	e00e      	b.n	800c286 <__swhatbuf_r+0x42>
 800c268:	466a      	mov	r2, sp
 800c26a:	f000 f8fb 	bl	800c464 <_fstat_r>
 800c26e:	2800      	cmp	r0, #0
 800c270:	dbf1      	blt.n	800c256 <__swhatbuf_r+0x12>
 800c272:	9a01      	ldr	r2, [sp, #4]
 800c274:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c278:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c27c:	425a      	negs	r2, r3
 800c27e:	415a      	adcs	r2, r3
 800c280:	602a      	str	r2, [r5, #0]
 800c282:	e7ee      	b.n	800c262 <__swhatbuf_r+0x1e>
 800c284:	2340      	movs	r3, #64	; 0x40
 800c286:	2000      	movs	r0, #0
 800c288:	6023      	str	r3, [r4, #0]
 800c28a:	b016      	add	sp, #88	; 0x58
 800c28c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c290 <__smakebuf_r>:
 800c290:	898b      	ldrh	r3, [r1, #12]
 800c292:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c294:	079d      	lsls	r5, r3, #30
 800c296:	4606      	mov	r6, r0
 800c298:	460c      	mov	r4, r1
 800c29a:	d507      	bpl.n	800c2ac <__smakebuf_r+0x1c>
 800c29c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c2a0:	6023      	str	r3, [r4, #0]
 800c2a2:	6123      	str	r3, [r4, #16]
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	6163      	str	r3, [r4, #20]
 800c2a8:	b002      	add	sp, #8
 800c2aa:	bd70      	pop	{r4, r5, r6, pc}
 800c2ac:	ab01      	add	r3, sp, #4
 800c2ae:	466a      	mov	r2, sp
 800c2b0:	f7ff ffc8 	bl	800c244 <__swhatbuf_r>
 800c2b4:	9900      	ldr	r1, [sp, #0]
 800c2b6:	4605      	mov	r5, r0
 800c2b8:	4630      	mov	r0, r6
 800c2ba:	f7ff f915 	bl	800b4e8 <_malloc_r>
 800c2be:	b948      	cbnz	r0, 800c2d4 <__smakebuf_r+0x44>
 800c2c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2c4:	059a      	lsls	r2, r3, #22
 800c2c6:	d4ef      	bmi.n	800c2a8 <__smakebuf_r+0x18>
 800c2c8:	f023 0303 	bic.w	r3, r3, #3
 800c2cc:	f043 0302 	orr.w	r3, r3, #2
 800c2d0:	81a3      	strh	r3, [r4, #12]
 800c2d2:	e7e3      	b.n	800c29c <__smakebuf_r+0xc>
 800c2d4:	4b0d      	ldr	r3, [pc, #52]	; (800c30c <__smakebuf_r+0x7c>)
 800c2d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c2d8:	89a3      	ldrh	r3, [r4, #12]
 800c2da:	6020      	str	r0, [r4, #0]
 800c2dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2e0:	81a3      	strh	r3, [r4, #12]
 800c2e2:	9b00      	ldr	r3, [sp, #0]
 800c2e4:	6163      	str	r3, [r4, #20]
 800c2e6:	9b01      	ldr	r3, [sp, #4]
 800c2e8:	6120      	str	r0, [r4, #16]
 800c2ea:	b15b      	cbz	r3, 800c304 <__smakebuf_r+0x74>
 800c2ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	f000 f8c9 	bl	800c488 <_isatty_r>
 800c2f6:	b128      	cbz	r0, 800c304 <__smakebuf_r+0x74>
 800c2f8:	89a3      	ldrh	r3, [r4, #12]
 800c2fa:	f023 0303 	bic.w	r3, r3, #3
 800c2fe:	f043 0301 	orr.w	r3, r3, #1
 800c302:	81a3      	strh	r3, [r4, #12]
 800c304:	89a0      	ldrh	r0, [r4, #12]
 800c306:	4305      	orrs	r5, r0
 800c308:	81a5      	strh	r5, [r4, #12]
 800c30a:	e7cd      	b.n	800c2a8 <__smakebuf_r+0x18>
 800c30c:	0800c09d 	.word	0x0800c09d

0800c310 <_raise_r>:
 800c310:	291f      	cmp	r1, #31
 800c312:	b538      	push	{r3, r4, r5, lr}
 800c314:	4604      	mov	r4, r0
 800c316:	460d      	mov	r5, r1
 800c318:	d904      	bls.n	800c324 <_raise_r+0x14>
 800c31a:	2316      	movs	r3, #22
 800c31c:	6003      	str	r3, [r0, #0]
 800c31e:	f04f 30ff 	mov.w	r0, #4294967295
 800c322:	bd38      	pop	{r3, r4, r5, pc}
 800c324:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c326:	b112      	cbz	r2, 800c32e <_raise_r+0x1e>
 800c328:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c32c:	b94b      	cbnz	r3, 800c342 <_raise_r+0x32>
 800c32e:	4620      	mov	r0, r4
 800c330:	f000 f830 	bl	800c394 <_getpid_r>
 800c334:	462a      	mov	r2, r5
 800c336:	4601      	mov	r1, r0
 800c338:	4620      	mov	r0, r4
 800c33a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c33e:	f000 b817 	b.w	800c370 <_kill_r>
 800c342:	2b01      	cmp	r3, #1
 800c344:	d00a      	beq.n	800c35c <_raise_r+0x4c>
 800c346:	1c59      	adds	r1, r3, #1
 800c348:	d103      	bne.n	800c352 <_raise_r+0x42>
 800c34a:	2316      	movs	r3, #22
 800c34c:	6003      	str	r3, [r0, #0]
 800c34e:	2001      	movs	r0, #1
 800c350:	e7e7      	b.n	800c322 <_raise_r+0x12>
 800c352:	2400      	movs	r4, #0
 800c354:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c358:	4628      	mov	r0, r5
 800c35a:	4798      	blx	r3
 800c35c:	2000      	movs	r0, #0
 800c35e:	e7e0      	b.n	800c322 <_raise_r+0x12>

0800c360 <raise>:
 800c360:	4b02      	ldr	r3, [pc, #8]	; (800c36c <raise+0xc>)
 800c362:	4601      	mov	r1, r0
 800c364:	6818      	ldr	r0, [r3, #0]
 800c366:	f7ff bfd3 	b.w	800c310 <_raise_r>
 800c36a:	bf00      	nop
 800c36c:	200000fc 	.word	0x200000fc

0800c370 <_kill_r>:
 800c370:	b538      	push	{r3, r4, r5, lr}
 800c372:	4d07      	ldr	r5, [pc, #28]	; (800c390 <_kill_r+0x20>)
 800c374:	2300      	movs	r3, #0
 800c376:	4604      	mov	r4, r0
 800c378:	4608      	mov	r0, r1
 800c37a:	4611      	mov	r1, r2
 800c37c:	602b      	str	r3, [r5, #0]
 800c37e:	f7f5 facf 	bl	8001920 <_kill>
 800c382:	1c43      	adds	r3, r0, #1
 800c384:	d102      	bne.n	800c38c <_kill_r+0x1c>
 800c386:	682b      	ldr	r3, [r5, #0]
 800c388:	b103      	cbz	r3, 800c38c <_kill_r+0x1c>
 800c38a:	6023      	str	r3, [r4, #0]
 800c38c:	bd38      	pop	{r3, r4, r5, pc}
 800c38e:	bf00      	nop
 800c390:	20002034 	.word	0x20002034

0800c394 <_getpid_r>:
 800c394:	f7f5 babc 	b.w	8001910 <_getpid>

0800c398 <__sread>:
 800c398:	b510      	push	{r4, lr}
 800c39a:	460c      	mov	r4, r1
 800c39c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3a0:	f000 f894 	bl	800c4cc <_read_r>
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	bfab      	itete	ge
 800c3a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c3aa:	89a3      	ldrhlt	r3, [r4, #12]
 800c3ac:	181b      	addge	r3, r3, r0
 800c3ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c3b2:	bfac      	ite	ge
 800c3b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c3b6:	81a3      	strhlt	r3, [r4, #12]
 800c3b8:	bd10      	pop	{r4, pc}

0800c3ba <__swrite>:
 800c3ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3be:	461f      	mov	r7, r3
 800c3c0:	898b      	ldrh	r3, [r1, #12]
 800c3c2:	05db      	lsls	r3, r3, #23
 800c3c4:	4605      	mov	r5, r0
 800c3c6:	460c      	mov	r4, r1
 800c3c8:	4616      	mov	r6, r2
 800c3ca:	d505      	bpl.n	800c3d8 <__swrite+0x1e>
 800c3cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3d0:	2302      	movs	r3, #2
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f000 f868 	bl	800c4a8 <_lseek_r>
 800c3d8:	89a3      	ldrh	r3, [r4, #12]
 800c3da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3e2:	81a3      	strh	r3, [r4, #12]
 800c3e4:	4632      	mov	r2, r6
 800c3e6:	463b      	mov	r3, r7
 800c3e8:	4628      	mov	r0, r5
 800c3ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ee:	f000 b817 	b.w	800c420 <_write_r>

0800c3f2 <__sseek>:
 800c3f2:	b510      	push	{r4, lr}
 800c3f4:	460c      	mov	r4, r1
 800c3f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3fa:	f000 f855 	bl	800c4a8 <_lseek_r>
 800c3fe:	1c43      	adds	r3, r0, #1
 800c400:	89a3      	ldrh	r3, [r4, #12]
 800c402:	bf15      	itete	ne
 800c404:	6560      	strne	r0, [r4, #84]	; 0x54
 800c406:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c40a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c40e:	81a3      	strheq	r3, [r4, #12]
 800c410:	bf18      	it	ne
 800c412:	81a3      	strhne	r3, [r4, #12]
 800c414:	bd10      	pop	{r4, pc}

0800c416 <__sclose>:
 800c416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c41a:	f000 b813 	b.w	800c444 <_close_r>
	...

0800c420 <_write_r>:
 800c420:	b538      	push	{r3, r4, r5, lr}
 800c422:	4d07      	ldr	r5, [pc, #28]	; (800c440 <_write_r+0x20>)
 800c424:	4604      	mov	r4, r0
 800c426:	4608      	mov	r0, r1
 800c428:	4611      	mov	r1, r2
 800c42a:	2200      	movs	r2, #0
 800c42c:	602a      	str	r2, [r5, #0]
 800c42e:	461a      	mov	r2, r3
 800c430:	f7f5 faad 	bl	800198e <_write>
 800c434:	1c43      	adds	r3, r0, #1
 800c436:	d102      	bne.n	800c43e <_write_r+0x1e>
 800c438:	682b      	ldr	r3, [r5, #0]
 800c43a:	b103      	cbz	r3, 800c43e <_write_r+0x1e>
 800c43c:	6023      	str	r3, [r4, #0]
 800c43e:	bd38      	pop	{r3, r4, r5, pc}
 800c440:	20002034 	.word	0x20002034

0800c444 <_close_r>:
 800c444:	b538      	push	{r3, r4, r5, lr}
 800c446:	4d06      	ldr	r5, [pc, #24]	; (800c460 <_close_r+0x1c>)
 800c448:	2300      	movs	r3, #0
 800c44a:	4604      	mov	r4, r0
 800c44c:	4608      	mov	r0, r1
 800c44e:	602b      	str	r3, [r5, #0]
 800c450:	f7f5 fab9 	bl	80019c6 <_close>
 800c454:	1c43      	adds	r3, r0, #1
 800c456:	d102      	bne.n	800c45e <_close_r+0x1a>
 800c458:	682b      	ldr	r3, [r5, #0]
 800c45a:	b103      	cbz	r3, 800c45e <_close_r+0x1a>
 800c45c:	6023      	str	r3, [r4, #0]
 800c45e:	bd38      	pop	{r3, r4, r5, pc}
 800c460:	20002034 	.word	0x20002034

0800c464 <_fstat_r>:
 800c464:	b538      	push	{r3, r4, r5, lr}
 800c466:	4d07      	ldr	r5, [pc, #28]	; (800c484 <_fstat_r+0x20>)
 800c468:	2300      	movs	r3, #0
 800c46a:	4604      	mov	r4, r0
 800c46c:	4608      	mov	r0, r1
 800c46e:	4611      	mov	r1, r2
 800c470:	602b      	str	r3, [r5, #0]
 800c472:	f7f5 fab4 	bl	80019de <_fstat>
 800c476:	1c43      	adds	r3, r0, #1
 800c478:	d102      	bne.n	800c480 <_fstat_r+0x1c>
 800c47a:	682b      	ldr	r3, [r5, #0]
 800c47c:	b103      	cbz	r3, 800c480 <_fstat_r+0x1c>
 800c47e:	6023      	str	r3, [r4, #0]
 800c480:	bd38      	pop	{r3, r4, r5, pc}
 800c482:	bf00      	nop
 800c484:	20002034 	.word	0x20002034

0800c488 <_isatty_r>:
 800c488:	b538      	push	{r3, r4, r5, lr}
 800c48a:	4d06      	ldr	r5, [pc, #24]	; (800c4a4 <_isatty_r+0x1c>)
 800c48c:	2300      	movs	r3, #0
 800c48e:	4604      	mov	r4, r0
 800c490:	4608      	mov	r0, r1
 800c492:	602b      	str	r3, [r5, #0]
 800c494:	f7f5 fab3 	bl	80019fe <_isatty>
 800c498:	1c43      	adds	r3, r0, #1
 800c49a:	d102      	bne.n	800c4a2 <_isatty_r+0x1a>
 800c49c:	682b      	ldr	r3, [r5, #0]
 800c49e:	b103      	cbz	r3, 800c4a2 <_isatty_r+0x1a>
 800c4a0:	6023      	str	r3, [r4, #0]
 800c4a2:	bd38      	pop	{r3, r4, r5, pc}
 800c4a4:	20002034 	.word	0x20002034

0800c4a8 <_lseek_r>:
 800c4a8:	b538      	push	{r3, r4, r5, lr}
 800c4aa:	4d07      	ldr	r5, [pc, #28]	; (800c4c8 <_lseek_r+0x20>)
 800c4ac:	4604      	mov	r4, r0
 800c4ae:	4608      	mov	r0, r1
 800c4b0:	4611      	mov	r1, r2
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	602a      	str	r2, [r5, #0]
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	f7f5 faac 	bl	8001a14 <_lseek>
 800c4bc:	1c43      	adds	r3, r0, #1
 800c4be:	d102      	bne.n	800c4c6 <_lseek_r+0x1e>
 800c4c0:	682b      	ldr	r3, [r5, #0]
 800c4c2:	b103      	cbz	r3, 800c4c6 <_lseek_r+0x1e>
 800c4c4:	6023      	str	r3, [r4, #0]
 800c4c6:	bd38      	pop	{r3, r4, r5, pc}
 800c4c8:	20002034 	.word	0x20002034

0800c4cc <_read_r>:
 800c4cc:	b538      	push	{r3, r4, r5, lr}
 800c4ce:	4d07      	ldr	r5, [pc, #28]	; (800c4ec <_read_r+0x20>)
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	4608      	mov	r0, r1
 800c4d4:	4611      	mov	r1, r2
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	602a      	str	r2, [r5, #0]
 800c4da:	461a      	mov	r2, r3
 800c4dc:	f7f5 fa3a 	bl	8001954 <_read>
 800c4e0:	1c43      	adds	r3, r0, #1
 800c4e2:	d102      	bne.n	800c4ea <_read_r+0x1e>
 800c4e4:	682b      	ldr	r3, [r5, #0]
 800c4e6:	b103      	cbz	r3, 800c4ea <_read_r+0x1e>
 800c4e8:	6023      	str	r3, [r4, #0]
 800c4ea:	bd38      	pop	{r3, r4, r5, pc}
 800c4ec:	20002034 	.word	0x20002034

0800c4f0 <_init>:
 800c4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4f2:	bf00      	nop
 800c4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4f6:	bc08      	pop	{r3}
 800c4f8:	469e      	mov	lr, r3
 800c4fa:	4770      	bx	lr

0800c4fc <_fini>:
 800c4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4fe:	bf00      	nop
 800c500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c502:	bc08      	pop	{r3}
 800c504:	469e      	mov	lr, r3
 800c506:	4770      	bx	lr
